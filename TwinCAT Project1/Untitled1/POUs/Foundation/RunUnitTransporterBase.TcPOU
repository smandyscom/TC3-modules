<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.10">
  <POU Name="RunUnitTransporterBase" Id="{05eb4ac2-43a3-44ce-8012-78838d9522d6}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunUnitTransporterBase EXTENDS RunUnitGeneric
VAR_INPUT	
	//self
	syncAcknowledged AT%M*  : BOOL; //downstream replied starting ackowledge , face to downstream
	syncMatId AT%M* : DWORD := 0;
	syncMatValid AT%M* : BOOL := FALSE;
END_VAR
VAR_OUTPUT
	//self
	syncEngaged AT%M*  : BOOL; //inform downstream i am ready , face to downstream
	
END_VAR
VAR		
	//
	Upstream : POINTER TO RunUnitTransporterBase;//upstream linkage
	//proxy mode
	isProxyMode : BOOL := FALSE;
	
	pollingTimer : TON;
	fbAdsSyncRead : FB_ReadAdsSymByName;
	fbAdsSyncWrite : FB_WriteAdsSymByName;
	fbAdsSyncMatIdRead : FB_ReadAdsSymByName;
	fbAdsSyncMatValidRead : FB_ReadAdsSymByName;
	
	preSyncEngaged : BOOL := FALSE;
	
END_VAR
VAR PERSISTENT
	//proxy mode parameters
	netId : T_AmsNetID;
	port : T_AmsPort := 851; //Tc3
	
	varNameSyncEngaged : STRING;
	varNameSyncAckowledged : STRING;
	varNameSyncMatIdSync : STRING;
	varNameSyncMatValidSync : STRING;
	
	timeoutTimer : TON;	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//non proxy 	
SUPER^();

IF (outputState <> NextState) OR bSerialTransition THEN
	//once state transit , reset timer
	timeoutTimer.IN := FALSE;
ELSIF NOT timeoutTimer.IN THEN
	//once timer not activated 
	timeoutTimer.IN := TRUE;
END_IF

IF NOT isProxyMode THEN
	RETURN;
END_IF

pollingTimer(IN:= NOT pollingTimer.Q, PT:= T#50MS, Q=> , ET=> );

//do ADS data exchanging
fbAdsSyncRead(
	bRead:= pollingTimer.Q, 
	sNetId:= netId, 
	nPort:= port, 
	sVarName:= varNameSyncEngaged, 
	nDestAddr:= ADR(preSyncEngaged), 
	nLen:= SIZEOF(preSyncEngaged), 
	tTimeout:= , 
	eComMode:= , 
	bBusy=> , 
	bError=> , 
	nErrorId=> );
		
fbAdsSyncWrite(
	bWrite:= pollingTimer.Q, 
	sNetId:= netId, 
	nPort:= port, 
	sVarName:= varNameSyncAckowledged, 
	nSrcAddr:= ADR(syncAcknowledged), 
	nLen:= SIZEOF(syncAcknowledged), 
	tTimeout:= , 
	eComMode:= , 
	bBusy=> , 
	bError=> , 
	nErrorId=> );		
			
fbAdsSyncMatIdRead(
	bRead:= , 
	sNetId:= netId, 
	nPort:= port, 
	sVarName:= varNameSyncMatIdSync, 
	nDestAddr:= ADR(syncMatId), 
	nLen:= SIZEOF(syncMatId), 
	tTimeout:= , 
	eComMode:= , 
	bBusy=> , 
	bError=> , 
	nErrorId=> );
fbAdsSyncMatValidRead(
	bRead:= , 
	sNetId:= netId, 
	nPort:= port, 
	sVarName:= varNameSyncMatValidSync, 
	nDestAddr:= ADR(syncMatValid), 
	nLen:= SIZEOF(syncMatValid), 
	tTimeout:= , 
	eComMode:= , 
	bBusy=> , 
	bError=> , 
	nErrorId=> );
	

//data exchanging do not be break
atomicOperation := TRUE;
CASE outputState OF
	0:
		IF preSyncEngaged THEN
						
			//start reading
			fbAdsSyncMatIdRead.bRead := TRUE;
			fbAdsSyncMatValidRead.bRead:= TRUE;
			
			bSerialTransition := TRUE;
		END_IF
	1:
		IF NOT fbAdsSyncMatIdRead.bBusy AND NOT fbAdsSyncMatValidRead.bBusy THEN
			syncEngaged:= TRUE; //mat sync verified , output to downstream
			bSerialTransition := TRUE;
		END_IF
	2: 
		IF NOT preSyncEngaged THEN
			//done
			syncEngaged := FALSE;
			//wait for next reading
			fbAdsSyncMatIdRead.bRead := FALSE;
			fbAdsSyncMatValidRead.bRead:= FALSE;
			
			
			NextState := 0;
		END_IF
END_CASE
	]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{a8c98733-d54c-4b9b-8f3c-27eb23521d1d}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	argParent : POINTER TO RunUnitGeneric;
	argSlotBase : POINTER TO RunMaterial;
	argSlotLast : POINTER TO RunMaterial;
	
	argUpstream : POINTER TO RunUnitTransporterBase;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//initialize 
Parent := argParent;
SlotBase := argSlotBase;
SlotLast := argSlotLast;

Upstream := argUpstream;

IF Upstream=0 THEN
	isProxyMode:=TRUE; //no upstream , i am proxy
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{79ae30a2-42c5-4835-a8e6-46d0a2798a9c}">
      <Declaration><![CDATA[METHOD Initialize : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
//reset sync signal
CASE outputState OF
	eSpecialStates.INITIAL_BEGIN:
		syncEngaged := FALSE; //reset
		IF Upstream <> 0 THEN
			Upstream^.syncAcknowledged := FALSE; //reset
		END_IF
		//direct change state
		NextState := eSpecialStates.INITIAL_END;
END_CASE

Initialize := SUPER^.Initialize();
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="RunUnitTransporterBase">
      <LineId Id="1119" Count="68" />
      <LineId Id="1218" Count="0" />
      <LineId Id="1217" Count="0" />
      <LineId Id="1188" Count="27" />
      <LineId Id="329" Count="0" />
    </LineIds>
    <LineIds Name="RunUnitTransporterBase.FB_init">
      <LineId Id="15" Count="4" />
      <LineId Id="21" Count="3" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="RunUnitTransporterBase.Initialize">
      <LineId Id="9" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="18" Count="3" />
      <LineId Id="15" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>