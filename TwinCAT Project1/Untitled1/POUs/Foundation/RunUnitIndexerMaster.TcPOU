<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="RunUnitIndexerMaster" Id="{2551b589-75e5-432e-8b87-41fecbcdc1e1}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunUnitIndexerMaster EXTENDS RunUnitGeneric
VAR_INPUT
	syncAcknowledged AT%I* : BOOL; //downstream replied starting ackowledge , face to downstream
END_VAR
VAR_OUTPUT
	syncEngaged AT%Q* : BOOL; //inform downstream i am ready , face to downstream
END_VAR
VAR
	ptContextMaster : POINTER TO UnitIndexerMaster ;//context linkage
	
	ptUpstreamMaster : POINTER TO RunUnitIndexerMaster;//upstream linkage
	
	ptAxisMaster : POINTER TO RunAxis; //axis reference
	
	//Working registers
	matIsValidStatus : DWORD;
	matSyncDone : DWORD;
	
	slaveWorkingSignal : ARRAY[1..32] OF BOOL; // collect slave working signal , possible to access externally?
	
	nCounter : INT;
	condition : BOOL;
	
	isLastSlotOccupied : BOOL; //indicate if last slot occupied
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^(); // call base class's execution

CASE SUPER^.state OF
	0:
		//check material synchronization to Databse
		//raise working signals for all linked slave
		FOR nCounter:=1 TO 32 BY 1 DO
			slaveWorkingSignal[nCounter] := (ptContextMaster^.slaveLinkageStatus AND SHL(16#1,nCounter-1)) <> 0 ;
		END_FOR
		ptMine^.serialTransition := TRUE;
	1:
		//if all working status meets , transition
		//all working signal should be zero
		condition :=TRUE;
		FOR nCounter:=1 TO 32 BY 1 DO
			condition := condition AND NOT slaveWorkingSignal[nCounter];
		END_FOR
		IF condition AND NOT syncAcknowledged THEN
			ptMine^.serialTransition := TRUE;
			
			
			isLastSlotOccupied := (ptSlotLast^.wordOut AND SHL(16#1,scIsValid)) <> 0; //check out last slot status
			syncEngaged := isLastSlotOccupied;//ready to synchronizing (communicate with downstream
		END_IF
	2:
		//2 modes
		// a. synchronize with downstream only, go with pull upstream if avialable
		// b. synchronize with down/upstream both
	
		// pull by downstream (set on then check off
		// pull upstream (check on then reset
		
		//listen to move
		ptMine^.serialTransition :=  (NOT isLastSlotOccupied) OR (syncAcknowledged AND isLastSlotOccupied);
		
		//seted by downstream
		IF syncAcknowledged THEN
			syncEngaged := FALSE; //off
		END_IF
		
		//once going pull upstream working together
		IF ptMine^.serialTransition AND ptUpstreamMaster <> 0 THEN
			ptUpstreamMaster^.syncAcknowledged := ptUpstreamMaster^.syncEngaged;
		END_IF
		
	3:
		//do shifting movement
END_CASE

// Handshaking sequence (face to upstream
IF ptUpstreamMaster <> 0 AND_THEN NOT ptUpstreamMaster^.syncEngaged THEN
	ptUpstreamMaster^.syncAcknowledged := FALSE; //reset upstream
END_IF
]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{b6ef164b-1316-42c1-8dbc-2d2d314e57b5}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	ptBlock : POINTER TO UnitBase;
	ptUpstream : POINTER TO RunUnitIndexerMaster := 0;
	ptAxis : POINTER TO RunAxis;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//ptContextMaster := ptMine; //linkage and casting
ptUpstreamMaster := ptUpstream;
ptAxisMaster := ptAxis;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ProxyMode" Id="{33b629b5-5210-4d2f-9d83-0eef6582dc16}">
      <Declaration><![CDATA[METHOD ProxyMode : BOOL
VAR_INPUT
	netId : T_AmsNetID;
	port : T_AmsPort := 851;
END_VAR
VAR
	fbAdsRead : ADSREAD;
	fbAdsWrite : ADSWRITE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//do ADS data exchanging only
fbAdsRead(
	NETID:= netId, 
	PORT:= port, 
	IDXGRP:= TO_UDINT(eUpstreamComm.indexGroup), 
	IDXOFFS:= TO_UDINT(eUpstreamComm.offsetUpstreamSyncEngaged), 
	LEN:= SIZEOF(syncEngaged), 
	DESTADDR:= ADR(syncEngaged), 
	READ:= not fbAdsRead.BUSY, 
	TMOUT:= , 
	BUSY=> , 
	ERR=> , 
	ERRID=> );
	
fbAdsWrite(
	NETID:= netId, 
	PORT:= port, 
	IDXGRP:= TO_UDINT(eUpstreamComm.indexGroup), 
	IDXOFFS:= TO_UDINT(eUpstreamComm.offsetUpstreamSyncAckowledged), 
	LEN:= SIZEOF(syncAcknowledged), 
	SRCADDR:= ADR(syncAcknowledged), 
	WRITE:= NOT fbAdsWrite.BUSY, 
	TMOUT:= , 
	BUSY=> , 
	ERR=> , 
	ERRID=> );]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="RunUnitIndexerMaster">
      <LineId Id="154" Count="0" />
      <LineId Id="159" Count="32" />
      <LineId Id="220" Count="0" />
      <LineId Id="192" Count="5" />
      <LineId Id="212" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="200" Count="5" />
      <LineId Id="214" Count="0" />
      <LineId Id="216" Count="1" />
      <LineId Id="215" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="RunUnitIndexerMaster.FB_init">
      <LineId Id="12" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="RunUnitIndexerMaster.ProxyMode">
      <LineId Id="8" Count="13" />
      <LineId Id="26" Count="10" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>