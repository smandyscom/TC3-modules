<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="RunUnitControllerV2" Id="{b8ed3dbb-ffb0-4792-8cf6-5dee6569b3ad}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunUnitControllerV2 EXTENDS RunUnitGeneric
VAR_INPUT
	isEmergency : BOOL;
END_VAR
VAR_OUTPUT
	//TODO , vanish the idea of Mode , two state only : 1. PAUSE 2. RUN
	currentMode : eOperationModes := eOperationModes.MANUAL; //default in semi-auto
END_VAR
VAR_IN_OUT
	//HMI Control interface
	interfaceControl : POINTER TO InterfaceControlV1;
	interfaceManual : POINTER TO InterfaceManualV1;
	
	pbRed : POINTER TO RunSignal;
	pbGreen : POINTER TO RunSignal;
	pbYellow : POINTER TO RunSignal;
	//------------
	//	Output
	//------------
	semephore : SemephoreV1(argIo:= ADR(gvl.ioControl));
	//
	marshal : POINTER TO RunUnitGeneric;
END_VAR
VAR		
	nCounter : INT;
	
	//error
	requestErrorClear : eErrorClearWays := eErrorClearWays.NO_ACTION;
	errorDevice : POINTER TO CommonBase := 0; //null reference
	errorType : eCategrories;
	errorIndex : INT;
	errorCode : UDINT;
	errorDelayDetect : TON;	
	
	
END_VAR
VAR PERSISTENT
	axisUpperBound : INT;
	cylinderUpperBound : INT;
	signalUpperBound : INT;
	unitUpperBound : INT;
	slotUpperBound : int;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//Purpose:
// 1. As abstract machine itself , switch between modes 
// 2. bridge signals to coordinator

//Clarify : 
// 1. Manual mode : component driven only
// 2. Semi-auto (PAUSE) : sequencer were driven, but most are forbidden to execute (PAUSE state)
// 3. Auto: sequencer drive , all drive autonomous

//Difference to V1 
//1. Hierarchy initializing

//----------------------------------------
// 	COMPONENT LEVEL:
//	running all devices/detect errors
//----------------------------------------
FOR nCounter :=1 TO axisUpperBound BY 1 DO
	gvl.axisControls[nCounter]();
	//error detection
	IF errorDevice=0 AND errorDelayDetect.Q AND gvl.axisControls[nCounter].ErrorDetect() <> 0 THEN
		//error scaned
		interfaceControl^.errorIndex := TO_DWORD(nCounter-1);
		errorDevice := ADR(gvl.axisControls[nCounter]);
	END_IF
END_FOR
FOR nCounter :=1 TO cylinderUpperBound BY 1 DO
	gvl.cylinderControls[nCounter]();
	//error detection
	IF errorDevice=0 AND errorDelayDetect.Q AND gvl.cylinderControls[nCounter].ErrorDetect() <> 0 THEN
		//error scaned
		interfaceControl^.errorIndex := TO_DWORD(nCounter-1);
		errorDevice := ADR(gvl.cylinderControls[nCounter]);
	END_IF
END_FOR
FOR nCounter :=1 TO signalUpperBound BY 1 DO
	gvl.signalControls[nCounter]();
END_FOR
FOR nCounter :=1 TO unitUpperBound BY 1 DO
	//error detection
	IF errorDevice=0 AND errorDelayDetect.Q AND gvl.units[nCounter] <> 0 AND_THEN gvl.units[nCounter]^.ErrorDetect() <> 0THEN
		//station
		interfaceControl^.errorIndex := TO_DWORD(nCounter-1);
		errorDevice := gvl.units[nCounter];
	END_IF
END_FOR


//routines
errorDelayDetect(IN:= (errorDevice = 0), PT:= T#100MS, Q=> , ET=> );	//after reset , wait 100ms to detect
IF errorDevice <>0 THEN
	//errorIndex := nCounter-1;
	interfaceControl^.errorType := errorDevice^.TypeCode();
	interfaceControl^.errorCode := errorDevice^.ErrorDetect();
		
	ErrorHandler();// handling user-input reset/ignore
ELSE
	//reset
	interfaceControl^.errorType := 0;
	interfaceControl^.errorIndex := 0;
	interfaceControl^.errorCode := 0;
END_IF

//reflect to interface
interfaceManual^(currentMode:= currentMode); //scan-in,scan-out,manual...
//handling input request
interfaceControl^(
	currentMode:= currentMode,
	pbGreen := pbGreen^.debouncedOn,
	pbRed := pbRed^.debouncedOn,
	pbYellow := pbYellow^.debouncedOn,
	errorClear=> requestErrorClear);


//mode switcher pre-check
bPause := NOT (currentMode = eOperationModes.AUTO);
IF interfaceControl^.requestMode <> currentMode THEN
	CASE interfaceControl^.requestMode OF 
		eOperationModes.MANUAL,eOperationModes.SEMI_AUTO:
			//direct changes
			currentMode := interfaceControl^.requestMode;
		eOperationModes.AUTO:
			//check : no error , manual channel work done
			IF errorDevice=0 THEN
				currentMode := eOperationModes.AUTO;
			ELSE
				//error remains , refuce to change , maintain
			END_IF 
	END_CASE
END_IF
//
CASE currentMode OF	
		eOperationModes.AUTO,eOperationModes.SEMI_AUTO:
		// sequences driven
		FOR nCounter :=1 TO unitUpperBound BY 1 DO
			IF gvl.units[nCounter] <> 0 THEN
				gvl.units[nCounter]^();
			END_IF
		END_FOR
END_CASE

SUPER^(); //state machine driven
CASE outputState OF
	eSpecialStates.MAIN_WAIT_INITIALIZING:
		bSerialTransition := interfaceControl^.requestInit AND NOT isEmergency;
	eSpecialStates.MAIN_INITIALIZING:
		bSerialTransition := marshal^.Initialize();
	eSpecialStates.MAIN_INITIALIZED:
		//wait emergency situation 
		IF isEmergency THEN
			NextState := eSpecialStates.MAIN_WAIT_INITIALIZING;
		END_IF
END_CASE

interfaceControl^.state := TO_WORD(outputState);
//control tower light/button light
semephore(currentMode:= currentMode, 
			isError:= errorDevice <>0, 
			isInitializing:= (outputState=eSpecialStates.MAIN_INITIALIZING));]]></ST>
    </Implementation>
    <Method Name="ErrorHandler" Id="{4627a7df-ca78-4733-b1b0-db72d89420ff}">
      <Declaration><![CDATA[METHOD ErrorHandler : BOOL
VAR_INPUT
END_VAR
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//once error scanned
IF currentMode = eOperationModes.AUTO THEN
	//once error deteted and in AUTO mode , forcely switch to SEMI_AUTO
	currentMode := eOperationModes.SEMI_AUTO;
END_IF
//reset error handling
IF requestErrorClear <> eErrorClearWays.NO_ACTION THEN
	errorDevice^.ErrorClear(requestErrorClear); //call error clear function
	requestErrorClear := eErrorClearWays.NO_ACTION;
	errorDevice := 0 ;// cut link
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{59012378-cdc1-4f5d-9c82-ed2cdadc0d0a}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	argParent : POINTER TO RunUnitGeneric;
	argSlotBase : POINTER TO RunMaterial;
	argSlotLast : POINTER TO RunMaterial;
	
	argPbRed : POINTER TO RunSignal;
	argPbGreen : POINTER TO RunSignal;
	argPbYellow : POINTER TO RunSignal;
	
	argInterfaceControl : POINTER TO InterfaceControlV1;
	argInterfaceManual : POINTER TO InterfaceManualV1;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//initialize 
Parent := argParent;
SlotBase := argSlotBase;
SlotLast := argSlotLast;
//
IF bInitRetains THEN
	NextState := eSpecialStates.INITIAL_BEGIN;
END_IF
//input
pbRed := argPbRed;
pbGreen := argPbGreen;
pbYellow := argPbYellow;

interfaceControl := argInterfaceControl;
interfaceManual := argInterfaceManual;

interfaceControl^.state := TO_WORD(eSpecialStates.MAIN_WAIT_INITIALIZING);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{3c818e41-45a8-4c2f-bd9c-738e8bc94403}">
      <Declaration><![CDATA[METHOD Initialize : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="RunUnitControllerV2">
      <LineId Id="1605" Count="116" />
      <LineId Id="1050" Count="0" />
    </LineIds>
    <LineIds Name="RunUnitControllerV2.ErrorHandler">
      <LineId Id="122" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="125" Count="1" />
      <LineId Id="100" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="104" Count="1" />
      <LineId Id="102" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="RunUnitControllerV2.FB_init">
      <LineId Id="12" Count="7" />
      <LineId Id="28" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="60" Count="2" />
      <LineId Id="43" Count="0" />
      <LineId Id="42" Count="0" />
    </LineIds>
    <LineIds Name="RunUnitControllerV2.Initialize">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>