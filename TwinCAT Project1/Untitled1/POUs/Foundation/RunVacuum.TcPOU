<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="RunVacuum" Id="{f228bb52-7ea9-46f3-811e-2b9a8550fbc1}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunVacuum EXTENDS ExecuteBase
VAR_INPUT
	isErrorDetectEnabled : BOOL;
	isActiveAutoBreakStroke : BOOL;	//TODO , start breaker stroke then stop
END_VAR
VAR_OUTPUT
	vacuumSensorValue AT %I* : UINT;
END_VAR
VAR
	COMMAND_CACHED : eCylinderCommands; //1 , HMI->PLC
	LAST_COMMAND : eCylinderCommands;   //2 , 
		
	ACT_GENERATOR AT %Q* : BOOL;
	ACT_BREAKER AT %Q* : BOOL;
		
	thresholdsMatches: ARRAY[0..3] OF BOOL; //numerical in
	thresholdMatched : BOOL;
	
	nCounter : INT := 0;
	bMatched : BOOL := false;
		
	BIT_WARNING : BOOL; //0	
	BIT_WARN_SUPPRESS : BOOL; //3 , (Control)
	BIT_DONE : BOOL; //5 (Threshold matched)
END_VAR
VAR PERSISTENT
	thresholdCurrentSet : INT; //
	thresholdValues : ARRAY[0..3] OF UINT;
	
	TMR_WATCH_DOG : TON ; //Watch dog timer
	TMR_DELAY_TO_THRESHOLD : TON;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^();

//Command received -> delay -> output , and refresh relative sensor

//------------
//
//-------------
FOR nCounter:= 0 TO 3 BY 1 DO
	thresholdsMatches[nCounter] := (vacuumSensorValue >= thresholdValues[nCounter]);
END_FOR
// scan all sensor status
thresholdMatched := thresholdsMatches[thresholdCurrentSet]; // whether match the master set
//Run timers
TMR_WATCH_DOG(IN:= , PT:= , Q=> , ET=> );
TMR_DELAY_TO_THRESHOLD(IN:= , PT:= , Q=> , ET=> );

// once command changes , reset timer counter
IF COMMAND_CACHED <> LAST_COMMAND THEN
	//reset done/warn
	BIT_DONE := FALSE;
	BIT_WARNING := FALSE;
	
	//output 
	ACT_BREAKER := (COMMAND_CACHED = eCylinderCommands.COMMAND_A);
	ACT_GENERATOR := (COMMAND_CACHED = eCylinderCommands.COMMAND_B);	
END_IF


//reset
bMatched := FALSE;
// Check if match
CASE COMMAND_CACHED OF
	eCylinderCommands.NO_COMMAND,eCylinderCommands.COMMAND_A:
	bMatched:= TRUE;
	
	eCylinderCommands.COMMAND_B:
	
		bMatched:= (thresholdMatched )  AND TMR_DELAY_TO_THRESHOLD.Q;
	
		
END_CASE

//start
TMR_WATCH_DOG.in := NOT bMatched AND TMR_DELAY_TO_THRESHOLD.Q;


// status update
BIT_DONE := bMatched OR (NOT bMatched AND BIT_WARN_SUPPRESS AND TMR_WATCH_DOG.Q);
BIT_WARNING := (NOT bMatched) AND (NOT BIT_WARN_SUPPRESS) AND TMR_WATCH_DOG.Q AND TMR_DELAY_TO_THRESHOLD.Q;
// cache last command
LAST_COMMAND := COMMAND_CACHED;

//turn off once done
TMR_DELAY_TO_THRESHOLD.IN := NOT BIT_DONE; //active A delay timer once not done
]]></ST>
    </Implementation>
    <Folder Name="CommonBase" Id="{119ac4ac-a070-4964-91b6-1098b43d0930}" />
    <Method Name="ConfigureRead" Id="{e4328d86-5ac7-448e-92b5-6ef30e082ccc}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD ConfigureRead : CellDataBlock
VAR_INPUT
	input : CellDataBlock; //would offer sub-index ...etc
	mode : eModes;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//TODO , reserved

//ConfigureRead.vacuum. := TO_WORD(thresholdCount);
//ConfigureRead.vacuum.sensorBUsedCount := TO_WORD(B_SENSOR_USED_COUNT);

//ConfigureRead.vacuum.timerSetValue := TO_WORD(TMR_WATCH_DOG.PT);
//ConfigureRead.vacuum.timerSetValue := TO_WORD(TMR_DELAY_TO_THRESHOLD.PT);]]></ST>
      </Implementation>
    </Method>
    <Method Name="ConfigureWrite" Id="{354f81a0-763a-4230-9004-ca0ad8533224}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD ConfigureWrite : BOOL
VAR_INPUT
	input : CellDataBlock;
	mode : eModes;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//TODO , reserved
//A_SENSOR_USED_COUNT := TO_INT(input.cylinder.sensorAUsedCount);
//B_SENSOR_USED_COUNT := TO_INT(input.cylinder.sensorBUsedCount);

//TMR_WATCH_DOG.PT := TO_TIME(input.cylinder.timerSetValue);
//TMR_DELAY_TO_A.PT := TO_TIME(input.cylinder.timerSetValue);
//TMR_DELAY_TO_B.PT := TO_TIME(input.cylinder.timerSetValue);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Control" Id="{f66b3a39-49c7-4c4e-9e00-75ac6727c428}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD Control : BOOL
VAR_INPUT
	input : CellDataBlock;
	mode : eModes;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Execute(argCommand:= input.cylinder.command);
Control:=true;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ErrorClear" Id="{60519a14-506a-44c4-ac1e-0c0bba117d52}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD ErrorClear : BOOL
VAR_INPUT
	input : eErrorClearWays;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//suppress is the only way
BIT_WARN_SUPPRESS := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ErrorDetect" Id="{07bb229a-8ae7-4e82-82c3-5cef497f95a9}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD ErrorDetect : UDINT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT isErrorDetectEnabled THEN
	ErrorDetect := 0;
ELSIF BIT_WARNING THEN
	ErrorDetect := COMMAND_CACHED; //distinguish different error 
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Execute" Id="{8dc7b7d8-3f66-4f42-ad1a-2509fef862bd}">
      <Declaration><![CDATA[METHOD Execute : BOOL
VAR_INPUT
	argCommand : eCylinderCommands;
END_VAR
VAR
	outDone : BOOL ;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// store command
COMMAND_CACHED := argCommand;

outDone := BIT_DONE AND NOT BIT_WARNING AND (COMMAND_CACHED = LAST_COMMAND);

//reset surpress
IF outDone THEN
	BIT_WARN_SUPPRESS := FALSE;
END_IF

Execute:=outDone; //return]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{c4d18cc2-9e70-45b9-a00b-6c3e51d5178e}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	//argASensorUsed : INT := 0;
	//argBSensorUsed : INT := 0;
END_VAR
VAR
	nCounter : int;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//A_SENSOR_USED_COUNT := argASensorUsed;
//B_SENSOR_USED_COUNT := argBSensorUsed;

//given timer initial value
//TMR_WATCH_DOG.PT := T#200MS;
//TMR_DELAY_TO_A.PT := T#200MS;
//TMR_DELAY_TO_B.PT := T#200MS;
IF bInitRetains THEN
	TMR_WATCH_DOG.PT := T#200MS;
	TMR_DELAY_TO_THRESHOLD.PT := T#200MS;
	
	thresholdCurrentSet := 0;
	
	FOR nCounter:= 0 TO 15 BY 1 DO
		thresholdValues[nCounter] := -1; 
// default thresholds less than default read-in
// would always output MATCHED
	END_FOR
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Monitor" Id="{74e0a0e8-ebf6-4c07-860f-3bcbef09e52c}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD Monitor : CellDataBlock
VAR_INPUT
END_VAR
VAR CONSTANT
	bit0Warn : INT :=0;
	bit1MonGroupA : INT :=1;
	bit2MonGroupB : INT :=2;
	bit3CtlSuppress : INT :=3;
	bit4TmrOn : INT :=4;
	bit5Done : INT := 5;
	//New
	bit6TmrAOn : INT :=6;
	bit7TmrBOn : INT :=7;
END_VAR
VAR
	TMR_DELAY_TO_B: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//TODO , reserved

Monitor.vacuum.statusWord.bit0Warn := BIT_WARNING;
//Monitor.vacuum.statusWord.bit1MonGroupA := BIT_A_MATCH;
//Monitor.vacuum.statusWord.bit2MonGroupB := BIT_B_MATCH;
Monitor.vacuum.statusWord.bit3CtlSuppress := BIT_WARN_SUPPRESS;
Monitor.vacuum.statusWord.bit4TmrOn := TMR_WATCH_DOG.Q;
Monitor.vacuum.statusWord.bit5Done := BIT_DONE;

//Monitor.vacuum.statusWord.bit6TmrAOn := TMR_DELAY_TO_A.Q;
//Monitor.vacuum.statusWord.bit7TmrBOn := TMR_DELAY_TO_B.Q;

Monitor.vacuum.lastCommand := LAST_COMMAND;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TypeCode" Id="{9902b8dd-9d89-448a-8c17-b989a9c65a67}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD TypeCode : eCategrories
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TypeCode := eCategrories.SELECTION_VACUUM;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="RunVacuum">
      <LineId Id="742" Count="17" />
      <LineId Id="762" Count="32" />
      <LineId Id="828" Count="2" />
      <LineId Id="55" Count="0" />
    </LineIds>
    <LineIds Name="RunVacuum.ConfigureRead">
      <LineId Id="17" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="RunVacuum.ConfigureWrite">
      <LineId Id="22" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="15" Count="1" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="RunVacuum.Control">
      <LineId Id="5" Count="0" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="RunVacuum.ErrorClear">
      <LineId Id="22" Count="0" />
      <LineId Id="20" Count="0" />
    </LineIds>
    <LineIds Name="RunVacuum.ErrorDetect">
      <LineId Id="26" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="30" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="RunVacuum.Execute">
      <LineId Id="9" Count="9" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="RunVacuum.FB_init">
      <LineId Id="20" Count="1" />
      <LineId Id="14" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="15" Count="2" />
      <LineId Id="30" Count="1" />
      <LineId Id="43" Count="4" />
      <LineId Id="51" Count="0" />
      <LineId Id="53" Count="1" />
      <LineId Id="52" Count="0" />
      <LineId Id="32" Count="0" />
    </LineIds>
    <LineIds Name="RunVacuum.Monitor">
      <LineId Id="58" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="17" Count="3" />
      <LineId Id="16" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="40" Count="0" />
    </LineIds>
    <LineIds Name="RunVacuum.TypeCode">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>