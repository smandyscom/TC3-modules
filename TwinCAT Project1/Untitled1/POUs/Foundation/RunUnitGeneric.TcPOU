<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.10">
  <POU Name="RunUnitGeneric" Id="{a108e392-1419-4492-a6fc-c3186312016b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunUnitGeneric Extends CommonBase
VAR_INPUT
	bEnStep : BOOL;
	bTrigStep : BOOL;
	bPause : BOOL;
	bIsBypassed : BOOL;
	bWorkingOverride : BOOL;
	bMaterialOverride : BOOL;
	
	slaveWorkingSignal : ARRAY[1..32] OF BOOL; // collect slave working signal , possible to access externally?
END_VAR
VAR_OUTPUT
	State : INT := 0;
	NextState : INT := 0;
	AlarmCode : UDINT := 0;
END_VAR
VAR	
	Parent : POINTER TO RunUnitGeneric;
	
	SlotBase : POINTER TO RunMaterial;
	SlotCount : INT ;
	SlotLast : POINTER TO RunMaterial;
	
	bLastParentStatus : BIT; // memorize last parent status	
	bSerialTransition : BIT;
	transitionByte : BYTE;
	
	isTransit : BOOL ;
	workingTimer : LTON;
	
	outputState : INT;
	
	//interrupt forbidden
	interruptForbidden : bool := false;
END_VAR
VAR PERSISTENT
	//station specific settings area (user settings
	slaveLinkageStatus : ARRAY[1..32] OF BOOL; // configuration
	//miscsParameters : ARRAY[1..8] of int;
END_VAR
VAR CONSTANT 
	bit0EnStep : INT := 0;
	bit1TrigStep : INT := 1;
	bit2StatePause : INT :=2;
	bit3IsBypassed : INT :=3;
	bit4WorkingOverride : INT :=4;
	bit5MaterialOverride : INT :=5;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
//Catch parent's pause status
IF Parent^.bPause AND NOT bLastParentStatus THEN
	bPause := TRUE;
END_IF

IF NOT Parent^.bPause AND bPause THEN
	bPause := FALSE;
END_IF

bLastParentStatus := Parent^.bPause;

//Serial transition
IF bSerialTransition AND (State = NextState) THEN
	NextState := State +1 ;
END_IF

//Reset transition word
IF NextState <> State THEN
	transitionByte := 0;
	bSerialTransition := FALSE;
	AlarmCode := 0;
	
	State := NextState; //release and go
END_IF


//transit condition
isTransit := (NOT bEnStep OR (bEnStep AND bTrigStep)) AND NOT bPause;

IF isTransit THEN
	outputState := State; //release and go
ELSE
	outputState := eSpecialStates.FORBIDDEN;
END_IF

//Reset trigger step
bTrigStep := FALSE;

//Timer
workingTimer(IN:=,PT:=,Q=>,ET=>);]]></ST>
    </Implementation>
    <Folder Name="CommonBase" Id="{a3eb2459-fb17-4657-a789-38e4b978c786}" />
    <Method Name="ConfigureRead" Id="{5b0d9a0a-5d92-42f2-80d6-58161cf4acad}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD ConfigureRead : CellDataBlock
VAR_INPUT
	mode : eModes;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="ConfigureWrite" Id="{b15520cc-2020-48bd-8025-beb0523946ca}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD ConfigureWrite : BOOL
VAR_INPUT
	input : CellDataBlock;
	mode : eModes;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Implemented by concre derived class]]></ST>
      </Implementation>
    </Method>
    <Method Name="Control" Id="{fe69a240-a6bf-45a3-bd63-78ff17e8577a}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD Control : BOOL
VAR_INPUT
	input : CellDataBlock;
	mode : eModes; //commit mode
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bEnStep := input.unit.base.controlWord.bit0EnStep;
bTrigStep := input.unit.base.controlWord.bit1TrigStep;
bPause := input.unit.base.controlWord.bit2StatePause;
bIsBypassed := input.unit.base.controlWord.bit3IsBypassed;
bWorkingOverride := input.unit.base.controlWord.bit4WorkingOverride;
bMaterialOverride := input.unit.base.controlWord.bit5MaterialOverride;
Control:=true;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ErrorClear" Id="{c0e62209-d0d5-44f2-8c68-278b3588f780}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD ErrorClear : BOOL
VAR_INPUT
	input : eErrorClearWays;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[AlarmCode := 0; //code reset to 0]]></ST>
      </Implementation>
    </Method>
    <Method Name="ErrorDetect" Id="{f4463e33-7efc-4b67-a80e-02e00ed76350}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD ErrorDetect : UDINT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ErrorDetect := AlarmCode;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{1054404a-900b-4aa2-9841-9d1387599ab2}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	argParent : POINTER TO RunUnitGeneric;
	argSlotBase : POINTER TO RunMaterial;
	argSlotLast : POINTER TO RunMaterial;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//initialize 
Parent := argParent;
SlotBase := argSlotBase;
SlotLast := argSlotLast;
//
IF bInitRetains THEN
	NextState := eSpecialStates.INITIAL_BEGIN;
END_IF


]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{54b8cb88-45e4-469a-a3ac-c4ff2e84617d}">
      <Declaration><![CDATA[METHOD Initialize : BOOL
VAR_INPUT
END_VAR
VAR
	nCounter : int;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//once initializing method call , redirect current state to initalizing region
IF (TO_UINT(State) AND TO_UINT(eSpecialStates.INITIAL_REGION)) =0 THEN
	NextState := eSpecialStates.INITIAL_BEGIN; //not in intializing region , change
END_IF

Initialize := (State = eSpecialStates.INITIAL_END);

IF Initialize THEN
	//clear all remained signal
	FOR nCounter:=1 TO 32 BY 1 DO
		slaveWorkingSignal[nCounter] := FALSE;
	END_FOR
	//clear all internal status
	bEnStep := FALSE;
	bTrigStep := FALSE;
	bIsBypassed := FALSE;
	bWorkingOverride := FALSE;
	bMaterialOverride := FALSE;	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Monitor" Id="{8df8139c-9882-4bf6-9048-c2ce81b63c35}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD Monitor : CellDataBlock
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Monitor.unit.base.controlWord.bit0EnStep := bEnStep;
Monitor.unit.base.controlWord.bit1TrigStep := bTrigStep;
Monitor.unit.base.controlWord.bit2StatePause := bPause;
Monitor.unit.base.controlWord.bit3IsBypassed := bIsBypassed;
Monitor.unit.base.controlWord.bit4WorkingOverride := bWorkingOverride;
Monitor.unit.base.controlWord.bit5MaterialOverride := bMaterialOverride;
//Transition status
Monitor.unit.base.transitionByte := transitionByte;
//
Monitor.unit.base.alarmCode := TO_WORD(AlarmCode);
Monitor.unit.base.state := TO_WORD(State);
Monitor.unit.base.nextState := TO_WORD(NextState);
//
Monitor.unit.base.workingTimerCache := TO_DWORD(workingTimer.ET);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TypeCode" Id="{5f35ce6c-c451-4e46-809f-fa5a3eec0aed}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD TypeCode : eCategrories
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TypeCode := eCategrories.SELECTION_UNIT;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="RunUnitGeneric">
      <LineId Id="232" Count="0" />
      <LineId Id="234" Count="20" />
      <LineId Id="326" Count="0" />
      <LineId Id="328" Count="0" />
      <LineId Id="255" Count="1" />
      <LineId Id="258" Count="1" />
      <LineId Id="329" Count="5" />
      <LineId Id="260" Count="0" />
      <LineId Id="272" Count="2" />
      <LineId Id="278" Count="1" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="RunUnitGeneric.ConfigureRead">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="RunUnitGeneric.ConfigureWrite">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="RunUnitGeneric.Control">
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="5" />
    </LineIds>
    <LineIds Name="RunUnitGeneric.ErrorClear">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="RunUnitGeneric.ErrorDetect">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="RunUnitGeneric.FB_init">
      <LineId Id="43" Count="0" />
      <LineId Id="10" Count="1" />
      <LineId Id="41" Count="0" />
      <LineId Id="53" Count="3" />
      <LineId Id="13" Count="1" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="RunUnitGeneric.Initialize">
      <LineId Id="18" Count="0" />
      <LineId Id="20" Count="2" />
      <LineId Id="14" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="39" Count="2" />
      <LineId Id="37" Count="0" />
      <LineId Id="43" Count="5" />
      <LineId Id="38" Count="0" />
    </LineIds>
    <LineIds Name="RunUnitGeneric.Monitor">
      <LineId Id="9" Count="4" />
      <LineId Id="5" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="21" Count="1" />
      <LineId Id="16" Count="0" />
    </LineIds>
    <LineIds Name="RunUnitGeneric.TypeCode">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>