<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.10">
  <POU Name="RunAxis" Id="{1e355049-017f-4f7f-88a6-a7040666a5c5}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunAxis
VAR_INPUT
	
END_VAR
VAR_OUTPUT
	PositionFeedback : LREAL;
END_VAR
VAR_IN_OUT
	
END_VAR
VAR	
	Axis : AXIS_REF;
	 
	nCounter : int :=0;
	fbMoveAbs : ARRAY[1..3] OF MC_MoveAbsolute; //preset n buffers available
	fbMoveHome : MC_Home;
	fbPower : MC_Power;
	fbReset: MC_Reset;
	
	//Status reading
	fbReadParameter: MC_ReadParameter;
	fbReadActualPosition : MC_ReadActualPosition;
	fbReadStatus : MC_ReadStatus;
	
	//bMonitoring : bool;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
//execute founction blocks
//TODO , possible to configure how many buffer used
FOR nCounter:=1 TO 3 BY 1 DO
fbMoveAbs[nCounter](
	Axis:= Axis, 
	Execute:= , 
	Position:= , 
	Velocity:= , 
	Acceleration:= , 
	Deceleration:= , 
	Jerk:= , 
	BufferMode:= , 
	Options:= , 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );
END_FOR

	
fbMoveHome(
	Axis:= Axis, 
	Execute:= , 
	Position:= , 
	HomingMode:= , 
	BufferMode:= , 
	Options:= , 
	bCalibrationCam:= , 
	Done=> , 
	Busy=> , 
	Active=> , 
	CommandAborted=> , 
	Error=> , 
	ErrorID=> );
	
//default mode
fbPower(
	Axis:= Axis, 
	Enable:= , 
	Enable_Positive:= , 
	Enable_Negative:= , 
	Override:= , 
	BufferMode:= MC_BlendingNext, 
	Options:= , 
	Status=> , 
	Busy=> , 
	Active=> , 
	Error=> , 
	ErrorID=> );
	
fbReset(
	Axis:= Axis, 
	Execute:= , 
	Done=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> );
	
//Status reading and update
fbReadParameter(
	Axis:= Axis, 
	Enable:= TRUE, 
	ParameterNumber:= ActualVelocity, 
	ReadMode:= , 
	Valid=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> , 
	Value=> );
//comm.SPD_FEEDBACK := LREAL_TO_DWORD(fbReadParameter.Value*1000);
fbReadParameter(
	Axis:= Axis, 
	Enable:= TRUE, 
	ParameterNumber:= CommandedPosition, 
	ReadMode:= , 
	Valid=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> , 
	Value=> );
//comm.POS_COMMAND := LREAL_TO_DWORD(fbReadParameter.Value*1000);
fbReadActualPosition(
	Axis:= axis, 
	Enable:= TRUE, 
	Valid=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> , 
	Position=> PositionFeedback);
//comm.POS_FEEDBACK := LREAL_TO_DWORD(PositionFeedback*1000);

fbReadStatus(
	Axis:= axis, 
	Enable:= TRUE, 
	Valid=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> , 
	ErrorStop=> , 
	Disabled=> , 
	Stopping=> , 
	StandStill=> , 
	DiscreteMotion=> , 
	ContinuousMotion=> , 
	SynchronizedMotion=> , 
	Homing=> , 
	ConstantVelocity=> , 
	Accelerating=> , 
	Decelerating=> , 
	Status=> );

//Read status
//comm.MON_CONTROL_WORD.0 := fbPower.Enable; //servo on
//comm.MON_CONTROL_WORD.15 := fbReset.Execute; // alarm clear
//comm.RUN_STATUS.1 := fbReadStatus.StandStill; //run with servo on
//comm.RUN_STATUS.3 := NOT fbReadStatus.Error; //Servo ready
//comm.ALARMS := fbReadStatus.ErrorID; //error code]]></ST>
    </Implementation>
    <Method Name="ExecuteParameter" Id="{248fd65c-916e-4c41-b72b-91932f742cc7}">
      <Declaration><![CDATA[METHOD ExecuteParameter : BOOL
VAR_INPUT
	ptBlock : POINTER TO ParameterSet;
	execute : BOOL; //used to do mutex
	bufferIndex: INT :=1;
END_VAR
VAR
	//MC block routing
	ptMcExecute : POINTER TO BOOL;
	ptMcDone : POINTER TO BOOL;
	ptMcBusy : POINTER TO BOOL;
	ptMcError : POINTER TO BOOL;

END_VAR
VAR_OUTPUT
	done:bool;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//1. Do parameter translating
//2. Do command routing
//3. Control execute flow

//command routing
CASE ptBlock^.command OF
eCommandTypes.POSITION:	
	//Position command
	ptMcExecute:=ADR(fbMoveAbs[bufferIndex].Execute);
	ptMcDone:=ADR(fbMoveAbs[bufferIndex].Done);
	ptMcBusy:=ADR(fbMoveAbs[bufferIndex].Busy);
	ptMcError:=ADR(fbMoveAbs[bufferIndex].Error);
	//set once
	IF NOT fbMoveAbs[bufferIndex].Busy THEN
		//parameter writing
		fbMoveAbs[bufferIndex].Velocity := ptBlock^.parameter.position.Velocity;
		fbMoveAbs[bufferIndex].Acceleration:= ptBlock^.parameter.position.Acceleration;
		fbMoveAbs[bufferIndex].Deceleration:= ptBlock^.parameter.position.Deceleration;
		fbMoveAbs[bufferIndex].Position := ptBlock^.parameter.position.Position;
	END_IF
//torque limit
;
eCommandTypes.ZRET:
	//Home command
	ptMcExecute:=ADR(fbMoveHome.Execute);
	ptMcDone:=ADR(fbMoveHome.Done);
	ptMcBusy:=ADR(fbMoveHome.Busy);
	ptMcError:=ADR(fbMoveHome.Error);

	IF NOT fbMoveHome.Busy THEN
		//parameter writing
		fbMoveHome.Position := ptBlock^.parameter.home.Position;
		fbMoveHome.HomingMode := ptBlock^.parameter.home.Mode;
	END_IF
;
ELSE
	return;
END_CASE

IF NOT execute THEN
	//stop
	ptMcExecute^ := FALSE; //reset MC_Block
	RETURN;
END_IF

//auto stop execute when error , would do raising edge again when error eliminated
ptMcExecute^ := NOT (ptMcError^);

done := ptMcDone^;

ExecuteParameter:=done; //return value]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{5aeba573-47c3-411b-9f3d-8af6b6892223}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="RunAxis">
      <LineId Id="362" Count="0" />
      <LineId Id="388" Count="0" />
      <LineId Id="310" Count="0" />
      <LineId Id="361" Count="0" />
      <LineId Id="346" Count="14" />
      <LineId Id="314" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="295" Count="14" />
      <LineId Id="121" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="122" Count="22" />
      <LineId Id="148" Count="0" />
      <LineId Id="153" Count="9" />
      <LineId Id="416" Count="0" />
      <LineId Id="165" Count="8" />
      <LineId Id="175" Count="0" />
      <LineId Id="415" Count="0" />
      <LineId Id="198" Count="6" />
      <LineId Id="174" Count="0" />
      <LineId Id="414" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="206" Count="17" />
      <LineId Id="225" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="230" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="228" Count="0" />
      <LineId Id="255" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="RunAxis.ExecuteParameter">
      <LineId Id="296" Count="2" />
      <LineId Id="403" Count="0" />
      <LineId Id="307" Count="0" />
      <LineId Id="405" Count="0" />
      <LineId Id="309" Count="5" />
      <LineId Id="375" Count="1" />
      <LineId Id="378" Count="3" />
      <LineId Id="377" Count="0" />
      <LineId Id="367" Count="0" />
      <LineId Id="319" Count="7" />
      <LineId Id="406" Count="0" />
      <LineId Id="401" Count="0" />
      <LineId Id="411" Count="0" />
      <LineId Id="409" Count="1" />
      <LineId Id="408" Count="0" />
      <LineId Id="327" Count="5" />
      <LineId Id="412" Count="0" />
      <LineId Id="333" Count="2" />
      <LineId Id="338" Count="4" />
      <LineId Id="413" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="RunAxis.FB_init">
      <LineId Id="7" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>