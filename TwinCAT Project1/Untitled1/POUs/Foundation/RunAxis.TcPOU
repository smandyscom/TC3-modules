<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.10">
  <POU Name="RunAxis" Id="{1e355049-017f-4f7f-88a6-a7040666a5c5}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunAxis EXTENDS CommonBase
VAR_OUTPUT
	PositionFeedback : LREAL;
	//PositionCommand : LREAL;
END_VAR
VAR	
	Axis : AXIS_REF;
	 
	nCounter : int :=0;
	fbMoveAbs : ARRAY[1..3] OF MC_MoveAbsolute; //preset n buffers available
	fbMoveHome : MC_Home;
	fbPower : MC_Power;
	fbReset: MC_Reset;
	fbSetPosition: MC_SetPosition;
	
	//Status reading
	fbReadActualVelocity: MC_ReadParameter;
	fbReadActualPosition : MC_ReadActualPosition;
	fbReadCommandPosition : MC_ReadParameter;
	fbReadStatus : MC_ReadStatus;
	
	timerFbReset : TON;
	//bMonitoring : bool;
END_VAR
VAR PERSISTENT
	ptpCommands : ARRAY[1..12] OF ParameterSet; //collect command blocks relative to this axis here
END_VAR
VAR CONSTANT
	typeCode : eCategrories := eCategrories.SELECTION_AXIS;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[//fbReadCommandPosition.Enable := FALSE; //reset for next reading
fbReadCommandPosition(
	Axis:= Axis, 
	Enable:= TRUE, 
	ParameterNumber:= CommandedPosition, 
	ReadMode:= READMODE_CYCLIC, 
	Valid=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> , 
	Value=> );


fbSetPosition(
	Axis:= Axis, 
	Execute:= , 
	Position:= , 
	Mode:= , 
	Options:= , 
	Done=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> );

//default mode
fbPower(
	Axis:= Axis, 
	Enable:= , 
	Enable_Positive:= , 
	Enable_Negative:= , 
	Override:= , 
	BufferMode:= , 
	Options:= , 
	Status=> , 
	Busy=> , 
	Active=> , 
	Error=> , 
	ErrorID=> );
	
fbReset(
	Axis:= Axis, 
	Execute:= , 
	Done=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> );

// Reset alarm clear after 100ms
timerFbReset(IN:= fbReset.Execute, PT:= T#100MS, Q=> , ET=> );	
IF timerFbReset.Q THEN
	fbReset.Execute := FALSE;
END_IF
	
//Status reading and update
fbReadActualVelocity(
	Axis:= Axis, 
	Enable:= TRUE, 
	ParameterNumber:= ActualVelocity, 
	ReadMode:= , 
	Valid=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> , 
	Value=> );
//comm.SPD_FEEDBACK := LREAL_TO_DWORD(fbReadParameter.Value*1000);

//comm.POS_COMMAND := LREAL_TO_DWORD(fbReadParameter.Value*1000);
fbReadActualPosition(
	Axis:= axis, 
	Enable:= TRUE, 
	Valid=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> , 
	Position=> PositionFeedback);
//comm.POS_FEEDBACK := LREAL_TO_DWORD(PositionFeedback*1000);

fbReadStatus(
	Axis:= axis, 
	Enable:= TRUE, 
	Valid=> , 
	Busy=> , 
	Error=> , 
	ErrorID=> , 
	ErrorStop=> , 
	Disabled=> , 
	Stopping=> , 
	StandStill=> , 
	DiscreteMotion=> , 
	ContinuousMotion=> , 
	SynchronizedMotion=> , 
	Homing=> , 
	ConstantVelocity=> , 
	Accelerating=> , 
	Decelerating=> , 
	Status=> );

//Read status
//comm.MON_CONTROL_WORD.0 := fbPower.Enable; //servo on
//comm.MON_CONTROL_WORD.15 := fbReset.Execute; // alarm clear
//comm.RUN_STATUS.1 := fbReadStatus.StandStill; //run with servo on
//comm.RUN_STATUS.3 := NOT fbReadStatus.Error; //Servo ready
//comm.ALARMS := fbReadStatus.ErrorID; //error code	
	
IF NOT fbPower.Enable THEN
	RETURN; //do not execute following commands
END_IF
	//execute founction blocks once powered
	//possible to configure how many buffer used
	FOR nCounter:=1 TO 3 BY 1 DO
	fbMoveAbs[nCounter](
		Axis:= Axis, 
		Execute:= , 
		Position:= , 
		Velocity:= , 
		Acceleration:= , 
		Deceleration:= , 
		Jerk:= , 
		BufferMode:= MC_BlendingPrevious, 
		Options:= , 
		Done=> , 
		Busy=> , 
		Active=> , 
		CommandAborted=> , 
		Error=> , 
		ErrorID=> );
	END_FOR
	
		
	fbMoveHome(
		Axis:= Axis, 
		Execute:= , 
		Position:= , 
		HomingMode:= , 
		BufferMode:= , 
		Options:= , 
		bCalibrationCam:= , 
		Done=> , 
		Busy=> , 
		Active=> , 
		CommandAborted=> , 
		Error=> , 
		ErrorID=> );


	

	
]]></ST>
    </Implementation>
    <Folder Name="CommonBase" Id="{7c375d8d-5198-4156-90d1-ff49df703551}" />
    <Method Name="ConfigureRead" Id="{b2d706a8-b020-4343-983c-4c7a56c09ac2}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD ConfigureRead : CellDataBlock
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="ConfigureWrite" Id="{cde8b8df-cc3c-4ac1-a00a-6c29224f2a1d}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD ConfigureWrite : BOOL
VAR_INPUT
	input : CellDataBlock;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//command block write-in]]></ST>
      </Implementation>
    </Method>
    <Method Name="Control" Id="{fb2d590a-2a78-44ed-97fd-631e13336dc9}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD Control : BOOL
VAR_INPUT
	input : CellDataBlock;
	mode : eModes;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//manual control servo on/servo alarm reset

//different route
CASE mode OF
	eModes.MODE_EXE_AXIS:
		IF input.axis.operationOperation.0 THEN
			//bit0ServoOn
			fbPower.Enable := NOT fbPower.Enable;
			fbPower.Enable_Positive := fbPower.Enable;
			fbPower.Enable_Negative := fbPower.Enable;
		ELSIF input.axis.operationOperation.15 THEN
			fbReset.Execute := TRUE;	
		END_IF
		Control := TRUE;
	eModes.MODE_EXE_COMMAND_BLOCK:
		Control := TRUE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="ErrorClear" Id="{3448d412-4c2e-4bc3-a590-f166f4dbcea7}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD ErrorClear : BOOL
VAR_INPUT
	input : eErrorClearWays;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="ErrorDetect" Id="{da618aca-91fe-4791-8fbe-90aff9c7dc94}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD ErrorDetect : INT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecuteParameter" Id="{71f56729-8e13-4b1e-a80c-858adc37a723}">
      <Declaration><![CDATA[METHOD ExecuteParameter : BOOL
VAR_INPUT
	ptBlock : POINTER TO ParameterSet;
	//execute : BOOL; //used to do mutex
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//
ExecuteParameter:=ExecuteParameterBuffer(ptBlock:= ptBlock, bufferIndex:= 1);]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecuteParameterBuffer" Id="{248fd65c-916e-4c41-b72b-91932f742cc7}">
      <Declaration><![CDATA[METHOD ExecuteParameterBuffer : BOOL
VAR_INPUT
	ptBlock : POINTER TO ParameterSet;
	//execute : BOOL; //used to do mutex
	bufferIndex: INT :=1;
END_VAR
VAR
	//MC block routing
	ptMcExecute : POINTER TO BOOL;
	ptMcDone : POINTER TO BOOL;
	ptMcBusy : POINTER TO BOOL;
	ptMcError : POINTER TO BOOL;
	ptMcCommandAbort : POINTER TO BOOL;

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//1. Do parameter translating
//2. Do command routing
//3. Control execute flow

//command routing
CASE ptBlock^.command OF
eCommandTypes.POSITION:	
	//Position command
	ptMcExecute:=ADR(fbMoveAbs[bufferIndex].Execute);
	ptMcDone:=ADR(fbMoveAbs[bufferIndex].Done);
	ptMcBusy:=ADR(fbMoveAbs[bufferIndex].Busy);
	ptMcError:=ADR(fbMoveAbs[bufferIndex].Error);
	ptMcCommandAbort := ADR(fbMoveAbs[bufferIndex].CommandAborted);
	//set once
	IF NOT fbMoveAbs[bufferIndex].Busy AND NOT ptMcExecute^ THEN
		//parameter writing
		fbMoveAbs[bufferIndex].Velocity := ptBlock^.parameter.position.Velocity;
		fbMoveAbs[bufferIndex].Acceleration:= ptBlock^.parameter.position.Acceleration;
		fbMoveAbs[bufferIndex].Deceleration:= ptBlock^.parameter.position.Deceleration;
		
		CASE ptBlock^.parameter.position.PositionType OF
			ePositionType.POSITION_ABS:
				fbMoveAbs[bufferIndex].Position := ptBlock^.parameter.position.Position;
			ePositionType.POSITION_REL:
				fbMoveAbs[bufferIndex].Position := PositionCommand + ptBlock^.parameter.position.Position; 
		END_CASE
		
	END_IF
	
	IF bufferIndex>=2 THEN
		fbMoveAbs[bufferIndex].BufferMode := MC_BlendingPrevious;
	END_IF
//torque limit
;
eCommandTypes.ZRET:
	//Home command
	ptMcExecute:=ADR(fbMoveHome.Execute);
	ptMcDone:=ADR(fbMoveHome.Done);
	ptMcBusy:=ADR(fbMoveHome.Busy);
	ptMcError:=ADR(fbMoveHome.Error);
	ptMcCommandAbort := ADR(fbMoveHome.CommandAborted);
	
	IF NOT fbMoveHome.Busy THEN
		//parameter writing
		fbMoveHome.Position := ptBlock^.parameter.home.Position;
		fbMoveHome.HomingMode := ptBlock^.parameter.home.Mode;
	END_IF
;
eCommandTypes.SET_POSITION:
	ptMcExecute:=ADR(fbSetPosition.Execute);
	ptMcDone:=ADR(fbSetPosition.Done);
	ptMcBusy:=ADR(fbSetPosition.Busy);
	ptMcError:=ADR(fbSetPosition.Error);
	ptMcCommandAbort := ADR(fbSetPosition.Done);// fake
	
	IF NOT fbSetPosition.Busy THEN
		//parameter writing
		fbSetPosition.Position := ptBlock^.parameter.position.Position;
	END_IF
	
ELSE
	return;
END_CASE

//auto stop execute when error , would do raising edge again when error eliminated
ptMcExecute^ := NOT ptMcError^ AND NOT ptMcDone^ AND NOT ptMcCommandAbort^;

//power on if going to execute
IF ptMcExecute^ AND fbPower.Enable=FALSE THEN
	fbPower.Enable := TRUE;
	fbPower.Enable_Positive := TRUE;
	fbPower.Enable_Negative := TRUE;
END_IF

//done := ptMcDone^;
ExecuteParameterBuffer:=ptMcDone^; //return value
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecuteParameterBufferIndex" Id="{e08cab37-7a1e-49ab-bbc7-cc8815b18348}">
      <Declaration><![CDATA[METHOD ExecuteParameterBufferIndex : BOOL
VAR_INPUT
	indexCommand : INT ;
	indexBuffer : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//wrapper function
ExecuteParameterBufferIndex := ExecuteParameterBuffer(ptBlock:= ADR(ptpCommands[indexCommand]), bufferIndex:= indexBuffer);]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecuteParameterIndex" Id="{47d338d7-7440-407f-9fdb-d43303a84fa1}">
      <Declaration><![CDATA[METHOD ExecuteParameterIndex : BOOL
VAR_INPUT
	indexCommand : int;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//wrpper function 
ExecuteParameterIndex:=ExecuteParameter(ptBlock:= adr(ptpCommands[indexCommand]));]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{5aeba573-47c3-411b-9f3d-8af6b6892223}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
VAR
	nCounter : int ;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Monitor" Id="{f14ef5b7-4fb3-4276-899b-459b8636a870}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD Monitor : CellDataBlock
VAR_INPUT
END_VAR
VAR
	comm : CellDataBlock;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Monitor := comm;]]></ST>
      </Implementation>
    </Method>
    <Property Name="PositionCommand" Id="{d90f9427-641f-46be-8de0-14848d24631d}">
      <Declaration><![CDATA[PROPERTY PositionCommand : LREAL]]></Declaration>
      <Get Name="Get" Id="{19f01c9c-5d4f-4654-8572-382eb730f8d5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[fbReadCommandPosition.Enable := TRUE;
//fbReadCommandPosition(
//	Axis:= Axis, 
//	Enable:= , 
//	ParameterNumber:= CommandedPosition, 
//	ReadMode:= READMODE_ONCE, 
//	Valid=> , 
//	Busy=> , 
//	Error=> , 
//	ErrorID=> , 
//	Value=> PositionCommand);
PositionCommand := fbReadCommandPosition.Value;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{dd39da7a-143a-4c85-876d-cc4718cf70aa}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="TypeCode" Id="{d7c803da-ddd0-409e-b8b9-d71f78281c2b}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD TypeCode : eCategrories
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TypeCode := eCategrories.SELECTION_AXIS;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="RunAxis">
      <LineId Id="963" Count="0" />
      <LineId Id="975" Count="8" />
      <LineId Id="973" Count="1" />
      <LineId Id="796" Count="33" />
      <LineId Id="1018" Count="0" />
      <LineId Id="1013" Count="0" />
      <LineId Id="830" Count="0" />
      <LineId Id="1015" Count="2" />
      <LineId Id="1014" Count="0" />
      <LineId Id="831" Count="11" />
      <LineId Id="852" Count="82" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="RunAxis.ConfigureRead">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="RunAxis.ConfigureWrite">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="RunAxis.Control">
      <LineId Id="5" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="11" Count="1" />
      <LineId Id="31" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="36" Count="1" />
      <LineId Id="28" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="RunAxis.ErrorClear">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="RunAxis.ErrorDetect">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="RunAxis.ExecuteParameter">
      <LineId Id="11" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="RunAxis.ExecuteParameterBuffer">
      <LineId Id="296" Count="2" />
      <LineId Id="403" Count="0" />
      <LineId Id="307" Count="0" />
      <LineId Id="405" Count="0" />
      <LineId Id="309" Count="5" />
      <LineId Id="466" Count="0" />
      <LineId Id="375" Count="1" />
      <LineId Id="378" Count="3" />
      <LineId Id="507" Count="2" />
      <LineId Id="513" Count="0" />
      <LineId Id="511" Count="1" />
      <LineId Id="510" Count="0" />
      <LineId Id="377" Count="0" />
      <LineId Id="367" Count="0" />
      <LineId Id="461" Count="3" />
      <LineId Id="319" Count="7" />
      <LineId Id="467" Count="0" />
      <LineId Id="401" Count="0" />
      <LineId Id="468" Count="0" />
      <LineId Id="411" Count="0" />
      <LineId Id="409" Count="1" />
      <LineId Id="408" Count="0" />
      <LineId Id="327" Count="0" />
      <LineId Id="450" Count="0" />
      <LineId Id="452" Count="2" />
      <LineId Id="451" Count="0" />
      <LineId Id="455" Count="0" />
      <LineId Id="469" Count="0" />
      <LineId Id="456" Count="0" />
      <LineId Id="458" Count="0" />
      <LineId Id="460" Count="0" />
      <LineId Id="459" Count="0" />
      <LineId Id="457" Count="0" />
      <LineId Id="328" Count="2" />
      <LineId Id="338" Count="2" />
      <LineId Id="485" Count="3" />
      <LineId Id="490" Count="1" />
      <LineId Id="489" Count="0" />
      <LineId Id="341" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="434" Count="0" />
    </LineIds>
    <LineIds Name="RunAxis.ExecuteParameterBufferIndex">
      <LineId Id="18" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="RunAxis.ExecuteParameterIndex">
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="RunAxis.FB_init">
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="RunAxis.Monitor">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="RunAxis.PositionCommand.Get">
      <LineId Id="16" Count="0" />
      <LineId Id="5" Count="8" />
      <LineId Id="2" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="RunAxis.PositionCommand.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="RunAxis.TypeCode">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>