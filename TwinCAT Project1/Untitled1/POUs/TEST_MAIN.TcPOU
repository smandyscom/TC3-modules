<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.10">
  <POU Name="TEST_MAIN" Id="{c5d24ec2-dcd4-432d-b366-2840b187b342}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM TEST_MAIN
VAR

cbBlock1 : CommandBlockBase;
cbBlock2 : CommandBlockBase;

cbBlock3 : CommandBlockPos;
cbBlock4 : CommandBlockPos;

ptBlock : POINTER TO CommandBlockBase := ADR(cbBlock1);	
ptBlockPos : POINTER TO CommandBlockPos;

aSize : INT;


memoryPool : ARRAY[1..1024] OF WORD;

ptRunIndexerMaster : POINTER TO RunUnitIndexerMaster;
ptRunGeneric : POINTER TO RunUnitGeneric;

ptUnitGeneric : POINTER TO UnitBase;
ptUnitIndexerMaster : POINTER TO UnitIndexerMaster;

bInitialized : BOOL ;
nCounter : INT ;

simuObstacleSensor : BOOL;
simuReachSensor : BOOL;

lifterCelluarA : RunLifterCelluar(argParent:= ADR(lifterCelluarA), 
argSlotBase:= ADR(GVL.MATERIAL_SLOTS[1]), 
argSlotLast:= ADR(GVL.MATERIAL_SLOTS[2]),
argAxis:= ADR(GVL.axisControls[1]),
argCylinder:=ADR(GVL.cylinderControls[1]),
argHit:=ADR(GVL.commandBlocks[16]),
argRelease:=ADR(GVL.commandBlocks[17]),
argWorking:=ADR(GVL.commandBlocks[18]),
argObstacleSensor:= ADR(simuObstacleSensor),
argReachSensor:= ADR(simuReachSensor)
);

masterProxy : RunUnitIndexerMasterCelluarA(argParent:= ADR(masterProxy), 
argSlotBase:= 0, 
argSlotLast:= 0,
argAxis:=0,
argUpstream:=0,
argCommandFast:=0,
argCommandSlow:=0,
argCommandTriggerRaise:=0,
argCommandCheckRaise:=0);

masterCelluarA : RunUnitIndexerMasterCelluarA(argParent:= ADR(masterCelluarA), 
argSlotBase:= ADR(GVL.MATERIAL_SLOTS[1]), 
argSlotLast:= ADR(GVL.MATERIAL_SLOTS[2]),
argAxis:=ADR(GVL.axisControls[2]),
argUpstream:=ADR(masterProxy),
argCommandFast:=ADR(GVL.commandBlocks[32]),
argCommandSlow:=ADR(GVL.commandBlocks[33]),
argCommandTriggerRaise:=ADR(GVL.commandBlocks[40]),
argCommandCheckRaise:=ADR(GVL.commandBlocks[41]));

simuStation : RunUnitGeneric(argParent:= ADR(simuStation), argSlotBase:= ADR(GVL.MATERIAL_SLOTS[1]), argSlotLast:= ADR(GVL.MATERIAL_SLOTS[1]));

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[cbBlock1.AXIS_ID:=5;
ptBlock:=ADR(cbBlock1);

cbBlock2:=ptBlock^; // value assignment?
//change cbBlock1 , watch if cbBlock2 changed

ptBlock := ADR(cbBlock3); //if possible mophism

cbBlock3.COORDINATE:=1234;

ptBlockPos:=ptBlock;
cbBlock4:=ptBlockPos^;//check


//may access violation??
//ptBlockPos:=ADR(cbBlock1);
//ptBlockPos^.COORDINATE:=5555; //may violation

//TEST2();
//TEST_CYLINDER();
//TEST_UNIT_VIRTUAL();
//TEST_UNIT_MASTER();
//TEST_AXIS();
IF NOT bInitialized THEN
	FOR nCounter:=8 TO 64 BY 1 DO
		GVL.commandBlocks[nCounter].command := eCommandTypes.POSITION;
		GVL.commandBlocks[nCounter].parameter.position.Acceleration := 4000;
		GVL.commandBlocks[nCounter].parameter.position.Deceleration := 4000;
		GVL.commandBlocks[nCounter].parameter.position.Velocity := 100;
	END_FOR
	GVL.commandBlocks[8].parameter.position.Position := 300;
	GVL.commandBlocks[8].parameter.position.Velocity := 400;
	
	GVL.commandBlocks[9].parameter.position.Position := 400;
	GVL.commandBlocks[9].parameter.position.Velocity := 100;
	
	GVL.commandBlocks[10].parameter.position.Position := 800;
	GVL.commandBlocks[10].parameter.position.Velocity := 400;
	
	bInitialized := TRUE;
	
	GVL.commandBlocks[16].parameter.position.Position := 100;
	GVL.commandBlocks[17].parameter.position.Position := 0;
	GVL.commandBlocks[18].parameter.position.Position := 200;
	//
	GVL.commandBlocks[32].parameter.position.Position :=350;
	GVL.commandBlocks[32].parameter.position.Velocity :=400;
	
	GVL.commandBlocks[33].parameter.position.Position :=410;
	
	GVL.commandBlocks[40].parameter.position.Position :=300;
	GVL.commandBlocks[41].parameter.position.Position :=340;
END_IF
//TEST_BUFFERING();
//TEST_CYLINDER();

GVL.axisControls[1]();
GVL.axisControls[2]();
GVL.cylinderControls[1]();

simuStation(
	bEnStep:= , 
	bTrigStep:= , 
	bPause:= , 
	bIsBypassed:= , 
	bWorkingOverride:= , 
	bMaterialOverride:= , 
	State=> , 
	NextState=> , 
	AlarmCode=> );
lifterCelluarA(
	bEnStep:= , 
	bTrigStep:= , 
	bPause:= , 
	bIsBypassed:= , 
	bWorkingOverride:= , 
	bMaterialOverride:= , 
	State=> , 
	NextState=> , 
	AlarmCode=> );
masterCelluarA(
	bEnStep:= , 
	bTrigStep:= , 
	bPause:= , 
	bIsBypassed:= , 
	bWorkingOverride:= , 
	bMaterialOverride:= , 
	State=> , 
	NextState=> , 
	AlarmCode=> , 
	syncAcknowledged:= , 
	slaveLinkageStatus:= , 
	slaveWorkingSignal:= , 
	syncEngaged=> , 
	syncMaterialId=> );
lifterCelluarA.IsHit := masterCelluarA.triggerHit;
lifterCelluarA.IsReleased := masterCelluarA.triggerRelease;
masterCelluarA.allHit := lifterCelluarA.IsHit;
masterCelluarA.allReach := lifterCelluarA.IsReach;
masterCelluarA.allRelease := lifterCelluarA.IsReleased;

//fbCylinder(ptBlock:= ADR(cylinderBlock));

//fbRunIndexerMaster(ptBlock:= );


//no need
//ptRunIndexerMaster := ADR(memoryPool[1]); // fine?
//ptRunGeneric := ADR(memoryPool[1+SIZEOF(ptRunIndexerMaster)]);

//ptRunIndexerMaster^();
//ptRunGeneric^();


//possible manipulate memory allocation
ptUnitGeneric := ADR(memoryPool[1]);
ptUnitIndexerMaster := ADR(memoryPool[1+SIZEOF(ptUnitGeneric^)]);

ptUnitGeneric^.alarmCode := 99;  //
]]></ST>
    </Implementation>
    <LineIds Name="TEST_MAIN">
      <LineId Id="2" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="31" Count="1" />
      <LineId Id="22" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="35" Count="1" />
      <LineId Id="50" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="176" Count="0" />
      <LineId Id="274" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="180" Count="7" />
      <LineId Id="214" Count="0" />
      <LineId Id="271" Count="1" />
      <LineId Id="275" Count="0" />
      <LineId Id="215" Count="1" />
      <LineId Id="301" Count="0" />
      <LineId Id="300" Count="0" />
      <LineId Id="297" Count="0" />
      <LineId Id="302" Count="0" />
      <LineId Id="305" Count="0" />
      <LineId Id="299" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="268" Count="1" />
      <LineId Id="326" Count="0" />
      <LineId Id="270" Count="0" />
      <LineId Id="267" Count="0" />
      <LineId Id="246" Count="8" />
      <LineId Id="245" Count="0" />
      <LineId Id="256" Count="8" />
      <LineId Id="255" Count="0" />
      <LineId Id="307" Count="13" />
      <LineId Id="306" Count="0" />
      <LineId Id="328" Count="0" />
      <LineId Id="357" Count="0" />
      <LineId Id="356" Count="0" />
      <LineId Id="358" Count="1" />
      <LineId Id="327" Count="0" />
      <LineId Id="80" Count="1" />
      <LineId Id="84" Count="0" />
      <LineId Id="94" Count="1" />
      <LineId Id="85" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="106" Count="1" />
      <LineId Id="99" Count="0" />
      <LineId Id="102" Count="3" />
      <LineId Id="16" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>