<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.10">
  <POU Name="RunBottomView" Id="{6aac86b2-3f9d-4198-8e80-39356a7bda6d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunBottomView EXTENDS RunAxisInspection
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	connectorHolder : POINTER TO RunCylinder;
	transporter : POINTER TO RunCylinder;
	openClamp : POINTER TO RunCylinder;
END_VAR
VAR PERSISTENT
	indexCommandPick : INT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^();

CASE outputState OF
	eSpecialStates.SLAVE_ENTER_PROCEDURE:
		IF NOT transitionByte.0 AND_THEN sideAligner^.Execute(argCommand:= eCylinderCommands.COMMAND_B) THEN
			transitionByte.0 := TRUE;//align
		END_IF
		IF NOT transitionByte.1 AND_THEN axis1^.ExecuteParameterIndex(indexCommand:= indexCommandPick) THEN
			transitionByte.1 := TRUE;//down
		END_IF
		IF transitionByte=3 THEN
			bSerialTransition := TRUE;
		END_IF
	16#201:
		bSerialTransition:=connectorHolder^.Execute(argCommand:= eCylinderCommands.COMMAND_B); //hold
	16#202:
		bSerialTransition:=openClamp^.Execute(argCommand:= eCylinderCommands.COMMAND_B); //release
	16#203:
		bSerialTransition:=axis1^.ExecuteParameterIndex(indexCommand:= indexPosition1Axis1); //up
	16#204:
		//go to inspection 1 simulatanously
		IF NOT transitionByte.0 AND_THEN transporter^.Execute(argCommand:= eCylinderCommands.COMMAND_B) THEN
			transitionByte.0 := TRUE;
		END_IF
		IF NOT transitionByte.1 AND_THEN axis2^.ExecuteParameterIndex(indexCommand:= indexPosition1Axis2) THEN
			transitionByte.1 := TRUE;
		END_IF
		IF transitionByte=3 THEN
			NextState := eSpecialStates.SLAVE_AXIS_INSPECTION_ENTER;
		END_IF
	//----------------------Return
	eSpecialStates.SLAVE_AXIS_INSPECTION_EXIT:
		//go to inspection 1 simulatanously
		IF NOT transitionByte.0 AND_THEN transporter^.Execute(argCommand:= eCylinderCommands.COMMAND_A) THEN
			transitionByte.0 := TRUE;
		END_IF
		IF NOT transitionByte.1 AND_THEN axis2^.ExecuteParameterIndex(indexCommand:= indexStandByAxis2) THEN
			transitionByte.1 := TRUE;
		END_IF
		IF transitionByte=3 THEN
			NextState := 16#500;
		END_IF
	16#500:
		bSerialTransition:=axis1^.ExecuteParameterIndex(indexCommand:= indexCommandPick);//down
	16#501:
		bSerialTransition:=connectorHolder^.Execute(argCommand:= eCylinderCommands.COMMAND_A); //release
	16#502:
		bSerialTransition:=openClamp^.Execute(argCommand:= eCylinderCommands.COMMAND_A); //hold
	16#503:
		IF NOT transitionByte.0 AND_THEN sideAligner^.Execute(argCommand:= eCylinderCommands.COMMAND_A) THEN
			transitionByte.0 := TRUE;//align
		END_IF
		IF NOT transitionByte.1 AND_THEN axis1^.ExecuteParameterIndex(indexCommand:= indexStandByAxis1) THEN
			transitionByte.1 := TRUE;//down
		END_IF
		IF transitionByte=3 THEN
			NextState := eSpecialStates.SLAVE_WORK_DONE;
		END_IF
END_CASE]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{f3ddd70f-5852-4df4-8093-468c170c1969}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	argParent : POINTER TO RunUnitGeneric;
	argSlotBase : POINTER TO MaterialBlock;
	argSlotLast : POINTER TO MaterialBlock;
	
	argWorkingSignal : POINTER TO BOOL;
	
	argAxis1 : POINTER TO RunAxis;
	argAxis2 : POINTER TO RunAxis;
	
	argSideAligner : POINTER TO RunCylinder;
	
	argConnectorHolder : POINTER TO RunCylinder;
	argTransporter : POINTER TO RunCylinder;
	argOpenClamp : POINTER TO RunCylinder;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//initialize 
Parent := argParent;
SlotBase := argSlotBase;
SlotLast := argSlotLast;
//
IF bInitRetains THEN
	NextState := eSpecialStates.INITIAL_BEGIN;
END_IF

workingSignal := argWorkingSignal; //link

axis1 := argAxis1;
axis2 := argAxis2;
sideAligner := argSideAligner;

connectorHolder := argConnectorHolder;
transporter := argTransporter;
openClamp := argOpenClamp;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{8c45a6ba-2eca-458d-acd5-463b59d73ef3}">
      <Declaration><![CDATA[METHOD Initialize : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE outputState OF
	eSpecialStates.INITIAL_BEGIN:
		// release all cylinder
		IF NOT transitionByte.0 AND_THEN connectorHolder^.Execute(argCommand:= eCylinderCommands.COMMAND_A) THEN
			transitionByte.0 := TRUE;
		END_IF
		IF NOT transitionByte.1 AND_THEN cableHolder^.Execute(argCommand:= eCylinderCommands.COMMAND_A) THEN
			transitionByte.1 := TRUE;
		END_IF
		IF NOT transitionByte.2 AND_THEN openClamp^.Execute(argCommand:= eCylinderCommands.COMMAND_A) THEN
			transitionByte.2 := TRUE;
		END_IF
		IF transitionByte=7 THEN
			NextState := eSpecialStates.INITIAL_STATE_7; // to return axis
		END_IF	
END_CASE

Initialize := SUPER^.Initialize();]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="RunBottomView">
      <LineId Id="9" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="64" Count="8" />
      <LineId Id="31" Count="6" />
      <LineId Id="44" Count="0" />
      <LineId Id="38" Count="5" />
      <LineId Id="45" Count="2" />
      <LineId Id="28" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="49" Count="8" />
      <LineId Id="48" Count="0" />
      <LineId Id="58" Count="5" />
      <LineId Id="73" Count="0" />
      <LineId Id="75" Count="7" />
      <LineId Id="74" Count="0" />
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="RunBottomView.FB_init">
      <LineId Id="19" Count="12" />
      <LineId Id="18" Count="0" />
      <LineId Id="37" Count="2" />
      <LineId Id="36" Count="0" />
    </LineIds>
    <LineIds Name="RunBottomView.Initialize">
      <LineId Id="9" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="14" Count="11" />
      <LineId Id="12" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>