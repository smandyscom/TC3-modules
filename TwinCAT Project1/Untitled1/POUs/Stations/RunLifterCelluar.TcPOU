<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.10">
  <POU Name="RunLifterCelluar" Id="{8e8fc5f3-47f1-4079-a3ab-596940aadfbf}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunLifterCelluar EXTENDS RunUnitGeneric
VAR_INPUT
	//sensor
	ptObstacleSensorStatus : POINTER TO BOOL; //fibers
	ptReachSensorStatus : POINTER TO BOOL; //approximities
END_VAR
VAR_OUTPUT
END_VAR
VAR	
	mHit : BOOL ;
	mRelease : BOOL;	

	//actuator
	//axis
	AxisVertical : POINTER TO RunAxis;
	AxisHorizon : POINTER TO RunAxis;
	//cylinder
	Cylinder : POINTER TO RunCylinder;
	
	//carrier mover(vertical
	ptCommandLifterHit : POINTER TO ParameterSet; // raise to hit
	ptCommandLifterRelease : POINTER TO ParameterSet; //release
	ptCommandLifterWorking : POINTER TO ParameterSet; //lift carrier to working position
	//carrier mover(horizon
	ptCommandHorizonHit : POINTER TO ParameterSet;
	ptCommandHorizonWorking : POINTER TO ParameterSet;
	
	
	working : BOOL; //dispatch work to working station
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^();

CASE State OF
	//-------------------------Hit
	0:
	//initiale state : 
	// 1. axis in release position
	// 2. cylinder  in A
	// 3. all sensor off
	bSerialTransition := mHit AND NOT ptObstacleSensorStatus^ ;//if execute flag on
	1:
	bSerialTransition := AxisVertical^.ExecuteParameter(ptBlock:=ptCommandLifterHit);
	IF bSerialTransition THEN
		mHit := FALSE; //reset
	END_IF
	2:
	//once reach sensor detected , n
	bSerialTransition := ptReachSensorStatus^;
	3:
	//hold
	bSerialTransition := Cylinder^.Execute(eCylinderCommands.COMMAND_B);
	4:
	//to working position
	IF AxisVertical^.ExecuteParameter(ptCommandLifterWorking)THEN
		//dispatching work to station
		working := TRUE;
		NextState := 16#10;
	END_IF
	
	//---------------------------releasing
	16#20:
	bSerialTransition := mRelease;
	IF bSerialTransition THEN
		mRelease := FALSE;
	END_IF
	16#21:
	bSerialTransition := AxisVertical^.ExecuteParameter(ptCommandLifterHit);//if release flag on
	16#22:
	//release holder
	bSerialTransition := Cylinder^.Execute(eCylinderCommands.COMMAND_A);
	16#23:
	bSerialTransition :=  AxisVertical^.ExecuteParameter(ptCommandLifterRelease);
	16#24:
	IF NOT ptReachSensorStatus^ THEN
		//make sure all state reseted
		NextState := 0;
	END_IF
	
	//----------------------------- working
	16#10:
	IF NOT working THEN
		NextState := 16#20;
	END_IF
END_CASE]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{a4e43bb3-b045-4468-b1e1-3d38f2c0d86a}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)

	argParent : POINTER TO RunUnitGeneric;
	argSlotBase : POINTER TO MaterialBlock;
	argSlotLast : POINTER TO MaterialBlock;
	
	argAxisVertical : POINTER TO RunAxis;
	argAxisHorizon : POINTER TO RunAxis;
	argCylinder : POINTER TO RunCylinder;
	
	argObstacleSensor : POINTER TO RunSignal;
	argReachSensor : POINTER TO RunSignal;
	
END_VAR
VAR CONSTANT
	indexRelease : INT := 3;
	indexHit : INT := 1;
	indexWorking : INT := 2;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//initialize 
Parent := argParent;
SlotBase := argSlotBase;
SlotLast := argSlotLast;

//initializing , link related commandblock/sensor/cylinder


//actuator
	//axis
AxisVertical := argAxisVertical;
AxisHorizon := argAxisHorizon;
//cylinder
Cylinder := argCylinder;
	
//lifter
ptCommandLifterHit := ADR(AxisVertical^.ptpCommands[indexHit]); // raise to hit
ptCommandLifterRelease :=  ADR(AxisVertical^.ptpCommands[indexRelease]);; //release
ptCommandLifterWorking :=  ADR(AxisVertical^.ptpCommands[indexWorking]);; //lift carrier to working position
//horizon
ptCommandHorizonWorking := ADR(AxisHorizon^.ptpCommands[indexRelease]);
ptCommandHorizonHit :=ADR(AxisHorizon^.ptpCommands[indexHit]);
//sensor
ptObstacleSensorStatus := ADR(argObstacleSensor^.debouncedOn); //fibers
ptReachSensorStatus :=ADR(argReachSensor^.debouncedOn); //approximities]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{21db5a00-f7a1-4530-94de-d799f1b897b9}">
      <Declaration><![CDATA[METHOD Initialize : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE State OF
	eSpecialStates.INITIAL_BEGIN:
		bSerialTransition:=Cylinder^.Execute(eCylinderCommands.COMMAND_A);//MC on would be taken by method call
	eSpecialStates.INITIAL_STATE_1:
		bSerialTransition :=  AxisVertical^.ExecuteParameter(ptCommandLifterRelease);
	eSpecialStates.INITIAL_STATE_2:
		IF AxisHorizon^.ExecuteParameter(ptCommandHorizonHit) THEN
			NextState := eSpecialStates.INITIAL_END;
		END_IF
END_CASE

Initialize := SUPER^.Initialize(); //call base method]]></ST>
      </Implementation>
    </Method>
    <Property Name="IsHit" Id="{e0692fcd-15a1-46c6-afa7-94c322fff347}">
      <Declaration><![CDATA[PROPERTY IsHit : BOOL]]></Declaration>
      <Get Name="Get" Id="{fdd265c2-710a-432f-ad01-ec9705bca363}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsHit:=(State>=2);]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{7a560d78-67b8-481d-a3ed-fa95474172fc}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[mHit:=IsHit;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="IsReach" Id="{d41045a5-c35c-430e-a3de-7371ac4ffbaa}">
      <Declaration><![CDATA[PROPERTY IsReach : BOOL]]></Declaration>
      <Get Name="Get" Id="{a51fad5f-357d-457f-b551-b86b1d002f46}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsReach:=(State >=3);]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{a5a7024c-9984-4ef2-90d1-b3fb44e39c62}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="IsReleased" Id="{8a5fb771-9a59-4615-855d-21d9081d9a0c}">
      <Declaration><![CDATA[PROPERTY IsReleased : BOOL]]></Declaration>
      <Get Name="Get" Id="{0af4cc5b-449f-42dc-9493-6795ae7b5ee5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsReleased:=(State=0);]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{7b43cc5c-feb6-4805-827d-1371ddb8fb9e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[mRelease := isReleased;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="RunLifterCelluar">
      <LineId Id="236" Count="52" />
      <LineId Id="42" Count="0" />
    </LineIds>
    <LineIds Name="RunLifterCelluar.FB_init">
      <LineId Id="92" Count="10" />
      <LineId Id="115" Count="0" />
      <LineId Id="103" Count="6" />
      <LineId Id="122" Count="2" />
      <LineId Id="110" Count="2" />
    </LineIds>
    <LineIds Name="RunLifterCelluar.Initialize">
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="14" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="30" Count="2" />
      <LineId Id="8" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="RunLifterCelluar.IsHit.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="RunLifterCelluar.IsHit.Set">
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="RunLifterCelluar.IsReach.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="RunLifterCelluar.IsReach.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="RunLifterCelluar.IsReleased.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="RunLifterCelluar.IsReleased.Set">
      <LineId Id="7" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>