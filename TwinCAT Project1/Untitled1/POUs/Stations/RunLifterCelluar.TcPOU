<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.10">
  <POU Name="RunLifterCelluar" Id="{8e8fc5f3-47f1-4079-a3ab-596940aadfbf}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunLifterCelluar EXTENDS RunUnitGeneric
VAR_INPUT
	mHit : BOOL ;
	mRelease : BOOL;
END_VAR
VAR_OUTPUT
END_VAR
VAR	
	//actuator
	//axis
	Axis : POINTER TO RunAxis;
	//cylinder
	Cylinder : POINTER TO RunCylinder;
	
	//lifter
	ptCommandLifterHit : POINTER TO ParameterSet; // raise to hit
	ptCommandLifterRelease : POINTER TO ParameterSet; //release
	ptCommandLifterWorking : POINTER TO ParameterSet; //lift carrier to working position
	//sensor
	ptObstacleSensorStatus : POINTER TO BOOL; //fibers
	ptReachSensorStatus : POINTER TO BOOL; //approximities
	//slot status
	ptPreivousSlotValid : POINTER TO BOOL;
	
	working : BOOL; //dispatch work to working station
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^();

CASE State OF
	//-------------------------Hit
	0:
	bSerialTransition := mHit AND NOT ptObstacleSensorStatus^;//if execute flag on
	1:
	bSerialTransition := Axis^.ExecuteParameter(ptBlock:=ptCommandLifterHit);
	IF bSerialTransition THEN
		mHit := FALSE; //reset
	END_IF
	2:
	//once reach sensor detected , n
	bSerialTransition := ptReachSensorStatus^;
	3:
	//hold
	bSerialTransition := Cylinder^.Execute(eCylinderCommands.COMMAND_B);
	4:
	//to working position
	IF Axis^.ExecuteParameter(ptCommandLifterWorking)THEN
		//dispatching work to station
		working := TRUE;
		NextState := 16#10;
	END_IF
	
	//---------------------------releasing
	16#20:
	bSerialTransition := mRelease;
	IF bSerialTransition THEN
		mRelease := FALSE;
	END_IF
	16#21:
	bSerialTransition := Axis^.ExecuteParameter(ptCommandLifterHit);//if release flag on
	16#22:
	//release holder
	bSerialTransition := Cylinder^.Execute(eCylinderCommands.COMMAND_A);
	16#23:
	IF Axis^.ExecuteParameter(ptCommandLifterRelease) THEN
		NextState := 0;
	END_IF
	
	//----------------------------- working
	16#10:
	IF NOT working THEN
		NextState := 16#20;
	END_IF
END_CASE]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{a4e43bb3-b045-4468-b1e1-3d38f2c0d86a}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)

	argParent : POINTER TO RunUnitGeneric;
	argSlotBase : POINTER TO MaterialBlock;
	argSlotLast : POINTER TO MaterialBlock;
	
	argAxis : POINTER TO RunAxis;
	argCylinder : POINTER TO RunCylinder;
	
	argHit : POINTER TO ParameterSet;
	argRelease : POINTER TO ParameterSet;
	argWorking : POINTER TO ParameterSet;
	
	argObstacleSensor : POINTER TO BOOL;
	argReachSensor : POINTER TO BOOL;
	
	//argSlotValid : POINTER TO BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//initialize 
Parent := argParent;
SlotBase := argSlotBase;
SlotLast := argSlotLast;

//initializing , link related commandblock/sensor/cylinder


//actuator
	//axis
Axis := argAxis;
//cylinder
Cylinder := argCylinder;
	
//lifter
ptCommandLifterHit := argHit; // raise to hit
ptCommandLifterRelease := argRelease; //release
ptCommandLifterWorking := argWorking; //lift carrier to working position
//sensor
ptObstacleSensorStatus := argObstacleSensor; //fibers
ptReachSensorStatus :=argReachSensor; //approximities
//slot status
//ptPreivousSlotValid :=argSlotValid;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{21db5a00-f7a1-4530-94de-d799f1b897b9}">
      <Declaration><![CDATA[METHOD Initialize : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE State OF
	0:
	bSerialTransition:=Cylinder^.Execute(eCylinderCommands.COMMAND_A);
	1:
	IF Axis^.ExecuteParameter(ptCommandLifterRelease) THEN
		NextState := 16#FF;	
	END_IF
END_CASE

Initialize := SUPER^.Initialize(); //call base method]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="RunLifterCelluar">
      <LineId Id="196" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="190" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="182" Count="1" />
      <LineId Id="186" Count="2" />
      <LineId Id="97" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="104" Count="1" />
      <LineId Id="108" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="193" Count="2" />
      <LineId Id="191" Count="1" />
      <LineId Id="116" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="131" Count="3" />
      <LineId Id="167" Count="3" />
      <LineId Id="173" Count="1" />
      <LineId Id="42" Count="0" />
    </LineIds>
    <LineIds Name="RunLifterCelluar.FB_init">
      <LineId Id="49" Count="2" />
      <LineId Id="47" Count="1" />
      <LineId Id="7" Count="0" />
      <LineId Id="17" Count="15" />
      <LineId Id="16" Count="0" />
    </LineIds>
    <LineIds Name="RunLifterCelluar.Initialize">
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>