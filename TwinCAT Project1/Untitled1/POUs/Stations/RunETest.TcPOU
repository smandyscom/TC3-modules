<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="RunETest" Id="{72e72744-8d8b-4127-a1f7-17ac70d49060}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunETest EXTENDS RunAxisInspection
VAR
	
	//Cylinders
	connectorHolder : POINTER TO RunCylinder;
	cableHolder : POINTER TO RunCylinder;
	plugin : POINTER TO RunCylinder;
	//Sensors
	tongueExistedA : POINTER TO RunSignal;
	tongueExistedB : POINTER TO RunSignal;
	tongueGlueA : POINTER TO RunSignal;
	tongueGlueB : POINTER TO RunSignal;
	//from tester
	ioBundle : POINTER TO ioBundleET;
	//
	isOK : BOOL;
	isRedo : BOOL;
	etSeriesNgCounter : UINT;
	etRedoCounter : UINT;
	//
	block : MaterialBlock;
END_VAR
VAR PERSISTENT
	indexCommandPick : INT := 1;
	indexReleaseConnectorHolder : INT := 1;
	
	etUsageCounter : UINT;
	etUsageThreshold : UINT;
	
	etNgAlarmSwitch : BOOL;
	etSeriesNgThreshold : UINT;
	etRedoGoal : UINT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^();

IF etUsageCounter>=etUsageThreshold THEN
	//!Clear by manual operation
	AlarmCode := eErrorCodes.AC_ET_USAGE_MEET; 
END_IF

CASE outputState OF
	eSpecialStates.SLAVE_ENTER_PROCEDURE:
		IF bMaterialOverride THEN
			bSerialTransition := TRUE;
		ELSE
			NextState := eSpecialStates.SLAVE_WORK_DONE;
		END_IF
	16#201:
		bSerialTransition := connectorHolder^.Execute(eCylinderCommands.COMMAND_B);
	16#202:
		bSerialTransition := plugin^.Execute(eCylinderCommands.COMMAND_B);
		IF bSerialTransition THEN
			//usage count-up
			etUsageCounter := etUsageCounter+1;
		END_IF
	16#203:
		bSerialTransition := axis1^.ExecuteParameterIndex(indexCommandPick); //down to pick
	16#204:
		bSerialTransition := cableHolder^.Execute(eCylinderCommands.COMMAND_B) ;//hold 
	16#205:
		IF TRUE THEN
			//going to swing
			NextState := eSpecialStates.SLAVE_AXIS_INSPECTION_ENTER;
		END_IF
	//-----------------
	eSpecialStates.SLAVE_AXIS_INSPECTION_EXIT:
		//TODO , read status and report
		isOK := tongueExistedA^.debouncedOn AND tongueExistedB^.debouncedOn AND  tongueGlueA^.debouncedOff AND tongueGlueB^.debouncedOff AND ioBundle^.o3;
		
		isRedo := FALSE;//reset
		IF isOK THEN
			//ok
			etSeriesNgCounter := 0;
		ELSE
			//ng
			etSeriesNgCounter := etSeriesNgCounter+1;
			IF 	(etSeriesNgCounter >= etSeriesNgThreshold) AND etNgAlarmSwitch AND (etRedoCounter >=etRedoGoal) THEN
				//raise alarm
				AlarmCode := eErrorCodes.AC_ET_SERIES_NG;
				etSeriesNgCounter := 0;
			ELSIF etRedoCounter < etRedoGoal THEN
				//not reach , redo
				isRedo := TRUE;
			END_IF
		END_IF		
		//report
		block.data[0] := TO_WORD(ioBundle^.o3); //et
		block.data[1] := TO_WORD(tongueExistedA^.debouncedOn);
		block.data[2] := TO_WORD(tongueExistedB^.debouncedOn);
		block.data[3] := TO_WORD(tongueGlueA^.debouncedOff);
		block.data[4] := TO_WORD(tongueGlueB^.debouncedOff);
		SlotBase^.Data := block;
		SlotBase^.Act := TRUE;
		
		bSerialTransition := TRUE;
	16#401:
		bSerialTransition := axis1^.ExecuteParameterIndex(indexCommandPick); //back to to pick
	16#402:
		bSerialTransition := cableHolder^.Execute(eCylinderCommands.COMMAND_A);
	16#403:
		bSerialTransition := plugin^.Execute(eCylinderCommands.COMMAND_A);
	16#404:
		bSerialTransition := connectorHolder^.Execute(eCylinderCommands.COMMAND_A);
	16#405:
		//all axis backto standby
		IF NOT transitionByte.0 AND_THEN axis1^.ExecuteParameterIndex(indexStandByAxis1) THEN
			transitionByte.0 := TRUE;
		END_IF
		IF NOT transitionByte.1 AND_THEN axis2^.ExecuteParameterIndex(indexStandByAxis2) THEN
			transitionByte.1 := TRUE;
		END_IF
		IF transitionByte=3 THEN
			IF isRedo THEN
				etRedoCounter := etRedoCounter+1;
				NextState := eSpecialStates.SLAVE_ENTER_PROCEDURE;
			ELSE
				etRedoCounter :=0; //reset
				NextState := eSpecialStates.SLAVE_WORK_DONE;
			END_IF
		END_IF
END_CASE
//release to swing // release connector holder when horizon moving
IF (slaveWorkingSignal[1] AND ((nCounter=indexReleaseConnectorHolder AND_THEN connectorHolder^.Execute(eCylinderCommands.COMMAND_A)) OR nCounter<>indexReleaseConnectorHolder)) THEN
	slaveWorkingSignal[1] := FALSE;
END_IF]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{efefce5e-b774-42d4-a90d-6714e5f02940}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	argParent : POINTER TO RunUnitGeneric;
	argSlotBase : POINTER TO RunMaterial;
	argSlotLast : POINTER TO RunMaterial;
	
	argWorkingSignal : POINTER TO BOOL;
	
	argAxis1 : POINTER TO RunAxis;
	argAxis2 : POINTER TO RunAxis;
	
	argSideAligner : pointer to RunCylinder;
	
	argConnectorHolder : POINTER TO RunCylinder;
	argCableHolder : POINTER TO RunCylinder;
	argPlugin : POINTER TO RunCylinder;
	//Sensors
	argTongueExistedA : POINTER TO RunSignal;
	argTongueExistedB : POINTER TO RunSignal;
	argTongueGlueA : POINTER TO RunSignal;
	argTongueGlueB : POINTER TO RunSignal;
	
	argIoBundle : pointer to ioBundleET;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//initialize 
Parent := argParent;
SlotBase := argSlotBase;
SlotLast := argSlotLast;
//
IF bInitRetains THEN
	NextState := eSpecialStates.INITIAL_BEGIN;
END_IF

workingSignal := argWorkingSignal; //link

axis1 := argAxis1;
axis2 := argAxis2;

//
connectorHolder := argConnectorHolder;
cableHolder :=argCableHolder;
plugin :=argPlugin;
	//Sensors
tongueExistedA :=argTongueExistedA;
tongueExistedB :=argTongueExistedB;
tongueGlueA :=argTongueGlueA;
tongueGlueB :=argTongueGlueB;
ioBundle := argIoBundle;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{b1cb528c-756c-4543-b261-8a9a85e25c02}">
      <Declaration><![CDATA[METHOD Initialize : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE outputState OF
	eSpecialStates.INITIAL_BEGIN:
		// release all cylinder
		IF NOT transitionByte.0 AND_THEN plugin^.Execute(argCommand:= eCylinderCommands.COMMAND_A) THEN
			transitionByte.0 := TRUE;
		END_IF
		IF NOT transitionByte.1 AND_THEN connectorHolder^.Execute(argCommand:= eCylinderCommands.COMMAND_A) THEN
			transitionByte.1 := TRUE;
		END_IF
		IF NOT transitionByte.2 AND_THEN cableHolder^.Execute(argCommand:= eCylinderCommands.COMMAND_A) THEN
			transitionByte.2 := TRUE;
		END_IF
		IF transitionByte=7 THEN
			NextState := eSpecialStates.INITIAL_STATE_7; // to return axis
		END_IF
END_CASE


Initialize:= SUPER^.Initialize(); //do axis return]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="RunETest">
      <LineId Id="9" Count="0" />
      <LineId Id="136" Count="1" />
      <LineId Id="143" Count="0" />
      <LineId Id="138" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="232" Count="3" />
      <LineId Id="231" Count="0" />
      <LineId Id="236" Count="0" />
      <LineId Id="32" Count="2" />
      <LineId Id="140" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="141" Count="1" />
      <LineId Id="35" Count="1" />
      <LineId Id="39" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="85" Count="1" />
      <LineId Id="89" Count="0" />
      <LineId Id="87" Count="1" />
      <LineId Id="42" Count="0" />
      <LineId Id="46" Count="1" />
      <LineId Id="148" Count="0" />
      <LineId Id="186" Count="1" />
      <LineId Id="153" Count="0" />
      <LineId Id="176" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="159" Count="0" />
      <LineId Id="165" Count="1" />
      <LineId Id="169" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="170" Count="1" />
      <LineId Id="174" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="149" Count="0" />
      <LineId Id="192" Count="5" />
      <LineId Id="150" Count="0" />
      <LineId Id="198" Count="0" />
      <LineId Id="48" Count="13" />
      <LineId Id="63" Count="1" />
      <LineId Id="62" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="182" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="109" Count="1" />
    </LineIds>
    <LineIds Name="RunETest.FB_init">
      <LineId Id="19" Count="11" />
      <LineId Id="16" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="62" Count="6" />
      <LineId Id="61" Count="0" />
      <LineId Id="31" Count="0" />
    </LineIds>
    <LineIds Name="RunETest.Initialize">
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="15" Count="2" />
      <LineId Id="20" Count="1" />
      <LineId Id="19" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="22" Count="0" />
      <LineId Id="25" Count="2" />
      <LineId Id="14" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>