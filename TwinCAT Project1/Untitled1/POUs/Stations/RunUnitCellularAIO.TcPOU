<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.10">
  <POU Name="RunUnitCellularAIO" Id="{b0aa6adc-8e97-4df4-866b-f03dd216654d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunUnitCellularAIO EXTENDS RunUnitIndexerMaster
VAR_INPUT
	allHit : BOOL;
	allReach : BOOL;
	allRelease : BOOL;
END_VAR
VAR_OUTPUT
	triggerHit : BOOL;
	triggerRelease : BOOL;
END_VAR
VAR
	ioConveyor : POINTER TO ioBundleConveyor;
	runTimer : TON;
END_VAR
VAR PERSISTENT
	//Checkpoints
	commandTriggerRaise: TIME; //trigger point
	commandReceivingTime : TIME; //if not all lifter done until then , slowdown conveyor motion
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[//implement state 3
isLastSlotOccupied := TRUE; //always pass carreir even empty material

SUPER^(); //run indexer master

IF bSerialTransition AND State = 1 THEN
	NextState := 16#10; //state override : release lifters
END_IF
IF bSerialTransition AND state=2 THEN
	//moving
	//timer setup and run
	runTimer.IN := TRUE;
	runTimer.PT := commandTriggerRaise;
	ioConveyor^.run := TRUE;

	NextState := 16#11; //re-direct
END_IF

CASE outputState OF
	//-------------------------release lifters
	16#10:
	IF allRelease THEN
		//reset
		triggerRelease:=FALSE;				
		NextState := 2; //wait syncAckowledged 
	END_IF
	//------------------start running
	16#11:
	IF runTimer.Q THEN	
		triggerHit := TRUE;//until trigger raise reached , trigger all lifter to move
		bSerialTransition:= TRUE; //serial transition
		
		runTimer.IN := FALSE;
	ELSE
		//on-going , not trigger lifter
	END_IF
	16#12:
	IF allHit THEN
		triggerHit:=FALSE;
		syncEngaged := FALSE ;// sending over
		bSerialTransition:= TRUE; //serial transition
	ELSIF timeoutTimer.Q THEN
		//sending error , raising alarm
		AlarmCode := eErrorCodes.AC_CONVEYOR_JAMMED;
	END_IF
	16#13:
	IF allReach THEN	
		bSerialTransition := TRUE; //since working signal raised by individual lifter?
	ELSIF timeoutTimer.Q THEN	
		//receiving error , should stop conveyor	
		AlarmCode := eErrorCodes.AC_CONVEYOR_NOT_REACHED;
	END_IF
	16#14:
	IF Upstream<>0 AND_THEN Upstream^.syncEngaged THEN
		//receive data
		SlotBase^.Valid := Upstream^.syncMatValid;
		SlotBase^.Id := Upstream^.syncMatId;
		//After all reached , then pull upstream
		Upstream^.syncAcknowledged := TRUE;//pull upstream when ready
		bSerialTransition:= TRUE; //serial transition	
	ELSIF timeoutTimer.Q THEN 
		//waiting upstream , reminder
	END_IF
	16#15:
	//wait until upstream action done
	bSerialTransition := Upstream<>0 AND_THEN NOT Upstream^.syncEngaged;
	IF bSerialTransition THEN
		//start count-down
		runTimer.PT := commandReceivingTime;
		runTimer.IN := TRUE;
	ELSIF NOT bSerialTransition AND timeoutTimer.Q THEN
		//reminder	
	END_IF
	16#16:
	// on extension , only one oppertunity
	IF runTimer.Q THEN
		runTimer.IN := FALSE;
		ioConveyor^.run := FALSE; //conveyor stopped
		
		triggerRelease:=TRUE;
		Upstream^.syncAcknowledged := FALSE; //inform done
		
		NextState := 0;//done
	ELSE
		//wait motion done	
	END_IF	
	//------------------------end of running
END_CASE
//run timer
runTimer(IN:= , PT:= , Q=> , ET=> );]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{94431706-316d-43bf-8737-4bc97fe6d821}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	argParent : POINTER TO RunUnitGeneric;
	argSlotBase : POINTER TO RunMaterial;
	argSlotLast : POINTER TO RunMaterial;
	
	argUpstream : POINTER TO RunUnitTransporterBase;
	argAxis : POINTER TO RunAxis;

	argIo : pointer to ioBundleConveyor;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//initialize 
Parent := argParent;
SlotBase := argSlotBase;
SlotLast := argSlotLast;

Axis := 0; //no servo axis
Upstream := argUpstream;

ioConveyor := argIo;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{a1a56396-50b5-4a67-b24b-77ca39f7b67a}">
      <Declaration><![CDATA[METHOD Initialize : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//direct change state
NextState := eSpecialStates.INITIAL_END;
Initialize := SUPER^.Initialize();]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="RunUnitCellularAIO">
      <LineId Id="329" Count="0" />
      <LineId Id="229" Count="4" />
      <LineId Id="235" Count="1" />
      <LineId Id="335" Count="0" />
      <LineId Id="338" Count="0" />
      <LineId Id="344" Count="0" />
      <LineId Id="342" Count="1" />
      <LineId Id="340" Count="0" />
      <LineId Id="339" Count="0" />
      <LineId Id="336" Count="1" />
      <LineId Id="237" Count="6" />
      <LineId Id="330" Count="0" />
      <LineId Id="251" Count="17" />
      <LineId Id="389" Count="0" />
      <LineId Id="269" Count="5" />
      <LineId Id="388" Count="0" />
      <LineId Id="275" Count="2" />
      <LineId Id="387" Count="0" />
      <LineId Id="386" Count="0" />
      <LineId Id="385" Count="0" />
      <LineId Id="278" Count="1" />
      <LineId Id="282" Count="0" />
      <LineId Id="286" Count="2" />
      <LineId Id="347" Count="0" />
      <LineId Id="353" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="349" Count="1" />
      <LineId Id="358" Count="0" />
      <LineId Id="356" Count="0" />
      <LineId Id="354" Count="1" />
      <LineId Id="351" Count="0" />
      <LineId Id="289" Count="4" />
      <LineId Id="360" Count="0" />
      <LineId Id="414" Count="0" />
      <LineId Id="294" Count="0" />
      <LineId Id="359" Count="0" />
      <LineId Id="295" Count="1" />
      <LineId Id="304" Count="0" />
      <LineId Id="297" Count="3" />
      <LineId Id="158" Count="0" />
    </LineIds>
    <LineIds Name="RunUnitCellularAIO.FB_init">
      <LineId Id="16" Count="5" />
      <LineId Id="15" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="36" Count="0" />
    </LineIds>
    <LineIds Name="RunUnitCellularAIO.Initialize">
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>