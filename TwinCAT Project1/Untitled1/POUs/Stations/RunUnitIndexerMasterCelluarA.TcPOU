<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="RunUnitIndexerMasterCelluarA" Id="{8c290897-f573-4530-b2b8-1a75c3433cf9}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunUnitIndexerMasterCelluarA EXTENDS RunUnitIndexerMaster
VAR_INPUT
	// conveyor related , Fast + Slow = pitch
	ptCommandFast : POINTER TO CommandBlockPos;
	ptCommandSlow : POINTER TO CommandBlockPos;
	ptCommandExtend : POINTER TO CommandBlockPos;
	//Checkpoints
	ptCommandTriggerRaise: POINTER TO CommandBlockPos; //trigger point
	ptCommandCheckRaise : POINTER TO commandBlockPos; //if not all lifter done until then , slowdown conveyor motion
	ptCommandCheckReach : POINTER TO commandBlockPos;
	//Lifters
	lifters : ARRAY[1..3] OF POINTER TO RunLifterCelluar;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	fastExecute : BOOL;
	slowExecute : BOOL;
	extendExecute : BOOL;
	
	fastDone : BOOL;
	slowDone: BOOL;
	extendDone : BOOL;
	
	nCounter  : INT ;
	bDoneCache:BOOL;
	allDone : BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//implement state 3

SUPER^(); //run indexer master

//Buffer modes
ptAxisMaster^.ExecuteCommandBlock(ptBlock := ptCommandFast,
	Execute:= fastExecute,
	bufferIndex:=1,
	Done=>fastDone);
ptAxisMaster^.ExecuteCommandBlock(ptBlock := ptCommandSlow,
	Execute:= slowExecute,
	bufferIndex:=2,
	Done=>slowDone);
ptAxisMaster^.ExecuteCommandBlock(ptBlock := ptCommandExtend,
	Execute:= extendExecute,
	bufferIndex:=3,
	Done=>extendDone);

CASE SUPER^.state OF
	3:
	//reset lifter
	allDone := TRUE; //reset
	FOR nCounter:=1 TO 3 BY 1 DO
		lifters[nCounter]^.ReleaseStopper(Done=>bDoneCache);
		allDone := allDone AND bDoneCache; //collect overall result
	END_FOR
	
	IF allDone THEN
		//reset pos command to zero
		fastExecute := TRUE; //start to go
		//serial transition
	END_IF

	4:
	//until trigger raise reached , trigger all lifter to move
	IF ptAxisMaster^.PositionFeedback >= (DWORD_TO_LREAL(ptCommandTriggerRaise^.COORDINATE)/1000) THEN
		//drive stoppers
		allDone := TRUE; //reset
		FOR nCounter:=1 TO 3 BY 1 DO
			lifters[nCounter]^.RaiseStopper(Done=>bDoneCache);
			allDone := allDone AND bDoneCache; //collect overall result
		END_FOR
		
		IF ptAxisMaster^.PositionFeedback >= (DWORD_TO_LREAL(ptCommandCheckRaise^.COORDINATE)/1000) AND allDone THEN
			slowExecute:=TRUE;
			//serial transition
		ELSIF ptAxisMaster^.PositionFeedback >= (DWORD_TO_LREAL(ptCommandCheckRaise^.COORDINATE)/1000) AND NOT allDone THEN
			//raising stopper fails
			//raise alarm , and move to recovery state	
		END_IF
		
	END_IF
	5:
	IF ptAxisMaster^.PositionFeedback >= (DWORD_TO_LREAL(ptCommandCheckReach^.COORDINATE)/1000) THEN
		allDone := TRUE; //reset
		FOR nCounter:=1 TO 3 BY 1 DO
			lifters[nCounter]^.CheckReach(Done=>bDoneCache);
			allDone := allDone AND bDoneCache; //collect overall result
		END_FOR
		
		IF NOT allDone THEN
			//need do extension
			extendExecute:=TRUE;
			//serial transition
		ELSIF allDone AND slowDone THEN
			// finished , wait bSlow done
		END_IF
		
	END_IF
	6:
	// on extension , only one oppertunity
	IF extendDone THEN
		allDone := TRUE; //reset
		FOR nCounter:=1 TO 3 BY 1 DO
			lifters[nCounter]^.CheckReach(Done=>bDoneCache);
			allDone := allDone AND bDoneCache; //collect overall result
		END_FOR
		
		IF allDone THEN
			//success
		ELSE THEN
			//failed	
		END_IF
//ELSE , wait motion done	
	END_IF
	
	16#100:
	//(lifter raise fails)recovery , call raise stopper again , if fails , raise alarm again
	//any lifter fails , execute stop ( or not)
	16#200:
	//(all reach fails)recovery
	
END_CASE]]></ST>
    </Implementation>
    <LineIds Name="RunUnitIndexerMasterCelluarA">
      <LineId Id="567" Count="16" />
      <LineId Id="587" Count="1" />
      <LineId Id="658" Count="1" />
      <LineId Id="661" Count="0" />
      <LineId Id="665" Count="1" />
      <LineId Id="664" Count="0" />
      <LineId Id="660" Count="0" />
      <LineId Id="667" Count="1" />
      <LineId Id="672" Count="1" />
      <LineId Id="669" Count="0" />
      <LineId Id="589" Count="0" />
      <LineId Id="592" Count="38" />
      <LineId Id="638" Count="0" />
      <LineId Id="640" Count="4" />
      <LineId Id="646" Count="0" />
      <LineId Id="650" Count="0" />
      <LineId Id="647" Count="0" />
      <LineId Id="649" Count="0" />
      <LineId Id="648" Count="0" />
      <LineId Id="652" Count="0" />
      <LineId Id="639" Count="0" />
      <LineId Id="631" Count="3" />
      <LineId Id="653" Count="2" />
      <LineId Id="635" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>