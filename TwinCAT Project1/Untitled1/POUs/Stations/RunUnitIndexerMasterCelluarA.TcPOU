<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.10">
  <POU Name="RunUnitIndexerMasterCelluarA" Id="{8c290897-f573-4530-b2b8-1a75c3433cf9}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunUnitIndexerMasterCelluarA EXTENDS RunUnitIndexerMaster
VAR_INPUT
	allHit : BOOL;
	allReach : BOOL;
	allRelease : BOOL;
END_VAR
VAR_OUTPUT
	triggerHit : BOOL;
	triggerRelease : BOOL;
END_VAR
VAR
	// conveyor related , Fast + Slow = pitch
	ptCommandFast : POINTER TO ParameterSet;
	ptCommandSlow : POINTER TO ParameterSet;
	
	//Checkpoints
	commandTriggerRaise: ParameterSet; //trigger point
	commandCheckRaise : ParameterSet; //if not all lifter done until then , slowdown conveyor motion
	//Lifters
	//lifters : ARRAY[1..3] OF POINTER TO RunLifterCelluar;
	commandSetZero : ParameterSet;
	commandFinalGoal : ParameterSet;

	fastExecute : BOOL;
	slowExecute : BOOL;
	finalGoalExecute : BOOL;
	
	fastDone : BOOL;
	slowDone: BOOL;
	finalGoalDone : BOOL;
			
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//implement state 3

SUPER^(); //run indexer master

//isLastSlotOccupied := true; always occupied , force to transmit to downstream

//Buffer modes
IF NOT fastDone AND fastExecute THEN
	fastDone := Axis^.ExecuteParameterBuffer(ptCommandFast,
	bufferIndex:=1);
END_IF
IF NOT slowDone AND slowExecute THEN
	slowDone := Axis^.ExecuteParameterBuffer(ptCommandSlow,
	bufferIndex:=2);
END_IF
IF NOT finalGoalDone AND finalGoalExecute THEN
	finalGoalDone := Axis^.ExecuteParameterBuffer(ADR(commandFinalGoal),
	bufferIndex:=3);
END_IF


IF bSerialTransition AND State = 1 THEN
	triggerRelease:=TRUE;
	NextState := 16#10; //state override : release lifters
END_IF

IF State >=3 AND State <=7 AND_THEN Upstream<>0 AND Upstream^.syncEngaged AND NOT Upstream^.syncAcknowledged THEN	
	Upstream^.syncAcknowledged := TRUE;//pull upstream when ready
	//Data transmit
	SlotBase^.wordOut.0 := TRUE; //TODO , follow that status
	SlotBase^.id := Upstream^.syncMaterialId;
	//set-up final goal
	commandFinalGoal.command := eCommandTypes.POSITION;
	commandFinalGoal.parameter.position.Velocity := ptCommandFast^.parameter.position.Velocity;
	commandFinalGoal.parameter.position.Acceleration := ptCommandFast^.parameter.position.Acceleration;
	commandFinalGoal.parameter.position.Deceleration := ptCommandFast^.parameter.position.Deceleration;
	commandFinalGoal.parameter.position.Position := Axis^.PositionFeedback + ptCommandSlow^.parameter.position.Position; //goal extended
	
END_IF

CASE State OF
	//-------------------------release lifters
	16#10:
	commandSetZero.command := eCommandTypes.SET_POSITION;
	commandSetZero.parameter.position.Position := 0;
	
	IF NOT transitionByte.0 THEN
		transitionByte.0 := Axis^.ExecuteParameter(ptBlock:= ADR(commandSetZero));//reset pos command to zero
	END_IF
	
	IF allRelease AND transitionByte.0 THEN
		//reset all 	
		fastExecute := FALSE;
		slowExecute := FALSE;
		finalGoalExecute:=FALSE;

		fastDone := FALSE;
		slowDone := FALSE;
		finalGoalDone:=FALSE;	
	
		triggerRelease:=FALSE;
		
		//before enter deceleration
		commandCheckRaise.parameter.position := (ptCommandFast^.parameter.position.Velocity * ptCommandFast^.parameter.position.Velocity);
		commandCheckRaise.parameter.position := commandCheckRaise.parameter.position / (ptCommandFast^.parameter.position.Deceleration * 1.8);
		
		NextState:=2; //merge back default sequence
	END_IF
	//------------------start running
	3:
	fastExecute := TRUE; //start to go
	bSerialTransition:= TRUE; //serial transition
	4:
	IF Axis^.PositionFeedback >= commandTriggerRaise.parameter.position.Position THEN
		
		triggerHit := TRUE;//until trigger raise reached , trigger all lifter to move
		bSerialTransition:= TRUE; //serial transition
	//Else : on-going , not trigger lifter
	END_IF
	5:
	IF Axis^.PositionFeedback >= commandCheckRaise.parameter.position.Position THEN
		IF allHit THEN
			triggerHit:=false;
			slowExecute:=TRUE;//able to slowdown to hit
			syncEngaged := false ;// sending over
			bSerialTransition:= TRUE; //serial transition
		ELSE
			//NextState := 16#E0;	//any lifter fails
			// reminder
		END_IF
	//Else : on going , not reached the check point
	END_IF
	6:
	IF Upstream<>0 AND_THEN Upstream^.syncAcknowledged AND fastDone THEN
		//IF fastDone THEN
			//wait first command block done , otherwise would raise 0x4292 (buffer fulled)
			finalGoalExecute:=TRUE;//need do extension
			bSerialTransition:= TRUE; //serial transition
		//END_IF
	//ELSE
		//TODO , not allowed , have to pull upstream anyway
		//NextState := 16#20;//not pulled upstream , done
	END_IF
	7:
	// on extension , only one oppertunity
	IF finalGoalDone THEN
		NextState := 16#20;//done
	//ELSE , wait motion done	
	END_IF
	//------------------------end of running
	16#20:
	IF allReach THEN	
		NextState :=1; //since working signal raised by individual lifter?
	ELSE	
		//NextState := 16#F0;//failed
		// reminder		
	END_IF
	//------------------------error states
	16#E0:
	//(lifter raise fails)recovery , call raise stopper again , if fails , raise alarm again
	//any lifter fails , execute stop ( or not)
	16#F0:
	//(all reach fails)recovery
	
END_CASE]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{96d07f02-073e-4434-a75c-09e5135212ba}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	argParent : POINTER TO RunUnitGeneric;
	argSlotBase : POINTER TO MaterialBlock;
	argSlotLast : POINTER TO MaterialBlock;
	
	argAxis : POINTER TO RunAxis;
	argUpstream : POINTER TO RunUnitIndexerMaster;
	
END_VAR
VAR CONSTANT
	indexFast : INT := 1;
	indexSlow : INT := 2;
	indexRaise : INT := 3;
	indexCheck : INT :=4;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//initialize 
Parent := argParent;
SlotBase := argSlotBase;
SlotLast := argSlotLast;

Axis := argAxis;
Upstream := argUpstream;

//
IF Axis<>0 THEN
	ptCommandFast := ADR(Axis^.ptpCommands[indexFast]);
	ptCommandSlow := ADR(Axis^.ptpCommands[indexSlow]);
	//ptCommandTriggerRaise := ADR(Axis^.ptpCommands[indexRaise]); //trigger point
	//ptCommandCheckRaise :=ADR(Axis^.ptpCommands[indexCheck]); //if not all lifter done until then , slowdown conveyor motion
	commandTriggerRaise.parameter.position := 250; //carrier length
END_IF

IF Upstream=0 THEN
	isProxyMode:=TRUE; //no upstream , i am proxy
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{c03378a0-0488-4150-9f50-182a82a479bf}">
      <Declaration><![CDATA[METHOD Initialize : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//direct change state
NextState := eSpecialStates.INITIAL_END;
Initialize := SUPER^.Initialize();]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="RunUnitIndexerMasterCelluarA">
      <LineId Id="1642" Count="61" />
      <LineId Id="1764" Count="0" />
      <LineId Id="1762" Count="0" />
      <LineId Id="1765" Count="0" />
      <LineId Id="1763" Count="0" />
      <LineId Id="1704" Count="57" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="RunUnitIndexerMasterCelluarA.FB_init">
      <LineId Id="15" Count="5" />
      <LineId Id="14" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="73" Count="2" />
      <LineId Id="32" Count="0" />
    </LineIds>
    <LineIds Name="RunUnitIndexerMasterCelluarA.Initialize">
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>