<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.10">
  <POU Name="RunAxisInspection" Id="{a6e0aedf-0dab-4fac-b5f4-4cfe5e671281}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunAxisInspection EXTENDS RunUnitSlave
VAR
	axis1 : POINTER TO RunAxis;
	axis2 : POINTER TO RunAxis;
	sideAligner : POINTER TO RunCylinder := 0;
	
	nCounter : INT := 0;
END_VAR
VAR PERSISTENT
	//Axis1
	indexStandByAxis1 : INT := 1;
	indexPosition1Axis1 : INT := 2;
	//Axis2
	indexStandByAxis2 : INT := 1;
	indexPosition1Axis2 : INT := 2;
	//
	nGoal : INT := 4;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[//n-Axis aoi , once position completed , trigger and wait
SUPER^();

CASE outputState OF
	eSpecialStates.SLAVE_AXIS_INSPECTION_ENTER:
		IF NOT transitionByte.0 THEN
			transitionByte.0 := axis1^.ExecuteParameterIndex(nCounter + indexPosition1Axis1);
		END_IF
		IF axis2 = 0 THEN
			transitionByte.1 := TRUE; // axis2 is not existed
		ELSIF NOT transitionByte.1 THEN
			transitionByte.1 := axis2^.ExecuteParameterIndex(nCounter + indexPosition1Axis2); // axis2 is existed
		END_IF
		IF transitionByte = 3 THEN
			//once inspection done
			NextState := eSpecialStates.SLAVE_AXIS_INSPECTION_ITERATION; //both axis done motion
			slaveWorkingSignal[1] := slaveLinkageStatus[1]; //trigger slave
		END_IF
	eSpecialStates.SLAVE_AXIS_INSPECTION_ITERATION:
		IF NOT slaveWorkingSignal[1] THEN
			//once inspection reach 
			IF nCounter < nGoal THEN			
				nCounter := nCounter + 1;
			ELSE
				nCounter := 0; //reset
				NextState := eSpecialStates.SLAVE_AXIS_INSPECTION_EXIT;
			END_IF
		ELSE
			//wait inspecition
		END_IF
END_CASE]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{d0f76d0d-18fe-401c-ac9e-95df7adf4d63}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	argParent : POINTER TO RunUnitGeneric;
	argSlotBase : POINTER TO MaterialBlock;
	argSlotLast : POINTER TO MaterialBlock;
	
	argWorkingSignal : POINTER TO BOOL;
	
	argAxis1 : POINTER TO RunAxis;
	argAxis2 : POINTER TO RunAxis;
	
	argSideAligner : pointer to RunCylinder;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//initialize 
Parent := argParent;
SlotBase := argSlotBase;
SlotLast := argSlotLast;
//
IF bInitRetains THEN
	NextState := eSpecialStates.INITIAL_BEGIN;
END_IF

workingSignal := argWorkingSignal; //link

axis1 := argAxis1;
axis2 := argAxis2;
sideAligner := argSideAligner;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{130164f8-aa24-4f6f-8c9b-a99078376a66}">
      <Declaration><![CDATA[METHOD Initialize : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
//default initialization sequence
CASE outputState OF 
	eSpecialStates.INITIAL_STATE_7:
		IF NOT transitionByte.0 AND_THEN axis1^.ExecuteParameterIndex(indexStandByAxis1) THEN
			transitionByte.0 := TRUE;
		END_IF
		IF NOT transitionByte.1 AND_THEN (axis2 = 0 OR axis2<>0 AND_THEN axis2^.ExecuteParameterIndex(indexStandByAxis2)) THEN
			transitionByte.1 := TRUE; //axis 2 is not existed
		END_IF
		IF NOT transitionByte.2 AND_THEN (sideAligner=0 OR (sideAligner<>0 AND_THEN sideAligner^.Execute(eCylinderCommands.COMMAND_A))) THEN
			transitionByte.2 := TRUE; //aligner backoff
		END_IF
		IF transitionByte = 7 THEN
			NextState := eSpecialStates.INITIAL_END;
		END_IF
END_CASE

Initialize:= SUPER^.Initialize();]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="RunAxisInspection">
      <LineId Id="9" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="39" Count="1" />
      <LineId Id="44" Count="1" />
      <LineId Id="47" Count="1" />
      <LineId Id="46" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="55" Count="1" />
      <LineId Id="54" Count="0" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="RunAxisInspection.FB_init">
      <LineId Id="14" Count="8" />
      <LineId Id="13" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="31" Count="0" />
    </LineIds>
    <LineIds Name="RunAxisInspection.Initialize">
      <LineId Id="25" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="9" Count="5" />
      <LineId Id="26" Count="2" />
      <LineId Id="17" Count="2" />
      <LineId Id="8" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="20" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>