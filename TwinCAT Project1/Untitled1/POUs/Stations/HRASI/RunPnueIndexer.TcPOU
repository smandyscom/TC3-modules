<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="RunPnueIndexer" Id="{0282178a-e4a8-43e2-88ce-00a99b488386}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunPnueIndexer EXTENDS RunUnitIndexerMaster
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	//devices
	lockCylinder : POINTER TO RunCylinder;
	pistonCylinder : POINTER TO RunCylinder;
	
	sensorPairs : ARRAY[0..3] OF defSensorPair; //define stations sensor flag signatures
	fixtures : POINTER TO helperOutputSelection;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^(); //run indexer master

CASE outputState OF
	//------------------start running
	// S16#10 - : setup vacuum fixtures
	// S16#20 - : pnuematic indexer movement
	// 1. unlock
	// 2. shift out
	// 3. lock
	//------------------
	16#10:
		//activate fixture by slot valid status
		FOR nCounter := 0 TO SlotCount-1 BY 1 DO
			fixtures^.Trigger(sensorPairs[nCounter],SlotBase[nCounter].Valid);
		END_FOR
	//----------
	16#20:
		bSerialTransition := lockCylinder^.Execute(eCylinderCommands.COMMAND_A);
	16#21:
		bSerialTransition := pistonCylinder^.Execute(eCylinderCommands.COMMAND_B);
	16#22:
		bSerialTransition := pistonCylinder^.Execute(eCylinderCommands.COMMAND_A);
	16#23:
		IF lockCylinder^.Execute(eCylinderCommands.COMMAND_A) THEN
			fixtures^.ReleaseAll(); //release all fixture
			NextState := 16#0F; //join master sequence
		END_IF
END_CASE]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{8dfee478-70bf-4472-a4ae-21e0c723276a}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	argParent : POINTER TO RunUnitGeneric;
	argSlotBase : POINTER TO RunMaterial;
	argSlotLast : POINTER TO RunMaterial;
	
	argUpstream : POINTER TO RunUnitTransporterBase;
	argAxis : POINTER TO RunAxis;
	
	argLockCylinder : POINTER TO RunCylinder;
	argPistonCylinder : POINTER TO RunCylinder;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//initialize 
Parent := argParent;
SlotBase := argSlotBase;
SlotLast := argSlotLast;

Axis := argAxis;
Upstream := argUpstream;

IF Upstream=0 THEN
	isProxyMode:=TRUE; //no upstream , i am proxy
END_IF

//calculate how much slot related
SlotCount :=  TO_INT((SlotLast-SlotBase)/SIZEOF(RunMaterial) + 1);

lockCylinder := argLockCylinder;
pistonCylinder := argPistonCylinder;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="RunPnueIndexer">
      <LineId Id="9" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="59" Count="1" />
      <LineId Id="22" Count="1" />
      <LineId Id="25" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="26" Count="5" />
      <LineId Id="46" Count="0" />
      <LineId Id="32" Count="1" />
      <LineId Id="18" Count="0" />
    </LineIds>
    <LineIds Name="RunPnueIndexer.FB_init">
      <LineId Id="34" Count="3" />
      <LineId Id="43" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="60" Count="1" />
      <LineId Id="76" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="95" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>