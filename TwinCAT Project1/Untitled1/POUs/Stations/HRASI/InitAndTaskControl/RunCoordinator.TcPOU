<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="RunCoordinator" Id="{93db79ea-7610-40ae-89e3-5adae225f547}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunCoordinator EXTENDS RunGroupNode
VAR_INPUT
	startProductionMode AT%M* : BOOL;
	startRegularCheckMode AT%M* : BOOL;
	//------------
	// link to HMI
	//------------
	commPurge AT%I* : BOOL ; 
	commRegularCheckAck AT%I* : BOOL;
	//------------
	//	Control
	//------------
	scara1 : POINTER TO RunScaraAgent;
	scara2 : POINTER TO RunScaraAgent;
	
	clamper1 : POINTER TO RunClamper;
	clamper2 : POINTER TO RunClamper;
	
END_VAR
VAR_OUTPUT
	isInitialized : BOOL;
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//Initialization sequences:
// 1. Group1 - two clamper and indexer (two clamper hold/unhold , the indexer turing 4 runs)
// 2. Group2 - SCARA1 and rack1,2 (pick to drop zone then homing and release rackes)
// 3. Group3 - SCARA2 and rack3,4

SUPER^();

isInitialized := ((outputState AND eSpecialStates.INITIAL_REGION) = 0);
isInitialized := TRUE;

CASE outputState OF
	//----------------------------
	//	Initializing :
	// 2. Off all I/O 
	// 1. SCARA & Clamper & Indexer
	//----------------------------	
	eSpecialStates.INITIAL_BEGIN:
		FOR nCounter :=0 TO 23 BY 1 DO
			IF gvl.remoteControls[nCounter] <> 0 THEN
				bSerialTransition := bSerialTransition AND gvl.remoteControls[nCounter]^.Execute(eCylinderCommands.COMMAND_A);
			END_IF
		END_FOR
		IF bSerialTransition THEN
			NextState := eSpecialStates.INITIAL_STATE_1;
		END_IF
	//------------------------------------------
	// Initialize - Group start (base procedure)
	//------------------------------------------
	eSpecialStates.GENERIC_GROUP_IDLE:
		//---------------------
		//	IDLE (Engineering mode): wait command / able to trigger individual process
		//---------------------
	//------------------------Working
	16#300:
		//----------------------------------
		//	Regular check mode
		//	1. Stand-along check SCARA1/SCARA2
		//	1. Bypass some stations then feed-in parts in Slot1 , then transit to AOI
		//  2. Prompt meesage/door interlock
		//----------------------------------
		scara1^.isTaskEngaged := TRUE;
		
		clamper1^.bIsBypassed := TRUE;
		clamper2^.bIsBypassed := TRUE;
		
		bSerialTransition := TRUE;
	16#301:
		bSerialTransition := NOT scara1^.isTaskEngaged;
		IF bSerialTransition THEN
			scara2^.isTaskEngaged := TRUE;
		END_IF
	16#302:
		bSerialTransition := NOT scara2^.isTaskEngaged;
		//then AOI shuffing test
		
	16#500:
		//---------------------------
		//	Production mode
		//  1. Execute SCARA ASSEMBLE
		//	2. When purge command raise , coordinate stations to stop
		//---------------------------
		clamper1^.bIsBypassed := FALSE;
		clamper2^.bIsBypassed := FALSE;
		scara1^.isTaskEngaged := TRUE;
		scara2^.isTaskEngaged := TRUE;
		NextState := 16#1000;
	
	16#600:	
		//---------------------------
		//	Trial-assemble mode
		//---------------------------
		clamper1^.bIsBypassed := FALSE;
		clamper2^.bIsBypassed := TRUE;
		scara1^.isTaskEngaged := TRUE;
		scara2^.isTaskEngaged := FALSE;
		NextState := 16#1000;
	16#700:	
		//---------------------------
		//	Trial-snap mode
		//---------------------------
		clamper1^.bIsBypassed := TRUE;
		clamper2^.bIsBypassed := FALSE;
		scara1^.isTaskEngaged := FALSE;
		scara2^.isTaskEngaged := TRUE;
		NextState := 16#1000;
		
		//---------------------------
		//	Purging chain
		//---------------------------
	16#1000:
		bSerialTransition := commPurge; //would transimit to loading
		IF bSerialTransition THEN
			THIS^.isPurged := TRUE;
		END_IF
	16#1001:
		bSerialTransition := previousNode <>0 AND_THEN previousNode^.isPurged;
		IF bSerialTransition THEN
			THIS^.isPurged := FALSE; //going to reset
		END_IF
	16#1002:
		bSerialTransition := previousNode <>0 AND_THEN NOT previousNode^.isPurged;
		NextState := eSpecialStates.GENERIC_GROUP_IDLE;
END_CASE
//one shot command clear
startProductionMode := FALSE;
startRegularCheckMode := FALSE;]]></ST>
    </Implementation>
    <LineIds Name="RunCoordinator">
      <LineId Id="395" Count="104" />
      <LineId Id="234" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>