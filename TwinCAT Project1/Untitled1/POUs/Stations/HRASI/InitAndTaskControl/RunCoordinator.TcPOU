<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="RunCoordinator" Id="{93db79ea-7610-40ae-89e3-5adae225f547}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunCoordinator EXTENDS RunGroupNode
VAR_INPUT
	commStartProductionMode AT%M* : BOOL;
	commStartRegularCheckMode AT%M* : BOOL;
	commIsDryRun AT%M* : BOOL;
	
	//------------
	//	Trial mode
	//------------
	commStartTrialAssemble AT%M* : BOOL;
	commStartTrialSnap AT%M* : BOOL;
	//------------
	// link to HMI
	//------------
	commRegularCheckAck AT%I* : BOOL;
	//------------
	//	Control
	//------------
	scara1 : POINTER TO RunScaraAgent;
	scara2 : POINTER TO RunScaraAgent;
	
	clamper1 : POINTER TO RunClamper;
	clamper2 : POINTER TO RunClamper;
	
	loader : POINTER TO RunLoading;
	aoi : POINTER TO RunAoiInspectionV1;
	
	bridge1 : POINTER TO RunBridge;
	
	racks : ARRAY[0..3] OF POINTER TO RunCommonRack;
END_VAR
VAR_OUTPUT
	isInitialized AT%Q*: BOOL;
	isIdle AT%Q* : BOOL;
END_VAR
VAR
	dryRunDevicesList : ARRAY[0..7] OF POINTER TO executebase;
END_VAR
VAR PERSISTENT 
	commSpeedFactor AT%M* : BYTE;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[//Initialization sequences:
// 1. Group1 - two clamper and indexer (two clamper hold/unhold , the indexer turing 4 runs)
// 2. Group2 - SCARA1 and rack1,2 (pick to drop zone then homing and release rackes)
// 3. Group3 - SCARA2 and rack3,4

SUPER^();

isInitialized := ((outputState AND eSpecialStates.INITIAL_REGION) <> 16#100);
isIdle := outputState = eSpecialStates.GENERIC_GROUP_IDLE;

IF dryRunDevicesList[0] = 0 THEN
	//initialize
	dryRunDevicesList[0] := ADR(gvl.vacuumControls[A9]);
	dryRunDevicesList[1] := ADR(gvl.vacuumControls[A10]);
	dryRunDevicesList[2] := ADR(gvl.vacuumControls[A11]);
	dryRunDevicesList[3] := ADR(gvl.vacuumControls[A12]);
	
	dryRunDevicesList[4] := ADR(gvl.vacuumControls[A13]);
	dryRunDevicesList[5] := ADR(gvl.vacuumControls[A14]);

	dryRunDevicesList[6] := ADR(gvl.vacuumControls[A20]);
	
	dryRunDevicesList[7] := ADR(gvl.cylinderControls[cy6]);
	
END_IF

CASE outputState OF
	//----------------------------
	//	Initializing :
	// 2. Off all I/O 
	// 1. SCARA & Clamper & Indexer
	//----------------------------
	eSpecialStates.INITIAL_BEGIN:
		bSerialTransition := TRUE;//gvl.cylinderControls[Cy18].Execute(eCylinderCommands.COMMAND_A);
	eSpecialStates.INITIAL_STATE_1:
		bSerialTransition := true;//gvl.cylinderControls[Cy17].Execute(eCylinderCommands.COMMAND_A);
	eSpecialStates.INITIAL_STATE_2:
		bSerialTransition:=TRUE;
		FOR nCounter :=0 TO 23 BY 1 DO
			IF gvl.remoteControls[nCounter] <> 0 THEN
				bSerialTransition := bSerialTransition AND gvl.remoteControls[nCounter]^.Execute(eCylinderCommands.COMMAND_A);
			END_IF
		END_FOR
	eSpecialStates.INITIAL_STATE_3:
		bSerialTransition:=TRUE;
		FOR nCounter :=0 TO 2 BY 1 DO
			bSerialTransition := members[nCounter]<>0 AND_THEN members[nCounter]^.Initialize();
		END_FOR
		IF bSerialTransition THEN
			NextState:=eSpecialStates.INITIAL_END;
		END_IF
	//------------------------------------------
	// Initialize - Group start (base procedure)
	//------------------------------------------
	eSpecialStates.GENERIC_GROUP_START:
		FOR nCounter :=0 TO 2 BY 1 DO
			IF members[nCounter]<>0 THEN
				members[nCounter]^.NextState := eSpecialStates.GENERIC_GROUP_START;
			END_IF
		END_FOR
		bSerialTransition:=TRUE;
	eSpecialStates.GENERIC_GROUP_IDLE:
		//---------------------
		//	IDLE (Engineering mode): wait command / able to trigger individual process
		//---------------------
		IF commStartProductionMode THEN
			//---------------------------
			//	Production mode
			//  1. Execute SCARA ASSEMBLE
			//	2. When purge command raise , coordinate stations to stop
			//---------------------------
			clamper1^.bIsBypassed := FALSE;
			clamper2^.bIsBypassed := FALSE;
			
			scara1^.PropTask := eSCARATask.task_assemble_scara1;
			scara1^.isTaskEngaged := TRUE;
			scara2^.PropTask := eSCARATask.task_snap_scara2;
			scara2^.isTaskEngaged := TRUE;	
			
			bSerialTransition := TRUE;
		ELSIF commStartTrialAssemble THEN
			//---------------------------
			//	Trial-assemble mode
			//---------------------------
			clamper1^.bIsBypassed := FALSE;
			clamper2^.bIsBypassed := TRUE;
			
			scara1^.PropTask := eSCARATask.task_assemble_scara1;
			scara1^.isTaskEngaged := TRUE;
			
			scara2^.PropTask := eSCARATask.task_snap_scara2;
			scara2^.isTaskEngaged := TRUE;
			
			bSerialTransition := TRUE;
		ELSIF commStartTrialSnap THEN
			//---------------------------
			//	Trial-snap mode
			//---------------------------
			clamper1^.bIsBypassed := FALSE;
			clamper2^.bIsBypassed := FALSE;
			bridge1^.bIsBypassed := TRUE;
			
			scara1^.isTaskEngaged := FALSE;
			
			scara2^.PropTask := eSCARATask.task_snap_scara2;
			scara2^.isTaskEngaged := TRUE;
			
			//--------------
			//	Turn off AOI
			//--------------
			gvl.cylinderControls[Cy16].Execute(eCylinderCommands.COMMAND_B);
			aoi^.bIsBypassed := TRUE;
			
			bSerialTransition := TRUE;
		ELSIF commStartRegularCheckMode THEN
			NextState := 16#300;
		END_IF
		
		IF bSerialTransition THEN
			
			//---------------------------------------------------
			//turn off following devices if dry run	(no products)
			//---------------------------------------------------
			FOR nCounter:=0 TO 7 DO
				dryRunDevicesList[nCounter]^.isShutVerification := commIsDryRun;
			END_FOR
			loader^.isSlotValidOverride := commIsDryRun;
			aoi^.bIsBypassed := commIsDryRun;
			scara1^.context_out_isDryRun.0 := commIsDryRun;
			scara2^.context_out_isDryRun.0 := commIsDryRun;
			IF commIsDryRun THEN
				gvl.cylinderControls[Cy16].Execute(eCylinderCommands.COMMAND_B);
			END_IF
			
			//-------------------
			//speed factor renew
			//-------------------
			scara1^.context_out_speedFactor := commSpeedFactor;
			scara2^.context_out_speedFactor := commSpeedFactor;
		
			NextState := 16#1000;
		END_IF
		
	//------------------------
	//Working
	//------------------------
	16#300:
		//----------------------------------
		//	Regular check mode
		//	1. Stand-along check SCARA1/SCARA2
		//	1. Bypass some stations then feed-in parts in Slot1 , then transit to AOI
		//  2. Prompt meesage/door interlock
		//----------------------------------
		scara1^.isTaskEngaged := TRUE;
		
		clamper1^.bIsBypassed := TRUE;
		clamper2^.bIsBypassed := TRUE;
		
		bSerialTransition := TRUE;
	16#301:
		bSerialTransition := NOT scara1^.isTaskEngaged;
		IF bSerialTransition THEN
			scara2^.isTaskEngaged := TRUE;
		END_IF
	16#302:
		bSerialTransition := NOT scara2^.isTaskEngaged;
		IF bSerialTransition THEN
			commStartRegularCheckMode := false;
		END_IF
		//then AOI shuffing test
		
		//---------------------------
		//	Purging chain
		//---------------------------
	16#1000:
		bSerialTransition := isPurged; //would be triggered by interfaceControl
	16#1001:
		bSerialTransition := previousNode <>0 AND_THEN previousNode^.isPurged;
		IF bSerialTransition THEN
			THIS^.isPurged := FALSE; //going to reset
		END_IF
	16#1002:
		bSerialTransition := previousNode <>0 AND_THEN NOT previousNode^.isPurged;
		IF bSerialTransition THEN
			FOR nCounter:=0 TO 3 BY 1 DO
				racks[nCounter]^.commEject := TRUE; //eject
			END_FOR	
		
			commStartProductionMode := FALSE;
			commStartTrialAssemble:= FALSE;
			commStartTrialSnap :=FALSE;
			
			NextState := eSpecialStates.GENERIC_GROUP_IDLE;
		END_IF		
END_CASE


]]></ST>
    </Implementation>
    <LineIds Name="RunCoordinator">
      <LineId Id="1209" Count="196" />
      <LineId Id="897" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>