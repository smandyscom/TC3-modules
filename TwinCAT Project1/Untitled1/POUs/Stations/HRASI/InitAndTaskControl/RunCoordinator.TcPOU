<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="RunCoordinator" Id="{93db79ea-7610-40ae-89e3-5adae225f547}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunCoordinator EXTENDS RunGroupNode
VAR_INPUT
	commStartProductionMode AT%M* : BOOL;
	commStartRegularCheckMode AT%M* : BOOL;
	commIsDryRun AT%M* : BOOL;
	
	//------------
	//	Trial mode
	//------------
	commStartTrialAssemble AT%M* : BOOL;
	commStartTrialSnap AT%M* : BOOL;
	//------------
	// link to HMI
	//------------
	commRegularCheckAck AT%I* : BOOL;
	//------------
	//	Control
	//------------
	scara1 : POINTER TO RunScaraAgent;
	scara2 : POINTER TO RunScaraAgent;
	
	clamper1 : POINTER TO RunClamper;
	clamper2 : POINTER TO RunClamper;
	
	loader : POINTER TO RunLoading;
	aoi : POINTER TO RunAoiInspectionV1;
	
	bridge1 : POINTER TO RunBridge;
	
	racks : ARRAY[0..3] OF POINTER TO RunCommonRack;
END_VAR
VAR_OUTPUT
	isInitialized AT%Q*: BOOL;
	isIdle AT%Q* : BOOL;
END_VAR
VAR
	dryRunDevicesList : ARRAY[0..7] OF POINTER TO executebase;
	
	//Vacuum breaker
	backSecureBreaker AT%Q* : BOOL;
	filterBreaker AT%Q* : BOOL;
	
END_VAR
VAR PERSISTENT 
	commSpeedFactor AT%M* : BYTE;
	timerBreak : ton;
END_VAR
VAR CONSTANT 
	ERR_VACUUM_JAMMED : DWORD := 600;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[//Initialization sequences:
// 1. Group1 - two clamper and indexer (two clamper hold/unhold , the indexer turing 4 runs)
// 2. Group2 - SCARA1 and rack1,2 (pick to drop zone then homing and release rackes)
// 3. Group3 - SCARA2 and rack3,4

SUPER^();
timerBreak();

isInitialized := ((outputState AND eSpecialStates.INITIAL_REGION) <> 16#100);
isIdle := outputState = eSpecialStates.GENERIC_GROUP_IDLE;

IF dryRunDevicesList[0] = 0 THEN
	//initialize
	dryRunDevicesList[0] := ADR(gvl.vacuumControls[A9]); 
	dryRunDevicesList[1] := ADR(gvl.vacuumControls[A10]);
	dryRunDevicesList[2] := ADR(gvl.vacuumControls[A11]);
	dryRunDevicesList[3] := ADR(gvl.vacuumControls[A12]);
	
	dryRunDevicesList[4] := ADR(gvl.vacuumControls[A13]);
	dryRunDevicesList[5] := ADR(gvl.vacuumControls[A14]);

	dryRunDevicesList[6] := ADR(gvl.vacuumControls[A20]);
	
	dryRunDevicesList[7] := ADR(gvl.cylinderControls[cy6]); //top part clamper
	
END_IF

CASE outputState OF
	//----------------------------
	//	Initializing :
	// 1. Off all I/O 
	// 2. SCARA & Clamper & Indexer
	//----------------------------
	eSpecialStates.INITIAL_BEGIN:
		commStartProductionMode := FALSE;
		commStartRegularCheckMode :=FALSE;
		commIsDryRun := FALSE;
		commStartTrialAssemble:=FALSE;
		commStartTrialSnap:=FALSE;
		commRegularCheckAck:=FALSE;
		isPurged := FALSE;
		
		THIS^.TurnDryRun(FALSE);
		
		
		bSerialTransition := TRUE;
	//-----------------------------
	// Off remote I/O devices
	//-----------------------------
	eSpecialStates.INITIAL_STATE_1:
		bSerialTransition:=TRUE;
		FOR nCounter :=0 TO 23 BY 1 DO
			IF gvl.remoteControls[nCounter] <> 0 THEN
				bSerialTransition := bSerialTransition AND gvl.remoteControls[nCounter]^.Execute(eCylinderCommands.COMMAND_A);
			END_IF
		END_FOR
		//Vacuum break , clean the air path
		IF bSerialTransition THEN
			//activate brakers
			THIS^.ActivateBreakers();
		END_IF
	eSpecialStates.INITIAL_STATE_2:
		bSerialTransition := timerBreak.Q;
		IF bSerialTransition THEN
			THIS^.InactivateBreakers();
		END_IF
	//-----------------------------
	//	Then check is vacuum jammed
	//-----------------------------
	eSpecialStates.INITIAL_STATE_3:
		bSerialTransition:=TRUE;
		THIS^.TurnVerifyVacuums(eCylinderCommands.COMMAND_B);
	eSpecialStates.INITIAL_STATE_4:
		bSerialTransition:=timerBreak.Q AND_THEN THIS^.TurnVerifyVacuums(eCylinderCommands.COMMAND_B);
		IF timerBreak.Q AND_THEN (NOT THIS^.TurnVerifyVacuums(eCylinderCommands.COMMAND_B)) THEN
			THIS^.AlarmCode := ERR_VACUUM_JAMMED;
		END_IF	
		IF bSerialTransition THEN
			THIS^.TurnVerifyVacuums(eCylinderCommands.COMMAND_A);
		END_IF
	//------------
	//	MACHNICAL INITIALIZE : SCARA/RACK FIRST
	//------------	
	eSpecialStates.INITIAL_STATE_5:	
		bSerialTransition:=TRUE;
		FOR nCounter :=0 TO 1 BY 1 DO
			bSerialTransition := bSerialTransition AND  members[nCounter]^.Initialize();
		END_FOR
	eSpecialStates.INITIAL_STATE_6:
		//------------
		//	THEN INDEX (in case of collision of clampers
		//------------
		bSerialTransition:= members[2]^.Initialize();
		IF bSerialTransition THEN
			NextState:=eSpecialStates.INITIAL_END;
		END_IF
	//------------------------------------------
	// Initialize - Group start (base procedure)
	//------------------------------------------
	eSpecialStates.GENERIC_GROUP_START:
		FOR nCounter :=0 TO 2 BY 1 DO
			IF members[nCounter]<>0 THEN
				members[nCounter]^.NextState := eSpecialStates.GENERIC_GROUP_START;
			END_IF
		END_FOR
		THIS^.TurnRackIdleDetection(FALSE);
		
		bSerialTransition:=TRUE;
	eSpecialStates.GENERIC_GROUP_IDLE:
		//---------------------
		//	IDLE (Engineering mode): wait command / able to trigger individual process
		//---------------------
		IF commStartProductionMode THEN
			//---------------------------
			//	Production mode
			//  1. Execute SCARA ASSEMBLE
			//	2. When purge command raise , coordinate stations to stop
			//---------------------------
			clamper1^.bIsBypassed := FALSE;
			clamper2^.bIsBypassed := FALSE;
			
			scara1^.PropTask := eSCARATask.task_assemble_scara1;
			scara1^.isTaskEngaged := TRUE;
			scara2^.PropTask := eSCARATask.task_snap_scara2;
			scara2^.isTaskEngaged := TRUE;	
			
			bSerialTransition := TRUE;
		ELSIF commStartTrialAssemble THEN
			//---------------------------
			//	Trial-assemble mode
			//---------------------------
			clamper1^.bIsBypassed := FALSE;
			clamper2^.bIsBypassed := TRUE;
			
			scara1^.PropTask := eSCARATask.task_assemble_scara1;
			scara1^.isTaskEngaged := TRUE;
			
			scara2^.PropTask := eSCARATask.task_snap_scara2;
			scara2^.isTaskEngaged := TRUE;
			
			
			
			bSerialTransition := TRUE;
		ELSIF commStartTrialSnap THEN
			//---------------------------
			//	Trial-snap mode
			//---------------------------
			clamper1^.bIsBypassed := FALSE;
			clamper2^.bIsBypassed := FALSE;
			bridge1^.bIsBypassed := TRUE;
			
			scara1^.isTaskEngaged := FALSE;
			
			scara2^.PropTask := eSCARATask.task_snap_scara2;
			scara2^.isTaskEngaged := TRUE;
			
			
			bSerialTransition := gvl.cylinderControls[Cy16].Execute(eCylinderCommands.COMMAND_B);
		ELSIF commStartRegularCheckMode THEN
			NextState := 16#300;
		END_IF
		
		IF bSerialTransition THEN
			
			THIS^.TurnDryRun(commIsDryRun); //activate dry run
			
			IF commStartTrialAssemble THEN
				gvl.cylinderControls[Cy6].isShutVerification := TRUE;
			END_IF
			IF commStartTrialSnap THEN	
				//--------------
				//	Turn off AOI
				//--------------
				aoi^.bIsBypassed := TRUE;
			END_IF
			
			THIS^.TurnRackIdleDetection(TRUE);
			
			//-------------------
			//speed factor renew
			//-------------------
			scara1^.context_out_speedFactor := commSpeedFactor;
			scara2^.context_out_speedFactor := commSpeedFactor;
		
			NextState := 16#1000;
		END_IF
		
	//------------------------
	//Working
	//------------------------
	16#300:
		//----------------------------------
		//	Regular check mode
		//	1. Stand-along check SCARA1/SCARA2
		//	1. Bypass some stations then feed-in parts in Slot1 , then transit to AOI
		//  2. Prompt meesage/door interlock
		//----------------------------------
		scara1^.isTaskEngaged := TRUE;
		
		clamper1^.bIsBypassed := TRUE;
		clamper2^.bIsBypassed := TRUE;
		
		bSerialTransition := TRUE;
	16#301:
		bSerialTransition := NOT scara1^.isTaskEngaged;
		IF bSerialTransition THEN
			scara2^.isTaskEngaged := TRUE;
		END_IF
	16#302:
		bSerialTransition := NOT scara2^.isTaskEngaged;
		IF bSerialTransition THEN
			commStartRegularCheckMode := false;
		END_IF
		//------------------------
		//AOI shuffing test
		//------------------------
	
		//---------------------------
		//	Purging chain
		//---------------------------
	16#1000:
		bSerialTransition := isPurged; //would be triggered by interfaceControl
	16#1000:
		bSerialTransition := scara2^.context_out_perNodePurged2.0;
		IF bSerialTransition THEN
			THIS^.isPurged := FALSE; //going to reset
		END_IF
	16#1002:
		bSerialTransition := NOT scara2^.context_out_perNodePurged2.0 ;
		IF bSerialTransition THEN
			FOR nCounter:=0 TO 3 BY 1 DO
				racks[nCounter]^.commEject := TRUE; //eject
			END_FOR	
		
			commStartProductionMode := FALSE;
			commStartTrialAssemble:= FALSE;
			commStartTrialSnap :=FALSE;
			
			NextState := eSpecialStates.GENERIC_GROUP_IDLE;
		END_IF		
END_CASE


]]></ST>
    </Implementation>
    <Action Name="ActivateBreakers" Id="{93a2c463-6878-45a2-8e7f-aa67bfe411c0}">
      <Implementation>
        <ST><![CDATA[backSecureBreaker := TRUE;
filterBreaker := TRUE;
timerBreak.IN := TRUE;]]></ST>
      </Implementation>
    </Action>
    <Action Name="InactivateBreakers" Id="{706ff647-c785-4b6a-9f16-bb1bc74a41fe}">
      <Implementation>
        <ST><![CDATA[backSecureBreaker := FALSE;
filterBreaker := FALSE;
timerBreak.IN := false;]]></ST>
      </Implementation>
    </Action>
    <Method Name="TurnDryRun" Id="{370f1dbe-3fb6-4750-a260-8c1e5a6329a0}">
      <Declaration><![CDATA[METHOD TurnDryRun : BOOL
VAR_INPUT
	isEnabled : bool;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//---------------------------------------------------
//turn off following devices if dry run	(no products)
//---------------------------------------------------
FOR nCounter:=0 TO 7 DO
	IF dryRunDevicesList[nCounter]<>0 THEN
		dryRunDevicesList[nCounter]^.isShutVerification := isEnabled;
	END_IF	
END_FOR
loader^.isSlotValidOverride := isEnabled;
aoi^.bIsBypassed := isEnabled;
scara1^.context_out_isDryRun.0 := isEnabled;
scara2^.context_out_isDryRun.0 := isEnabled;
IF isEnabled THEN
	gvl.cylinderControls[Cy16].Execute(eCylinderCommands.COMMAND_B);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TurnRackIdleDetection" Id="{470ad944-b4ac-4565-8ea7-fdec4ed01d4b}">
      <Declaration><![CDATA[METHOD TurnRackIdleDetection : BOOL
VAR_INPUT
	value : bool;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR nCounter:=0 TO 3 BY 1 DO
	IF racks[nCounter] <>0 THEN
		racks[nCounter]^.isIdleDetection := value;
	END_IF		
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="TurnVerifyVacuums" Id="{aa2d0e34-9f20-4a77-a93c-86b863ba07fd}">
      <Declaration><![CDATA[METHOD TurnVerifyVacuums : BOOL
VAR_INPUT
	command : eCylinderCommands;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TurnVerifyVacuums := FALSE; //return , true : none of vacuum generated,  false : any of vacuum generated
FOR nCounter:=0 TO 6 BY 1 DO
	IF gvl.verifyVacuums[nCounter]<>0 THEN
		TurnVerifyVacuums := TurnVerifyVacuums OR gvl.verifyVacuums[nCounter]^.Execute(command);
	END_IF	
END_FOR

CASE command OF
	eCylinderCommands.COMMAND_B:
		timerBreak.IN := TRUE;
	eCylinderCommands.COMMAND_A:
		timerBreak.IN := FALSE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="RunCoordinator">
      <LineId Id="1209" Count="5" />
      <LineId Id="1760" Count="0" />
      <LineId Id="1215" Count="26" />
      <LineId Id="1446" Count="2" />
      <LineId Id="1450" Count="2" />
      <LineId Id="1536" Count="0" />
      <LineId Id="1449" Count="0" />
      <LineId Id="1694" Count="0" />
      <LineId Id="1696" Count="0" />
      <LineId Id="1997" Count="0" />
      <LineId Id="1242" Count="0" />
      <LineId Id="1649" Count="2" />
      <LineId Id="1245" Count="6" />
      <LineId Id="1707" Count="0" />
      <LineId Id="1652" Count="1" />
      <LineId Id="1655" Count="0" />
      <LineId Id="1654" Count="0" />
      <LineId Id="1657" Count="3" />
      <LineId Id="1656" Count="0" />
      <LineId Id="1672" Count="1" />
      <LineId Id="1671" Count="0" />
      <LineId Id="1664" Count="0" />
      <LineId Id="1668" Count="0" />
      <LineId Id="1667" Count="0" />
      <LineId Id="1669" Count="0" />
      <LineId Id="1674" Count="0" />
      <LineId Id="1819" Count="0" />
      <LineId Id="1699" Count="1" />
      <LineId Id="1821" Count="2" />
      <LineId Id="1705" Count="1" />
      <LineId Id="1704" Count="0" />
      <LineId Id="1577" Count="0" />
      <LineId Id="1579" Count="3" />
      <LineId Id="1252" Count="0" />
      <LineId Id="1589" Count="1" />
      <LineId Id="1588" Count="0" />
      <LineId Id="1253" Count="0" />
      <LineId Id="1257" Count="11" />
      <LineId Id="2004" Count="1" />
      <LineId Id="1269" Count="31" />
      <LineId Id="1873" Count="1" />
      <LineId Id="1301" Count="13" />
      <LineId Id="1320" Count="1" />
      <LineId Id="1932" Count="0" />
      <LineId Id="1323" Count="5" />
      <LineId Id="1693" Count="0" />
      <LineId Id="1342" Count="0" />
      <LineId Id="1875" Count="0" />
      <LineId Id="1877" Count="1" />
      <LineId Id="1930" Count="0" />
      <LineId Id="1936" Count="2" />
      <LineId Id="1933" Count="1" />
      <LineId Id="1876" Count="0" />
      <LineId Id="1996" Count="0" />
      <LineId Id="1994" Count="0" />
      <LineId Id="1343" Count="34" />
      <LineId Id="1709" Count="0" />
      <LineId Id="1378" Count="0" />
      <LineId Id="1710" Count="0" />
      <LineId Id="1379" Count="5" />
      <LineId Id="1988" Count="1" />
      <LineId Id="1991" Count="1" />
      <LineId Id="1990" Count="0" />
      <LineId Id="1390" Count="15" />
      <LineId Id="897" Count="0" />
    </LineIds>
    <LineIds Name="RunCoordinator.ActivateBreakers">
      <LineId Id="1" Count="2" />
    </LineIds>
    <LineIds Name="RunCoordinator.InactivateBreakers">
      <LineId Id="2" Count="0" />
      <LineId Id="1" Count="0" />
      <LineId Id="3" Count="0" />
    </LineIds>
    <LineIds Name="RunCoordinator.TurnDryRun">
      <LineId Id="7" Count="13" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="RunCoordinator.TurnRackIdleDetection">
      <LineId Id="7" Count="3" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="RunCoordinator.TurnVerifyVacuums">
      <LineId Id="15" Count="0" />
      <LineId Id="7" Count="3" />
      <LineId Id="5" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="20" Count="2" />
      <LineId Id="19" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>