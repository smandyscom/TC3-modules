<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="RunCommonRack" Id="{eac928e2-459d-4027-a156-266e564c65fe}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunCommonRack EXTENDS RunUnitGeneric
VAR_INPUT
	//isEject : BOOL; //link to coordinator
	commEject AT%M* : BOOL; // link to HMI
	isIdleDetection : BOOL;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	
	button : POINTER TO RunSignal ;
	fixer : POINTER TO RunCylinder;
	approx : POINTER TO RunSignal; // approx then lock
	
	signal : ProgrammedOutput;
	//---------------------------------
	//	Over Fieldbus linked with SCARA
	//---------------------------------
	rackReady AT%Q*: BOOL;
	rackEngaged AT%I*: BOOL;	

	items : ARRAY[0..4] OF defItem;
	
	//---------------------------------
	//	Internal
	//---------------------------------
	nCounter : INT;
END_VAR
VAR_STAT PERSISTENT
	Bounds : ARRAY[0..4] OF BYTE;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
//Control the working flow of rack

SUPER^();
signal();

IF NOT rackReady AND NOT approx^.debouncedOn THEN
	signal.Activate(0);//100% set light flicking
ELSIF NOT rackReady AND  approx^.debouncedOn THEN
	signal.Activate(2);//25% flicking
ELSIF rackReady THEN
	signal.Deactivate();
END_IF

IF button^.onTimeElapsed > T#2S THEN
	commEject := TRUE;
END_IF

CASE outputState OF
	//----------------
	//	Initialization
	//----------------
	eSpecialStates.INITIAL_BEGIN:
		
		NextState:=eSpecialStates.INITIAL_END;
	//-----------------
	//	Working
	//-----------------
	eSpecialStates.GENERIC_GROUP_START:
		//make sure all counter reseted by SCARA
		bSerialTransition := TRUE;
		FOR nCounter := 0 TO 4 DO
			bSerialTransition := bSerialTransition AND (items[nCounter].CurrerntIndex = 0);
		END_FOR
	16#1:
		//rack is empty
		rackReady := FALSE; //released
		commEject := FALSE;
		bSerialTransition := fixer^.Execute(eCylinderCommands.COMMAND_A)AND button^.debouncedOff; //relase
		
	16#2:
		bSerialTransition := approx^.debouncedOn AND button^.onTimeElapsed > T#100MS; //wait until rack closed
		IF approx^.debouncedOn THEN
			
			timeouttimer.IN := TRUE;
		END_IF
		IF approx^.debouncedOn AND NOT bSerialTransition  AND timeouttimer.Q AND isIdleDetection THEN
			AlarmCode := eErrorReasons.ERR_IDLE;
			isWarning := TRUE;
		END_IF
		IF bSerialTransition THEN
			timeouttimer.IN := FALSE; //leave with reset
		END_IF
	16#3:
		bSerialTransition := fixer^.Execute(eCylinderCommands.COMMAND_B); //lock
		IF bSerialTransition THEN
			
			rackReady := TRUE;
		END_IF
	16#4:
		//------------------------------------------------------------------
		//	Check if any item reached the bound. then set rackReady as false
		// or by external signal (manual or job stop)
		//------------------------------------------------------------------
		FOR nCounter := 0 TO 4 DO
			IF items[nCounter].CurrerntIndex > Bounds[nCounter] THEN
				bSerialTransition := TRUE;	
			END_IF
		END_FOR
		bSerialTransition := bSerialTransition OR  commEject ;
		
		IF bSerialTransition THEN
			rackReady := FALSE; //released
		END_IF
	16#5:
		//wait until SCARA disengaged
		IF NOT rackEngaged THEN
			NextState := eSpecialStates.GENERIC_GROUP_START; //rewind
		END_IF
END_CASE

]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{cdcb6566-3495-422b-9f0f-68d1a83249c2}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	argParent : POINTER TO RunUnitGeneric;
	argSlotBase : POINTER TO RunMaterial;
	argSlotLast : POINTER TO RunMaterial;
	
	argButton : POINTER TO RunSignal ;
	argFixer : POINTER TO RunCylinder;
	argApprox : POINTER TO RunSignal; 
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//initialize 
Parent := argParent;
SlotBase := argSlotBase;
SlotLast := argSlotLast;
//
IF bInitRetains THEN
	NextState := eSpecialStates.INITIAL_BEGIN;
END_IF

IF Bounds[0] = 0 THEN
	//initialize bounds
	Bounds[0] := 84;
	Bounds[1] := 84;
	Bounds[2] := 72;
	Bounds[3] := 40;
	Bounds[4] := 40;
END_IF

button :=argButton;
fixer :=argFixer;
approx :=argApprox;

]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="RunCommonRack">
      <LineId Id="299" Count="4" />
      <LineId Id="629" Count="1" />
      <LineId Id="635" Count="0" />
      <LineId Id="631" Count="0" />
      <LineId Id="636" Count="0" />
      <LineId Id="633" Count="1" />
      <LineId Id="632" Count="0" />
      <LineId Id="520" Count="3" />
      <LineId Id="519" Count="0" />
      <LineId Id="304" Count="4" />
      <LineId Id="513" Count="0" />
      <LineId Id="478" Count="0" />
      <LineId Id="318" Count="2" />
      <LineId Id="554" Count="0" />
      <LineId Id="562" Count="0" />
      <LineId Id="560" Count="0" />
      <LineId Id="556" Count="0" />
      <LineId Id="561" Count="0" />
      <LineId Id="555" Count="0" />
      <LineId Id="321" Count="1" />
      <LineId Id="477" Count="0" />
      <LineId Id="514" Count="0" />
      <LineId Id="323" Count="3" />
      <LineId Id="415" Count="1" />
      <LineId Id="595" Count="0" />
      <LineId Id="417" Count="0" />
      <LineId Id="592" Count="1" />
      <LineId Id="599" Count="0" />
      <LineId Id="594" Count="0" />
      <LineId Id="596" Count="2" />
      <LineId Id="331" Count="2" />
      <LineId Id="553" Count="0" />
      <LineId Id="334" Count="9" />
      <LineId Id="345" Count="11" />
      <LineId Id="21" Count="0" />
      <LineId Id="387" Count="0" />
      <LineId Id="447" Count="0" />
    </LineIds>
    <LineIds Name="RunCommonRack.FB_init">
      <LineId Id="43" Count="0" />
      <LineId Id="10" Count="1" />
      <LineId Id="41" Count="0" />
      <LineId Id="53" Count="3" />
      <LineId Id="88" Count="2" />
      <LineId Id="92" Count="4" />
      <LineId Id="91" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="72" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>