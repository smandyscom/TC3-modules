<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="RunLoading" Id="{0885f03e-fd54-45c2-8cc3-34c2d157a6e9}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunLoading EXTENDS RunUnitSlave
VAR_INPUT
	externalSlotValid  : BOOL;
	isSlotValidOverride : BOOL; //eniginnering use , dry run
END_VAR
VAR_OUTPUT
END_VAR
VAR	
	existence : POINTER TO RunSignal;
	
	purgeRequest AT%Q* : BOOL; //link to SCARA2
	
	watchDog : TON;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^();

//-------------------------------
//	Slot-1 to loading bottom part
//-------------------------------

CASE outputState OF
	eSpecialStates.INITIAL_BEGIN:
		NextState := eSpecialStates.INITIAL_END;
	//---------------------
	//	Working
	//---------------------
	eSpecialStates.SLAVE_ENTER_PROCEDURE:
		//check if empty
		bSerialTransition := existence^.debouncedOff;
		IF bSerialTransition THEN
			
			IF previousNode<>0 AND_THEN previousNode^.isPurged THEN
				purgeRequest :=TRUE;
			END_IF
			SlotBase^.Valid := FALSE; //always false in beginning
			slaveWorkingSignal[1] := TRUE; // trigger scara to put
		END_IF
	16#201:
		bSerialTransition := NOT slaveWorkingSignal[1]; //scara should set valid before reset working 
		IF bSerialTransition THEN
			SlotBase^.Valid := externalSlotValid OR isSlotValidOverride; //transit
		END_IF
	16#202:
		//check if material status matched sensor status
		bSerialTransition := (SlotBase^.Valid = existence^.debouncedOn) OR isSlotValidOverride;
		IF bSerialTransition AND purgeRequest AND NOT SlotBase^.Valid THEN
			//SCARA2 had received purge request and no longer loading the parts
			isPurged := TRUE;
			watchDog.IN := FALSE;
			
		ELSIF watchDog.Q THEN
			//TODO ,raise alarm
		END_IF
		watchDog.IN := TRUE; //activate
	16#203:
		NextState := eSpecialStates.SLAVE_WORK_DONE;
END_CASE]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{73f2038d-f762-4ac2-a699-acb024b4c517}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	argParent : POINTER TO RunUnitGeneric;
	argSlotBase : POINTER TO RunMaterial;
	argSlotLast : POINTER TO RunMaterial;
	
	argWorkingSignal : POINTER TO BOOL;
	
	argExistence : POINTER TO RunSignal;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//initialize 
Parent := argParent;
SlotBase := argSlotBase;
SlotLast := argSlotLast;
//
IF bInitRetains THEN
	NextState := eSpecialStates.INITIAL_BEGIN;
END_IF

workingSignal := argWorkingSignal; //link

existence := argExistence;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="RunLoading">
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="1" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="43" Count="4" />
      <LineId Id="18" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="24" Count="0" />
      <LineId Id="61" Count="1" />
      <LineId Id="64" Count="1" />
      <LineId Id="63" Count="0" />
      <LineId Id="25" Count="1" />
      <LineId Id="22" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="91" Count="2" />
      <LineId Id="30" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="56" Count="1" />
      <LineId Id="66" Count="0" />
      <LineId Id="100" Count="1" />
      <LineId Id="96" Count="1" />
      <LineId Id="58" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="33" Count="1" />
      <LineId Id="19" Count="0" />
    </LineIds>
    <LineIds Name="RunLoading.FB_init">
      <LineId Id="16" Count="6" />
      <LineId Id="14" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="36" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>