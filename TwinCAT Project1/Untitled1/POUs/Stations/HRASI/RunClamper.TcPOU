<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="RunClamper" Id="{4cfbb8e7-dd19-45d2-8e96-6129406da078}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunClamper EXTENDS RunUnitSlave
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	//devices
	horizon : POINTER TO RunCylinder;
	clamper : POINTER TO RunCylinder;
	//
	configSnap : BOOL; //set true for instance of Snap
	
END_VAR
VAR CONSTANT
	bScaraReady : INT := 1;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^();


CASE outputState OF
	eSpecialStates.SLAVE_ENTER_PROCEDURE:
		IF SlotBase^.Valid THEN
			bSerialTransition := TRUE;
		ELSE
			NextState := 16#205; //bypass
		END_IF
	16#201:
		//Indexer in position , horizonin
		bSerialTransition := horizon^.Execute(eCylinderCommands.COMMAND_B);
	16#201:
		bSerialTransition := clamper^.Execute(eCylinderCommands.COMMAND_B);
	16#202:
		transitionByte.0 := horizon^.Execute(eCylinderCommands.COMMAND_A);
		//----------------------
		//	Snapping fit special 
		//----------------------
		IF configSnap THEN
			transitionByte.1 := clamper^.Execute(eCylinderCommands.COMMAND_A);
		ELSE
			transitionByte.1 := TRUE;	
		END_IF
		
		IF transitionByte := 16#3 THEN
			slaveWorkingSignal[bScaraReady]:= TRUE; //trigger SCARA agent
			bSerialTransition := TRUE;
		END_IF
	16#203:
		//Wait SCARA 
		bSerialTransition := NOT slaveWorkingSignal[bScaraReady];
	16#204:
		//send part back to indexer
		bSerialTransition := horizon^.Execute(eCylinderCommands.COMMAND_B);
	16#205:
		//release part 
		bSerialTransition := clamper^.Execute(eCylinderCommands.COMMAND_A); //release
	16#206:
		//empty clamper extract
		IF horizon^.Execute(eCylinderCommands.COMMAND_A) THEN
			NextState := eSpecialStates.SLAVE_WORK_DONE;
		END_IF
END_CASE]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{37c62737-651a-4f40-81e3-f79b76fcc99a}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	argParent : POINTER TO RunUnitGeneric;
	argSlotBase : POINTER TO RunMaterial;
	argSlotLast : POINTER TO RunMaterial;
	
	argWorkingSignal : POINTER TO BOOL;
	
	argHorizon : POINTER TO RunCylinder;
	argClamper : POINTER TO RunCylinder;
	argConfigSnap : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//initialize 
Parent := argParent;
SlotBase := argSlotBase;
SlotLast := argSlotLast;
//
IF bInitRetains THEN
	NextState := eSpecialStates.INITIAL_BEGIN;
END_IF

workingSignal := argWorkingSignal; //link

//device link
horizon := argHorizon;
clamper := argClamper;
configSnap := argConfigSnap;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="RunClamper">
      <LineId Id="110" Count="4" />
      <LineId Id="170" Count="1" />
      <LineId Id="173" Count="1" />
      <LineId Id="172" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="115" Count="26" />
      <LineId Id="176" Count="0" />
      <LineId Id="146" Count="4" />
      <LineId Id="29" Count="0" />
    </LineIds>
    <LineIds Name="RunClamper.FB_init">
      <LineId Id="16" Count="6" />
      <LineId Id="14" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="40" Count="1" />
      <LineId Id="39" Count="0" />
      <LineId Id="42" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>