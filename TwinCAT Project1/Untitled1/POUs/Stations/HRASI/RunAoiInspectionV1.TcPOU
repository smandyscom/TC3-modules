<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="RunAoiInspectionV1" Id="{7255faf6-adcd-46ad-a421-c808180e9942}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunAoiInspectionV1 EXTENDS RunUnitSlave
VAR_INPUT
	ngBinReady : BOOL;
	ngCounter : POINTER TO UDINT;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	//devices
	ngCylinder : POINTER TO RunCylinder; // normal close cylinder
	
	aoiOut1Done AT%I* : BOOL ; //done
	aoiOut2Grade AT%I* : BOOL ; //ok/ng
	
	aoiTrigger AT%Q* : BOOL;
	//internal
	
	commIdTrigger AT%Q* : DWORD;
	
	//
	serialNGCounter : INT;
END_VAR
VAR PERSISTENT
	serialNGGoal AT%M* : INT ;
END_VAR
VAR CONSTANT
	ERR_CONSECUTIVE_NG : DWORD := 8001;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^();

CASE outputState OF
	//--------------------------------
	//	Initialization TODO, (Light on?)
	//--------------------------------	
	eSpecialStates.INITIAL_BEGIN:	
		bSerialTransition := ngCylinder^.Execute(eCylinderCommands.COMMAND_A);
		IF bSerialTransition THEN
			serialNGCounter := 0;
			aoiTrigger := FALSE;
		END_IF
	eSpecialStates.INITIAL_STATE_1:
		bSerialTransition := NOT aoiOut1Done;
		IF bSerialTransition THEN
			NextState := eSpecialStates.INITIAL_END;
		END_IF
	//---------------------------------
	//	Working
	//---------------------------------
	eSpecialStates.SLAVE_ENTER_PROCEDURE:
		// report id to SCADA?		
		transitionByte.0 := ngCylinder^.Execute(eCylinderCommands.COMMAND_A); //alway extend
		transitionByte.1 := NOT aoiOut1Done; //check aoi-done off
		
		//20200305 , aoi result would retained last status??
		//transitionByte.2 := NOT aoiOut2Grade; //check aoi-result as NG (fuse)
		
		bSerialTransition:= (transitionByte = 16#3);
	16#201:
		IF SlotBase^.Valid THEN
			aoiTrigger := TRUE; //set aoi-trigger on
			atomicOperation := TRUE;
			bSerialTransition := TRUE;
		ELSE
			//no material , leave	
			NextState := 16#205;
		END_IF
	16#202:
		bSerialTransition := aoiOut1Done;
	16#203:
		bSerialTransition := NOT aoiOut1Done;
		IF bSerialTransition THEN 
			atomicOperation := false;
			commIdTrigger := SlotBase^.Id; //trigger the data logger
		END_IF
	16#204:
		//wait aoi-done on
		IF  NOT aoiOut2Grade THEN
			//-------------
			//	NG
			//-------------
			SlotBase^.Valid := FALSE; //set as inexsited
			bSerialTransition:=	ngBinReady;
			
			IF bSerialTransition THEN
				serialNGCounter := serialNGCounter+1;
				IF  serialNGCounter >=  serialNGGoal THEN
					THIS^.AlarmCode := ERR_CONSECUTIVE_NG;
					serialNGCounter := 0; //reset
				END_IF
				
				IF ngCounter<>0 THEN
					ngCounter^ := ngCounter^ +1; //count-up
				END_IF			
			END_IF
						
		ELSIF  aoiOut2Grade THEN
			//--------------
			//	OK 
			//--------------
			bSerialTransition := ngCylinder^.Execute(eCylinderCommands.COMMAND_B); //open gate
			IF bSerialTransition THEN
				serialNGCounter := 0; //reset
			END_IF
		ELSIF bIsBypassed THEN
			bSerialTransition:=	TRUE;
		else
			//--------------------------
			// wait until aoi_done raise
			//--------------------------
		END_IF
	16#205:
		aoiTrigger := FALSE; //reset
		
		IF NOT SlotBase^.Valid AND previousNode <>0 AND_THEN previousNode^.isPurged THEN
			isPurged := true; // i am purged
		END_IF
		
		
		NextState := eSpecialStates.SLAVE_WORK_DONE;
END_CASE]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{0f87af46-5d5f-4c6d-b262-bc2c8522819a}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	argParent : POINTER TO RunUnitGeneric;
	argSlotBase : POINTER TO RunMaterial;
	argSlotLast : POINTER TO RunMaterial;
	
	argWorkingSignal : POINTER TO BOOL;
	
	argNgCylinder : POINTER TO RunCylinder;
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//initialize 
Parent := argParent;
SlotBase := argSlotBase;
SlotLast := argSlotLast;
//
IF bInitRetains THEN
	NextState := eSpecialStates.INITIAL_BEGIN;
END_IF

workingSignal := argWorkingSignal; //link

ngCylinder := argNgCylinder;
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="RunAoiInspectionV1">
      <LineId Id="271" Count="8" />
      <LineId Id="451" Count="0" />
      <LineId Id="280" Count="13" />
      <LineId Id="363" Count="1" />
      <LineId Id="294" Count="5" />
      <LineId Id="509" Count="0" />
      <LineId Id="300" Count="4" />
      <LineId Id="366" Count="3" />
      <LineId Id="424" Count="0" />
      <LineId Id="510" Count="0" />
      <LineId Id="425" Count="1" />
      <LineId Id="305" Count="7" />
      <LineId Id="455" Count="0" />
      <LineId Id="470" Count="0" />
      <LineId Id="473" Count="3" />
      <LineId Id="471" Count="0" />
      <LineId Id="477" Count="0" />
      <LineId Id="479" Count="2" />
      <LineId Id="472" Count="0" />
      <LineId Id="460" Count="0" />
      <LineId Id="313" Count="4" />
      <LineId Id="462" Count="2" />
      <LineId Id="318" Count="0" />
      <LineId Id="361" Count="1" />
      <LineId Id="319" Count="5" />
      <LineId Id="341" Count="1" />
      <LineId Id="344" Count="1" />
      <LineId Id="406" Count="0" />
      <LineId Id="387" Count="0" />
      <LineId Id="325" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="RunAoiInspectionV1.FB_init">
      <LineId Id="16" Count="6" />
      <LineId Id="14" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="40" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>