<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="RunAoiInspectionV1" Id="{7255faf6-adcd-46ad-a421-c808180e9942}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunAoiInspectionV1 EXTENDS RunUnitSlave
VAR_INPUT
	ngBinReady : BOOL;
	ngCounter : POINTER TO UDINT;
	
	productType : BYTE; // input , 0:S 1:V 2: BGSx
	
	statusCoaxial : BYTE;
	statusStripper : BYTE;
	
END_VAR
VAR_OUTPUT
	commandCoaxial : BYTE;
	commandStripper : BYTE;
END_VAR
VAR
	//devices
	ngCylinder : POINTER TO RunCylinder; // normal close cylinder
	
	aoiOut1Done AT%I* : BOOL ; //done , if error comes , this line wont be on
	aoiOut2Grade AT%I* : BOOL ; //ok/ng
	
	aoiTrigger AT%Q* : BOOL;	
	aoiOnline AT%M* : BOOL;
	aoiBGSxEnable AT%Q* : BOOL; // 1: enable BGSx inspection , 0: disenable as regular V-Top
	//internal
	
	commIdTrigger AT%Q* : DWORD;
	
	aoiTimeoutTimer : ton;
	aoiSwitchingTimer : ton;
	aoiOverallGrade : BOOL;
	//
	serialNGCounter : INT;
	
	//
	currentCheck : INT := CHECK_REGULAR;
	targetCheck : INT := CHECK_BGSx;
END_VAR
VAR PERSISTENT
	serialNGGoal AT%M* : INT ;
	
	intensityCoaxial AT%M* : BYTE := 0;
	intensityStrip AT%M* : BYTE := 0;
END_VAR
VAR CONSTANT
	CHECK_REGULAR : INT := 0;
	CHECK_BGSx : INT :=1;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^();

//----------------
//	AOI OFFLINE 
//-----------------
timeouttimer.IN := (NOT  aoiOnline);
IF timeouttimer.Q AND NOT aoiOnline THEN
	AlarmCode:= eErrorReasons.ERR_OFFLINE;
END_IF
aoiTimeoutTimer(PT:= T#30S);
aoiSwitchingTimer(pt :=T#100MS);

CASE outputState OF
	//--------------------------------
	//	Initialization TODO, (Light on?)
	//--------------------------------	
	eSpecialStates.INITIAL_BEGIN:	
		bSerialTransition := ngCylinder^.Execute(eCylinderCommands.COMMAND_A);
		IF bSerialTransition THEN
			serialNGCounter := 0;
			aoiTrigger := FALSE;
		END_IF
	eSpecialStates.INITIAL_STATE_1:
		bSerialTransition := NOT aoiOut1Done;
		IF bSerialTransition THEN
			NextState := eSpecialStates.INITIAL_END;
		END_IF
	//---------------------------------
	//	Working
	//---------------------------------
	eSpecialStates.SLAVE_ENTER_PROCEDURE:
		// report id to SCADA?		
		transitionByte.0 := ngCylinder^.Execute(eCylinderCommands.COMMAND_A); //alway extend
		transitionByte.1 := NOT aoiOut1Done; //check aoi-done off
		
		bSerialTransition:= (transitionByte = 16#3);
		IF bSerialTransition THEN
			atomicOperation := TRUE;
			aoiOverallGrade := TRUE; //preset
			
			currentCheck := CHECK_REGULAR; //reset
			targetCheck  := CHECK_REGULAR;
			IF productType = 2 THEN
				targetCheck := CHECK_BGSx;
			END_IF
			
			IF NOT bMaterialOverride THEN
				NextState := 16#230; //no material , leave	
			END_IF
		ELSE
			//--------------------------
			//await mechanism switching	
			//--------------------------
		END_IF
	
	//--------------------------------
	//	Cyclic Trigger-Get Result : Start
	//--------------------------------
	16#201:
		IF NOT aoiSwitchingTimer.IN THEN
			aoiSwitchingTimer.IN := TRUE;
		END_IF
		
	
		CASE currentCheck OF
			CHECK_REGULAR :
				aoiBGSxEnable := FALSE;
				bSerialTransition := THIS^.switchDimmer(TRUE,FALSE) AND aoiSwitchingTimer.Q; // turn coaxial on , strip off
			CHECK_BGSx :
				aoiBGSxEnable := TRUE;
				bSerialTransition := THIS^.switchDimmer(FALSE,TRUE) AND aoiSwitchingTimer.Q; // turn coaxial off , strip on
		END_CASE
	
		IF bSerialTransition THEN
			aoiTrigger := TRUE; //set aoi-trigger on
			aoiTimeoutTimer.IN := TRUE;
			aoiSwitchingTimer.IN := FALSE; //reset for re-enter
		ELSE
			//await dimmer switching
		END_IF
		
	16#202:
		bSerialTransition := aoiOut1Done OR aoiTimeoutTimer.Q;
		IF aoiTimeoutTimer.Q THEN
			AlarmCode := eErrorReasons.ERR_PART_MISSING;
			aoiOverallGrade := FALSE; // once timeout , should be set as NG to be safe
		END_IF
		IF bSerialTransition THEN
			aoiTrigger := FALSE; //reset
		END_IF
	16#203:
		bSerialTransition := NOT aoiOut1Done;
		IF bSerialTransition THEN 
			
			aoiTimeoutTimer.IN := FALSE; //reset
			aoiOverallGrade := aoiOverallGrade AND aoiOut2Grade; // inclusive
			
			IF currentCheck = targetCheck THEN
				atomicOperation := FALSE;
				nextstate := 16#220;			  // conclude and output
			ELSE
				currentCheck := currentCheck +1 ; // do next check
				nextstate := 16#201;
			END_IF
		END_IF
	//--------------------------------
	//	Cyclic Trigger-Get Result : End
	//--------------------------------
	
	
		//-------------------------
		//	Output
		//-------------------------
	16#220:
		IF commIdTrigger <> SlotBase^.Id THEN
			commIdTrigger := SlotBase^.Id; //trigger the data logger
		END_IF
		
		//--------------------------
		//	OK : open gate
		//	NG : await until NG bin ready
		//--------------------------
		bSerialTransition := (aoiOverallGrade AND_THEN ngCylinder^.Execute(eCylinderCommands.COMMAND_B)) 
							OR ( (NOT aoiOverallGrade) AND_THEN ngBinReady);
		
		IF bSerialTransition THEN
			nextstate := 16#230;
			
			//-------------------------
			//	Data handling and warning
			//-------------------------
			IF aoiOverallGrade THEN
				serialNGCounter := 0; //reset
			ELSE
				SlotBase^.Valid := FALSE; //set as inexsited	
				serialNGCounter := serialNGCounter+1;
				IF  serialNGCounter >=  serialNGGoal THEN
					AlarmCode := eErrorReasons.ERR_CONSECUTIVE_NG;
					serialNGCounter := 0; //reset
				END_IF
				
				IF ngCounter<>0 THEN
					ngCounter^ := ngCounter^ +1; //count-up NG bin counter
				END_IF		
			END_IF
		ELSE
			//await machansim working
		END_IF
		//-------------------------
		// Task closed
		//------------------------	
	16#230:
			
		IF NOT SlotBase^.Valid AND previousNode <>0 AND_THEN previousNode^.isPurged THEN
			isPurged := true; // i am purged
		END_IF
			
		NextState := eSpecialStates.SLAVE_WORK_DONE;
END_CASE]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{0f87af46-5d5f-4c6d-b262-bc2c8522819a}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	argParent : POINTER TO RunUnitGeneric;
	argSlotBase : POINTER TO RunMaterial;
	argSlotLast : POINTER TO RunMaterial;
	
	argWorkingSignal : POINTER TO BOOL;
	
	argNgCylinder : POINTER TO RunCylinder;
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//initialize 
Parent := argParent;
SlotBase := argSlotBase;
SlotLast := argSlotLast;
//
IF bInitRetains THEN
	NextState := eSpecialStates.INITIAL_BEGIN;
END_IF

workingSignal := argWorkingSignal; //link

ngCylinder := argNgCylinder;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="switchDimmer" Id="{42412d7e-0abc-04d1-36f3-38dfcdb4eb06}">
      <Declaration><![CDATA[METHOD switchDimmer : BOOL
VAR_INPUT
	enableCoaxial : BOOL;
	enableStrip : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF enableCoaxial THEN
	commandCoaxial := intensityCoaxial;
ELSE
	commandCoaxial := 0;
END_IF

IF enableStrip THEN
	commandStripper := intensityStrip;
ELSE
	commandStripper := 0;
END_IF


//when status matched command means matched
switchDimmer := (commandCoaxial = statusCoaxial) AND (commandStripper = statusStripper);]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="RunAoiInspectionV1">
      <LineId Id="1223" Count="9" />
      <LineId Id="1363" Count="0" />
      <LineId Id="1233" Count="22" />
      <LineId Id="1257" Count="0" />
      <LineId Id="1262" Count="2" />
      <LineId Id="1518" Count="0" />
      <LineId Id="1364" Count="0" />
      <LineId Id="1416" Count="3" />
      <LineId Id="1415" Count="0" />
      <LineId Id="1353" Count="0" />
      <LineId Id="1355" Count="0" />
      <LineId Id="1358" Count="0" />
      <LineId Id="1357" Count="0" />
      <LineId Id="1354" Count="0" />
      <LineId Id="1413" Count="0" />
      <LineId Id="1359" Count="0" />
      <LineId Id="1414" Count="0" />
      <LineId Id="1265" Count="1" />
      <LineId Id="1429" Count="2" />
      <LineId Id="1267" Count="0" />
      <LineId Id="1365" Count="0" />
      <LineId Id="1367" Count="1" />
      <LineId Id="1456" Count="0" />
      <LineId Id="1366" Count="0" />
      <LineId Id="1332" Count="0" />
      <LineId Id="1334" Count="0" />
      <LineId Id="1361" Count="0" />
      <LineId Id="1337" Count="0" />
      <LineId Id="1336" Count="0" />
      <LineId Id="1360" Count="0" />
      <LineId Id="1338" Count="0" />
      <LineId Id="1335" Count="0" />
      <LineId Id="1333" Count="0" />
      <LineId Id="1341" Count="0" />
      <LineId Id="1345" Count="1" />
      <LineId Id="1369" Count="0" />
      <LineId Id="1351" Count="1" />
      <LineId Id="1343" Count="0" />
      <LineId Id="1275" Count="4" />
      <LineId Id="1458" Count="0" />
      <LineId Id="1281" Count="0" />
      <LineId Id="1572" Count="2" />
      <LineId Id="1282" Count="2" />
      <LineId Id="1519" Count="0" />
      <LineId Id="1285" Count="0" />
      <LineId Id="1420" Count="0" />
      <LineId Id="1459" Count="0" />
      <LineId Id="1421" Count="0" />
      <LineId Id="1435" Count="0" />
      <LineId Id="1422" Count="0" />
      <LineId Id="1424" Count="1" />
      <LineId Id="1467" Count="0" />
      <LineId Id="1423" Count="0" />
      <LineId Id="1287" Count="0" />
      <LineId Id="1433" Count="1" />
      <LineId Id="1432" Count="0" />
      <LineId Id="1321" Count="0" />
      <LineId Id="1370" Count="0" />
      <LineId Id="1374" Count="0" />
      <LineId Id="1376" Count="1" />
      <LineId Id="1375" Count="0" />
      <LineId Id="1392" Count="0" />
      <LineId Id="1395" Count="0" />
      <LineId Id="1394" Count="0" />
      <LineId Id="1390" Count="0" />
      <LineId Id="1463" Count="2" />
      <LineId Id="1461" Count="0" />
      <LineId Id="1460" Count="0" />
      <LineId Id="1468" Count="0" />
      <LineId Id="1380" Count="0" />
      <LineId Id="1426" Count="1" />
      <LineId Id="1436" Count="0" />
      <LineId Id="1452" Count="2" />
      <LineId Id="1437" Count="0" />
      <LineId Id="1442" Count="0" />
      <LineId Id="1439" Count="0" />
      <LineId Id="1441" Count="0" />
      <LineId Id="1444" Count="7" />
      <LineId Id="1443" Count="0" />
      <LineId Id="1440" Count="0" />
      <LineId Id="1438" Count="0" />
      <LineId Id="1466" Count="0" />
      <LineId Id="1428" Count="0" />
      <LineId Id="1371" Count="2" />
      <LineId Id="1322" Count="0" />
      <LineId Id="1324" Count="0" />
      <LineId Id="1326" Count="3" />
      <LineId Id="1331" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="RunAoiInspectionV1.FB_init">
      <LineId Id="16" Count="6" />
      <LineId Id="14" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="40" Count="0" />
    </LineIds>
    <LineIds Name="RunAoiInspectionV1.switchDimmer">
      <LineId Id="5" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="19" Count="0" />
      <LineId Id="18" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>