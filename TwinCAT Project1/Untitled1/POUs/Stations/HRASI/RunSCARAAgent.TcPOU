<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="RunScaraAgent" Id="{1f4adf83-c440-4f87-8ce9-122caf9d3620}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunScaraAgent EXTENDS RunUnitGeneric
VAR_INPUT
	isTaskEngaged : BOOL;		//triggered by coordinator , reset by myself
	//-------------------
	// Remote control - Input
	//-------------------
	out_start_0 AT %Q* : BIT;
	out_selProg1_1 AT%Q* : BIT;
	out_selProg2_2 AT%Q* : BIT;
	out_selProg4_3 AT%Q* : BIT;
	
	out_stop_4 AT%Q* :BIT; //foced stop, not recommend to use
	
	out_pause_5 AT%Q* : BIT;		
	out_continue_6 AT%Q* : BIT;
	
	out_reset_7 AT%Q* : BIT; 	//error reset
	//------------------
	//	CONTEXT 
	//------------------
	context_out_alarmAck AT%Q* : WORD;
	context_out_purgeReq AT%Q* : BYTE;	// the purge request
	context_out_productType AT%Q* : BYTE;
	context_out_isSlotValid AT%Q* : BYTE;
	context_out_perNodePurged AT%Q* : BYTE;
	
	
END_VAR
VAR_OUTPUT
	//-------------------
	// Remote control - Output
	//-------------------
	in_ready_0 AT%I* : BIT; //Turns ON when the controller startup completes and no task is running. 
	in_running_1 AT%I* : BIT; //Turns ON when task is running. However, turns OFF when “Paused output” is ON. 
	in_paused_2 AT%I* : BIT; //
	in_error_3 AT%I* : BIT;
	in_eStop_4 AT%I* : BIT;		//as EDM
	in_safeGuard_5 AT%I* : BIT;	//as EDM to safeguard
	in_sError_6 AT%I* : BIT;
	in_warning_7 AT%I* : BIT;
	//------------------
	//	CONTEXT 
	//------------------
	context_in_alarmCode AT%I* : WORD;
	context_in_stopack AT%I* : BYTE;
	context_in_taskState AT%I* : BYTE;
	
	context_in_setSlotValid AT%I* : BYTE;
END_VAR
VAR CONSTANT
	taskInit : UINT := 1;
	taskAssembly : UINT :=2;
	taskSnipFit : UINT :=3;
	taskRegularCheck : UINT :=3;
	
	taskEngCalibration : UINT :=4;
	taskEngPickAndDrip : UINT:=5;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//mission:
//2. sequence start/stop as Remote I/O

//Select Program first then Start
//Stop program

//Pause program
//Continue when ready on

SUPER^();


//transmit purged status
context_out_perNodePurged.0 := previousNode<>0 AND_THEN previousNode^.isPurged;
context_out_isSlotValid.0 := SlotLast<>0 AND_THEN SlotLast^.Valid;
IF SlotBase<>0 THEN
	SlotBase^.Valid := context_in_setSlotValid.0;
END_IF
IF NOT isTaskEngaged AND previousNode<>0 AND_THEN previousNode^.isPurged THEN
	isPurged := TRUE;
END_IF

//----------------------
//	Task running control
//----------------------
IF bPause AND NOT in_paused_2 THEN
	out_pause_5 := TRUE;
ELSIF NOT bPause AND in_paused_2 THEN
	out_continue_6 := TRUE;
ELSE
	out_pause_5 := FALSE;
	out_continue_6 := FALSE;
END_IF

IF out_reset_7 AND NOT in_error_3 THEN
	out_reset_7 := FALSE;
END_IF

CASE outputState OF 	
	eSpecialStates.INITIAL_BEGIN:		
		out_start_0 := FALSE;
		out_stop_4 := TRUE;
		out_pause_5 := FALSE;
		out_continue_6 := FALSE;
		bSerialTransition := TRUE;
	//----------------
	//Check no running
	//----------------
	eSpecialStates.INITIAL_STATE_1:
		bSerialTransition := NOT in_running_1;
		IF bSerialTransition THEN
			out_stop_4 := FALSE; //release
		END_IF
	//--------------
	//Check no error and ready
	//--------------
	eSpecialStates.INITIAL_STATE_2:
		bSerialTransition := (NOT in_error_3) AND in_ready_0;
		IF bSerialTransition THEN
			//initializing process activated
			PropTask := eSCARATask.task_init;
			out_start_0 := TRUE;
		END_IF
	//Start initializing , Check running
	eSpecialStates.INITIAL_STATE_3:
		bSerialTransition := in_running_1;
		IF bSerialTransition THEN
			//initializing process activated
			PropTask := eSCARATask.task_init;
			out_start_0 := FALSE;
		END_IF
	//Start initializing, Check ran
	eSpecialStates.INITIAL_STATE_4:
		bSerialTransition := in_ready_0;
		IF bSerialTransition THEN
			out_start_0 := FALSE;
			NextState := eSpecialStates.INITIAL_END;
		END_IF
	//-------------------------------
	// IDLE/Program selection states.
	//------------------------------
	eSpecialStates.GENERIC_GROUP_START:
		//--------------
		// Program selected and triggered
		//--------------
		bSerialTransition := isTaskEngaged;
		IF bSerialTransition THEN
			out_start_0 := TRUE;
		END_IF
	16#1:
		bSerialTransition := in_running_1;
		IF bSerialTransition THEN
			out_start_0 := FALSE;
			NextState := 16#200;
		END_IF
		//------------------------------------------------------------------
		// Operating
		//------------------------------------------------------------------
	16#200:
		//task finished natually or request purge from previous node
		bSerialTransition := NOT in_running_1 AND in_ready_0;
		IF bSerialTransition THEN
			//succesfully stopped
			isTaskEngaged := FALSE;
			NextState := eSpecialStates.GENERIC_GROUP_START;
		END_IF	
END_CASE]]></ST>
    </Implementation>
    <Folder Name="CommonBase" Id="{8c2df53f-cc6d-4e3c-9b33-f2759249f7d5}" />
    <Method Name="ConfigureRead" Id="{0eacf177-2b75-49e1-b06a-5ff2158f3974}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD ConfigureRead : CellDataBlock
VAR_INPUT
	input : CellDataBlock; //would offer sub-index ...etc
	mode : eModes;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="ConfigureWrite" Id="{ce7cfd7f-b9d8-4c0d-919e-2e8a95018cdd}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD ConfigureWrite : BOOL
VAR_INPUT
	input : CellDataBlock;
	mode : eModes;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Implemented by concre derived class
ConfigureWrite := true;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Control" Id="{6b8b504d-9bc1-4e63-aea6-7305b4d68d76}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD Control : BOOL
VAR_INPUT
	input : CellDataBlock;
	mode : eModes; //commit mode
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bEnStep := input.unit.base.controlWord.bit0EnStep;
bTrigStep := input.unit.base.controlWord.bit1TrigStep;
bPause := input.unit.base.controlWord.bit2StatePause;
bIsBypassed := input.unit.base.controlWord.bit3IsBypassed;
bWorkingOverride := input.unit.base.controlWord.bit4WorkingOverride;
bMaterialOverride := input.unit.base.controlWord.bit5MaterialOverride;
Control:=true;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ErrorClear" Id="{f462e33e-113a-4bab-9083-d7f7df268290}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD ErrorClear : BOOL
VAR_INPUT
	input : eErrorClearWays;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//context_out_alarmAck := 0; // ack reset
out_reset_7 := true;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ErrorDetect" Id="{0d501c3c-1258-4947-b465-528162d76fdd}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD ErrorDetect : UDINT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//ErrorDetect := context_in_alarmCode;

//IF context_in_alarmCode <> 0 THEN
//	context_out_alarmAck := context_in_alarmCode;
//END_IF

IF in_error_3 OR in_error_3 THEN
	ErrorDetect := context_in_alarmCode;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Monitor" Id="{bff2329b-af0a-4b0e-a719-df2270726c4b}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD Monitor : CellDataBlock
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Monitor.unit.base.controlWord.bit0EnStep := bEnStep;
Monitor.unit.base.controlWord.bit1TrigStep := bTrigStep;
Monitor.unit.base.controlWord.bit2StatePause := bPause;
Monitor.unit.base.controlWord.bit3IsBypassed := bIsBypassed;
Monitor.unit.base.controlWord.bit4WorkingOverride := bWorkingOverride;
Monitor.unit.base.controlWord.bit5MaterialOverride := bMaterialOverride;
//Transition status
Monitor.unit.base.transitionByte := transitionByte;
//
Monitor.unit.base.alarmCode := TO_WORD(AlarmCode);

//reflect task state instead
Monitor.unit.base.state := TO_WORD(THIS^.context_in_taskState);
Monitor.unit.base.nextState := TO_WORD(THIS^.context_in_taskState);

//
IF workingTimer.IN THEN
	//timer is running , reflect real value
	Monitor.unit.base.workingTimerCache := TO_DWORD(workingTimer.ET);
ELSE
	//timer is stopped , reflect cached value
	Monitor.unit.base.workingTimerCache := TO_DWORD(workingTimerCache);
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Property Name="PropTask" Id="{7faedeae-5728-4277-9efc-190d87695f5c}">
      <Declaration><![CDATA[PROPERTY PUBLIC PropTask : eSCARATask]]></Declaration>
      <Get Name="Get" Id="{79035dc7-b9d3-4ed1-a28c-0a67822bb203}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[
PropTask.0 := out_selProg1_1;
PropTask.1 := out_selProg2_2;
PropTask.2 := out_selProg4_3;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{15f14b1d-23d8-4a5f-8f4b-150b21744701}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[out_selProg1_1 := ((PropTask AND 16#01) > 0);
out_selProg2_2 := ((PropTask AND 16#02) > 0);
out_selProg4_3 := ((PropTask AND 16#04) > 0);]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="TypeCode" Id="{64dae203-ab2b-41a6-88c7-848614dc4389}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD TypeCode : eCategrories
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TypeCode := eCategrories.SELECTION_UNIT;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="RunScaraAgent">
      <LineId Id="4644" Count="13" />
      <LineId Id="4809" Count="1" />
      <LineId Id="4812" Count="1" />
      <LineId Id="4811" Count="0" />
      <LineId Id="4814" Count="1" />
      <LineId Id="4658" Count="75" />
      <LineId Id="4735" Count="0" />
      <LineId Id="4742" Count="0" />
      <LineId Id="4816" Count="0" />
      <LineId Id="4743" Count="5" />
      <LineId Id="437" Count="0" />
    </LineIds>
    <LineIds Name="RunScaraAgent.ConfigureRead">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="RunScaraAgent.ConfigureWrite">
      <LineId Id="5" Count="0" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="RunScaraAgent.Control">
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="2" />
      <LineId Id="27" Count="0" />
      <LineId Id="17" Count="1" />
    </LineIds>
    <LineIds Name="RunScaraAgent.ErrorClear">
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="RunScaraAgent.ErrorDetect">
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="1" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="18" Count="1" />
    </LineIds>
    <LineIds Name="RunScaraAgent.Monitor">
      <LineId Id="9" Count="4" />
      <LineId Id="5" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="38" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="30" Count="2" />
      <LineId Id="28" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="16" Count="0" />
    </LineIds>
    <LineIds Name="RunScaraAgent.PropTask.Get">
      <LineId Id="8" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="9" Count="1" />
    </LineIds>
    <LineIds Name="RunScaraAgent.PropTask.Set">
      <LineId Id="5" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="RunScaraAgent.TypeCode">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>