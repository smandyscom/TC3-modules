<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="RunScaraAgent" Id="{1f4adf83-c440-4f87-8ce9-122caf9d3620}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunScaraAgent EXTENDS RunUnitGeneric
VAR_INPUT
	stop at%Q* : BOOL;
	start : BOOL;
	programId : UINT;
END_VAR
VAR_OUTPUT
END_VAR
VAR	
	
//	outputs AT%Q* : ARRAY[0..3] OF BOOL; //TODO ,vacuum break

	//-------------------
	// Remote control - Input
	//-------------------
	start_0 AT %Q* : BOOL;
	selProg1_1 AT%Q* : BOOL;
	selProg2_2 AT%Q* : BOOL;
	selProg4_3 AT%Q* : BOOL;
	stop_4 AT%Q* :BOOL;
	pause_5 AT%Q* : BOOL;
	continue_6 AT%Q* : BOOL;
	reset_7 AT%Q* : BOOL; 
	//-------------------
	// Remote control - Output
	//-------------------
	ready_0 AT%I* : BOOL; //Turns ON when the controller startup completes and no task is running. 
	running_1 AT%I* : BOOL; //Turns ON when task is running. However, turns OFF when “Paused output” is ON. 
	paused_2 AT%I* : BOOL; //
	error_3 AT%I* : BOOL;
	eStop_4 AT%I* : BOOL;
	safeGuard_5 AT%I* : BOOL;
	sError_6 AT%I* : BOOL;
	warning_7 AT%I* : BOOL;
	//------------------
	//	User - input
	//------------------
	
	//------------------
	//	User - output 
	//------------------
	alarmCode_ AT%I* : WORD;
	alarmAck AT%Q* : WORD;
	
	stopReq AT%Q* : WORD;
	
	programState AT%I* : WORD;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
//control handshaking signal to slaveworkingSignal
//mission:
//2. sequence start/stop as Remote I/O


//Select Program first then Start
//Stop program

//Pause program
//Continue when ready on

SUPER^();

CASE outputState OF 
	eSpecialStates.INITIAL_BEGIN:
		//reset all signals , await SCARA comes into Ready State
		start_0 := FALSE;
		stop_4 := TRUE;
		pause_5 := FALSE;
		continue_6 := FALSE;
		bSerialTransition := TRUE;
	eSpecialStates.INITIAL_STATE_1:
		bSerialTransition := ready_0;
		reset_7 := bSerialTransition; //reset errors
		stop_4 := NOT bSerialTransition; //release
	eSpecialStates.INITIAL_STATE_2:
		//no error check
		IF NOT error_3 THEN
			reset_7:=FALSE;
			NextState :=  eSpecialStates.INITIAL_END;
		END_IF
	//-------------------------------
	// IDLE/Program selection states.
	//------------------------------
	16#200:
		//--------------
		// Program selected and triggered
		//--------------
		bSerialTransition := start;
		IF bSerialTransition THEN
			atomicOperation := TRUE;
			
			start := FALSE;
			selProg1_1 := ((programId AND 16#01) > 0);
			selProg2_2 := ((programId AND 16#02) > 0);
			selProg4_3 := ((programId AND 16#04) > 0);
			
		END_IF
	16#201:
		start_0 := TRUE;
		bSerialTransition := running_1;
		atomicOperation := NOT bSerialTransition; //lock until running sucessed
	16#202:
		//------------------------------------------------------------------
		// Operating
		//accept stop command only when programState in some specific state
		//------------------------------------------------------------------
		bSerialTransition := (programState = 16#FF AND stop);
		IF bSerialTransition THEN
			stop := FALSE; // reset
			stop_4 :=TRUE;
		END_IF
	16#203:
		IF ready_0 THEN
			stop_4:=FALSE;
			NextState := 200;
		END_IF
	
	//Switch over different program
	eSpecialStates.FORBIDDEN:
		IF running_1 THEN
			//only when program is running
			pause_5 := TRUE; //pause current program  
			NextState := 16#300;
		END_IF	
	//------------------------------
	//	Pause state releasing state
	//------------------------------
	16#300:
		bSerialTransition := paused_2;
		IF bSerialTransition THEN
			pause_5 := FALSE;
			continue_6 := TRUE;
		END_IF
	16#301:
		 bSerialTransition := (NOT paused_2);
		 IF bSerialTransition THEN
			 continue_6 := FALSE;
		 END_IF
		
END_CASE]]></ST>
    </Implementation>
    <Folder Name="CommonBase" Id="{8c2df53f-cc6d-4e3c-9b33-f2759249f7d5}" />
    <Method Name="ConfigureRead" Id="{0eacf177-2b75-49e1-b06a-5ff2158f3974}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD ConfigureRead : CellDataBlock
VAR_INPUT
	input : CellDataBlock; //would offer sub-index ...etc
	mode : eModes;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="ConfigureWrite" Id="{ce7cfd7f-b9d8-4c0d-919e-2e8a95018cdd}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD ConfigureWrite : BOOL
VAR_INPUT
	input : CellDataBlock;
	mode : eModes;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Implemented by concre derived class
ConfigureWrite := true;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Control" Id="{6b8b504d-9bc1-4e63-aea6-7305b4d68d76}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD Control : BOOL
VAR_INPUT
	input : CellDataBlock;
	mode : eModes; //commit mode
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bEnStep := input.unit.base.controlWord.bit0EnStep;
bTrigStep := input.unit.base.controlWord.bit1TrigStep;
bPause := input.unit.base.controlWord.bit2StatePause;
bIsBypassed := input.unit.base.controlWord.bit3IsBypassed;
bWorkingOverride := input.unit.base.controlWord.bit4WorkingOverride;
bMaterialOverride := input.unit.base.controlWord.bit5MaterialOverride;
Control:=true;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ErrorClear" Id="{f462e33e-113a-4bab-9083-d7f7df268290}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD ErrorClear : BOOL
VAR_INPUT
	input : eErrorClearWays;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[alarmAck := 0; // ack reset]]></ST>
      </Implementation>
    </Method>
    <Method Name="ErrorDetect" Id="{0d501c3c-1258-4947-b465-528162d76fdd}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD ErrorDetect : UDINT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ErrorDetect := alarmCode_;

IF alarmCode_ <> 0 THEN
	alarmAck := alarmCode_;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Monitor" Id="{bff2329b-af0a-4b0e-a719-df2270726c4b}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD Monitor : CellDataBlock
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Monitor.unit.base.controlWord.bit0EnStep := bEnStep;
Monitor.unit.base.controlWord.bit1TrigStep := bTrigStep;
Monitor.unit.base.controlWord.bit2StatePause := bPause;
Monitor.unit.base.controlWord.bit3IsBypassed := bIsBypassed;
Monitor.unit.base.controlWord.bit4WorkingOverride := bWorkingOverride;
Monitor.unit.base.controlWord.bit5MaterialOverride := bMaterialOverride;
//Transition status
Monitor.unit.base.transitionByte := transitionByte;
//
Monitor.unit.base.alarmCode := TO_WORD(AlarmCode);
Monitor.unit.base.state := TO_WORD(State);
Monitor.unit.base.nextState := TO_WORD(NextState);
//
IF workingTimer.IN THEN
	//timer is running , reflect real value
	Monitor.unit.base.workingTimerCache := TO_DWORD(workingTimer.ET);
ELSE
	//timer is stopped , reflect cached value
	Monitor.unit.base.workingTimerCache := TO_DWORD(workingTimerCache);
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="TypeCode" Id="{64dae203-ab2b-41a6-88c7-848614dc4389}" FolderPath="CommonBase\">
      <Declaration><![CDATA[METHOD TypeCode : eCategrories
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TypeCode := eCategrories.SELECTION_UNIT;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="RunScaraAgent">
      <LineId Id="335" Count="2" />
      <LineId Id="339" Count="0" />
      <LineId Id="428" Count="1" />
      <LineId Id="341" Count="0" />
      <LineId Id="430" Count="0" />
      <LineId Id="432" Count="0" />
      <LineId Id="431" Count="0" />
      <LineId Id="433" Count="0" />
      <LineId Id="439" Count="1" />
      <LineId Id="387" Count="0" />
      <LineId Id="436" Count="0" />
      <LineId Id="497" Count="1" />
      <LineId Id="516" Count="1" />
      <LineId Id="519" Count="0" />
      <LineId Id="518" Count="0" />
      <LineId Id="533" Count="0" />
      <LineId Id="520" Count="0" />
      <LineId Id="530" Count="0" />
      <LineId Id="532" Count="0" />
      <LineId Id="534" Count="0" />
      <LineId Id="524" Count="2" />
      <LineId Id="529" Count="0" />
      <LineId Id="527" Count="1" />
      <LineId Id="513" Count="2" />
      <LineId Id="238" Count="0" />
      <LineId Id="466" Count="0" />
      <LineId Id="468" Count="1" />
      <LineId Id="496" Count="0" />
      <LineId Id="467" Count="0" />
      <LineId Id="499" Count="1" />
      <LineId Id="490" Count="0" />
      <LineId Id="492" Count="3" />
      <LineId Id="491" Count="0" />
      <LineId Id="502" Count="1" />
      <LineId Id="506" Count="0" />
      <LineId Id="510" Count="0" />
      <LineId Id="488" Count="0" />
      <LineId Id="535" Count="1" />
      <LineId Id="472" Count="0" />
      <LineId Id="537" Count="0" />
      <LineId Id="512" Count="0" />
      <LineId Id="474" Count="1" />
      <LineId Id="482" Count="0" />
      <LineId Id="476" Count="0" />
      <LineId Id="483" Count="2" />
      <LineId Id="487" Count="0" />
      <LineId Id="486" Count="0" />
      <LineId Id="473" Count="0" />
      <LineId Id="438" Count="0" />
      <LineId Id="441" Count="0" />
      <LineId Id="461" Count="0" />
      <LineId Id="465" Count="0" />
      <LineId Id="462" Count="0" />
      <LineId Id="464" Count="0" />
      <LineId Id="463" Count="0" />
      <LineId Id="445" Count="3" />
      <LineId Id="451" Count="2" />
      <LineId Id="457" Count="0" />
      <LineId Id="454" Count="2" />
      <LineId Id="458" Count="2" />
      <LineId Id="450" Count="0" />
      <LineId Id="437" Count="0" />
    </LineIds>
    <LineIds Name="RunScaraAgent.ConfigureRead">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="RunScaraAgent.ConfigureWrite">
      <LineId Id="5" Count="0" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="RunScaraAgent.Control">
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="2" />
      <LineId Id="27" Count="0" />
      <LineId Id="17" Count="1" />
    </LineIds>
    <LineIds Name="RunScaraAgent.ErrorClear">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="RunScaraAgent.ErrorDetect">
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="1" />
    </LineIds>
    <LineIds Name="RunScaraAgent.Monitor">
      <LineId Id="9" Count="4" />
      <LineId Id="5" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="21" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="30" Count="2" />
      <LineId Id="28" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="16" Count="0" />
    </LineIds>
    <LineIds Name="RunScaraAgent.TypeCode">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>