<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="RunDimmerControl" Id="{9f52cc66-4117-07fc-19a5-b7ef7ea78928}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunDimmerControl EXTENDS RunUnitGeneric
VAR_INPUT
	mode : INT; //idle = 0, commissioning = 1(switch mode change is forbidden);
END_VAR
VAR_OUTPUT
END_VAR
VAR
	bCommandChanged : BOOL;	

	//Application layer
	//intesity-command,
	//intesity-ack
	command_intensity : ARRAY[0..7] OF BYTE;
	command_mode : ARRAY[0..7] OF BOOL;
	
	//mode-command,
	//mode-ack,
	status_intensity : ARRAY[0..7] OF BYTE;
	status_mode : ARRAY[0..7] OF BOOL;

	// I/O layer
	// (* I/O variables for a PC-COM port *)
    stIn_PcCom AT %I* : PcComInData; (* linked to the port in the TwinCAT System Manager *)
    stOut_PcCom AT %Q* : PcComOutData; (* linked to the port in the TwinCAT System Manager *)
    RxBufferPcCom  : ComBuffer; (* Receive data buffer; used with all receive function blocks *)
    TxBufferPcCom : ComBuffer; (* Transmit data buffer; used with all receive function blocks *)
	
	fbPcComCtrl			: SerialLineControl; // Gate to communicate with I/O layer
	bPcComCtrlError: BOOL;
	ePcComCtrlErrorID	: ComError_t;
	
	// Upper layer
	command : INT;
	
	dataSend : ARRAY[0..15] OF BYTE;
	
	dataPrefix : BYTE;
	dataSufix : byte;
	dataReceive : ARRAY[0..15] OF BYTE;
	
	
	fbSend : SendData;
	fbReceive : ReceiveData;
	
	timer : TON;
	
	nCounter : INT;
	queryCounter :BYTE;  // 0: ask mode, 1-channelNum : ask intensity
END_VAR
VAR CONSTANT
	BYTE_0_PRE : INT := 0;
	BYTE_1_REQ_ACK : INT := 1;
	BYTE_2_OPT : INT := 2;
	BYTE_3_POST : INT :=3;	

	DATA_PREFIX : BYTE := 16#FF;
	DATA_POSTFIX : BYTE := 16#FE;
	
	DATA_QUERY : BYTE := 16#12;
	
	DATA_REQ_MODE_HEAD : BYTE := 16#09;
	DATA_REQ_INTENSITY_HEAD : BYTE := 16#01;
	
	DATA_ACK_MODE : BYTE := 16#0;
	
END_VAR
VAR PERSISTENT
	channelNum : INT := 4;	
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[

//initialize , query current status and intensity


//command , send when application variable changed

//routine-query
CASE outputState OF
	
	//----------------------------
	//	Working
	//----------------------------
	eSpecialStates.SLAVE_ENTER_PROCEDURE:
		//IDLE , check if command changed compared to status
		bCommandChanged := FALSE;
		
		IF mode=0 THEN
			//scan configuration 
			FOR nCounter :=0 TO channelNum DO
				IF NOT bSerialTransition THEN
					bSerialTransition := (command_mode[nCounter] <> status_mode[nCounter]);
					dataSend[BYTE_1_REQ_ACK] := DATA_REQ_MODE_HEAD;	
					dataSend[BYTE_2_OPT] :=  TO_BYTE(command_mode[nCounter]);
					queryCounter := 0;
				END_IF		
			END_FOR
		END_IF
		//scan if intensity changed
		FOR nCounter :=0 TO channelNum DO
			IF NOT bSerialTransition THEN
				bSerialTransition :=(command_intensity[nCounter] <> status_intensity[nCounter]);
				dataSend[BYTE_1_REQ_ACK] := DATA_REQ_INTENSITY_HEAD;	
				dataSend[BYTE_2_OPT] :=  command_intensity[nCounter];
				queryCounter := TO_BYTE(nCounter +1); // channel no.
			END_IF			
		END_FOR
		
		IF bCommandChanged THEN
			//------------------
			// Command Preparation
			//------------------
		END_IF
		
		// change dataSend to Query or Command
		IF bSerialTransition THEN
			timer.IN := TRUE;
		END_IF
				
	
		
		
	16#202:
		// Sender
		IF timer.Q THEN
			fbSend(pSendData := ADR(datasend),
				Length := SIZEOF(datasend),
				TXbuffer := TxBufferPcCom);
			timer.IN := FALSE; // reset
		END_IF
		IF timer.Q AND fbSend.Error = ComError_t.COMERROR_NOERROR AND NOT fbSend.Busy THEN
			bSerialTransition := TRUE;
		ELSIF timer.Q AND NOT fbSend.Busy AND fbSend.Error <> ComError_t.COMERROR_NOERROR THEN
			timer.IN := TRUE; // restart
		END_IF
	
	16#201:
		
		
		IF queryCounter < channelNum THEN
			// send
			bSerialTransition := TRUE;
		ELSE
			//------------------
			// Query Preparation
			//------------------
			dataSend[BYTE_1_REQ_ACK] := DATA_QUERY;		
			dataSend[BYTE_2_OPT] := queryCounter;
			NextState := 16#202;
		END_IF
		
END_CASE

//Receiver dispatcher
fbReceive(pPrefix := ADR(dataPrefix),
	LenPrefix:=to_byte(sizeof(dataPrefix)),
	pSuffix:=ADR(dataSufix),
	lensuffix:=to_byte(sizeof(dataSufix)),
	pReceiveData:=ADR(dataReceive),
	SizeReceiveData:=SIZEOF(dataReceive),	
RXbuffer:=RxBufferPcCom);

IF fbReceive.DataReceived THEN
	// process incoming message
	IF dataReceive[BYTE_1_REQ_ACK] = 0 THEN
		// MODE , update mode status
		FOR nCounter:=0 TO channelNum DO
			status_mode[nCounter] := (dataReceive[BYTE_2_OPT] AND SHL(16#01,nCounter)) <> 0;
		END_FOR
	ELSIF dataReceive[BYTE_1_REQ_ACK] <= channelNum THEN
		// Intensity , update intensity status , valid if within channel number
		status_intensity[dataReceive[BYTE_1_REQ_ACK]] := dataReceive[BYTE_2_OPT];
	END_IF
	
	//afterward , clean receiving buffer
	FOR nCounter:=0 TO SIZEOF(dataReceive)-1 DO
		dataReceive[nCounter]:=0;
	END_FOR
	
ELSE
	// Receiving	
END_IF


//----------------
// I/O Routine
//-----------------
fbPcComCtrl(
	Mode:= SERIALLINEMODE_PC_COM_PORT, 
	pComIn:= ADR(stIn_PcCom), 
	pComOut:= ADR(stOut_PcCom), 
	SizeComIn:= SIZEOF(stIn_PcCom), 
	Error=> , 
	ErrorID=> , 
	TxBuffer:= TxBufferPcCom, 
	RxBuffer:= RxBufferPcCom );
IF fbPcComCtrl.Error THEN
	bPcComCtrlError := TRUE;
	ePcComCtrlErrorID := fbPcComCtrl.ErrorID;
END_IF]]></ST>
    </Implementation>
    <LineIds Name="RunDimmerControl">
      <LineId Id="223" Count="15" />
      <LineId Id="475" Count="0" />
      <LineId Id="461" Count="0" />
      <LineId Id="463" Count="0" />
      <LineId Id="473" Count="0" />
      <LineId Id="482" Count="1" />
      <LineId Id="488" Count="1" />
      <LineId Id="492" Count="0" />
      <LineId Id="484" Count="0" />
      <LineId Id="472" Count="0" />
      <LineId Id="464" Count="0" />
      <LineId Id="476" Count="0" />
      <LineId Id="465" Count="0" />
      <LineId Id="485" Count="1" />
      <LineId Id="490" Count="1" />
      <LineId Id="493" Count="0" />
      <LineId Id="487" Count="0" />
      <LineId Id="468" Count="0" />
      <LineId Id="466" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="478" Count="1" />
      <LineId Id="240" Count="0" />
      <LineId Id="244" Count="6" />
      <LineId Id="454" Count="0" />
      <LineId Id="480" Count="1" />
      <LineId Id="254" Count="13" />
      <LineId Id="496" Count="0" />
      <LineId Id="501" Count="5" />
      <LineId Id="510" Count="3" />
      <LineId Id="509" Count="0" />
      <LineId Id="508" Count="0" />
      <LineId Id="494" Count="1" />
      <LineId Id="268" Count="9" />
      <LineId Id="441" Count="0" />
      <LineId Id="278" Count="3" />
      <LineId Id="442" Count="2" />
      <LineId Id="282" Count="1" />
      <LineId Id="439" Count="0" />
      <LineId Id="284" Count="0" />
      <LineId Id="445" Count="1" />
      <LineId Id="448" Count="2" />
      <LineId Id="447" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="440" Count="0" />
      <LineId Id="286" Count="17" />
      <LineId Id="62" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>