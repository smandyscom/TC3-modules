<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="RunDimmerControl" Id="{9f52cc66-4117-07fc-19a5-b7ef7ea78928}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunDimmerControl EXTENDS RunUnitGeneric
VAR_INPUT
	mode : INT; //idle = 0, commissioning = 1(switch mode change is forbidden);
	
	//Application layer
	command_intensity AT%Q* : ARRAY[0..7] OF BYTE;
	command_mode AT%Q* : ARRAY[0..7] OF BOOL; // 1: manual , 0: commuication
END_VAR
VAR_OUTPUT
	status_intensity : ARRAY[0..7] OF BYTE;
	status_mode : ARRAY[0..7] OF BOOL;
	
	ePcComCtrlErrorID	: ComError_t;
END_VAR
VAR
	// I/O layer
	// (* I/O variables for a PC-COM port *)
    stIn_PcCom AT %I* : PcComInData; (* linked to the port in the TwinCAT System Manager *)
    stOut_PcCom AT %Q* : PcComOutData; (* linked to the port in the TwinCAT System Manager *)
    RxBufferPcCom  : ComBuffer; (* Receive data buffer; used with all receive function blocks *)
    TxBufferPcCom : ComBuffer; (* Transmit data buffer; used with all receive function blocks *)
	
	fbPcComCtrl			: SerialLineControl; // Gate to communicate with I/O layer
	
	// Upper layer
	command : INT;
	
	dataSend : ARRAY[0..15] OF BYTE;
	
	dataPrefix : BYTE := 16#FF;
	dataSufix : BYTE := 16#FE;
	dataReceive : ARRAY[0..15] OF BYTE;
	
	
	fbSend : SendData;
	fbReceive : ReceiveData;
	
	timer : TON;
	
	nCounter : INT := 0;
	queryCounter :BYTE;  // 0: ask mode, 1-channelNum : ask intensity
END_VAR
VAR CONSTANT
	BYTE_0_PRE : INT := 0;
	BYTE_1_REQ_ACK : INT := 1;
	BYTE_2_OPT : INT := 2;
	BYTE_3_POST : INT :=3;	

	DATA_PREFIX : BYTE := 16#FF;
	DATA_POSTFIX : BYTE := 16#FE;
	
	DATA_QUERY : BYTE := 16#12;
	
	DATA_REQ_MODE_HEAD : BYTE := 16#09;
	DATA_REQ_INTENSITY_HEAD : BYTE := 16#01;
	
	DATA_ACK_MODE : BYTE := 16#0;
	
	MODE_COMM : BOOL := FALSE;
	MODE_MAN : BOOL := true;
	
END_VAR
VAR PERSISTENT
	channelNum : INT := 4;	
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^();

timer(PT:=T#20MS);

//routine-query
CASE outputState OF
	//--------------------------------
	//	Initialization , query then update STATUS and COMMAND buffer
	//--------------------------------	
	eSpecialStates.INITIAL_BEGIN:
		// Forcely initialize mode
		bSerialTransition := nCounter < channelNum;
		IF NOT bSerialTransition THEN
			// goal reached
			NextState := eSpecialStates.INITIAL_STATE_2;
		END_IF
	eSpecialStates.INITIAL_STATE_1:
		dataSend[BYTE_0_PRE] := DATA_PREFIX;		
		dataSend[BYTE_1_REQ_ACK] := TO_BYTE(DATA_REQ_MODE_HEAD+nCounter);		
		dataSend[BYTE_2_OPT] := TO_BYTE(MODE_COMM); //set mode first
		dataSend[BYTE_3_POST] := DATA_POSTFIX;	
		bSerialTransition := THIS^.send();
		IF bSerialTransition THEN
			nCounter := nCounter+1;
			NextState := eSpecialStates.INITIAL_BEGIN;
		END_IF
		
	eSpecialStates.INITIAL_STATE_2:
		dataSend[BYTE_0_PRE] := DATA_PREFIX;		
		dataSend[BYTE_1_REQ_ACK] := DATA_QUERY;		
		dataSend[BYTE_2_OPT] := 0; //query mode 
		dataSend[BYTE_3_POST] := DATA_POSTFIX;	
		bSerialTransition := THIS^.send();
	eSpecialStates.INITIAL_STATE_3:
		bSerialTransition := fbReceive.DataReceived;
		IF bSerialTransition THEN
			//update MODE
			FOR nCounter:=0 TO SIZEOF(command_mode)-1 DO
				command_mode[nCounter] := status_mode[nCounter];
			END_FOR
			
			queryCounter := 0;
		END_IF
	eSpecialStates.INITIAL_STATE_4:
		queryCounter := queryCounter+1;
		dataSend[BYTE_2_OPT] := queryCounter;
		IF queryCounter <= channelNum THEN
			bSerialTransition := TRUE;
		ELSE
			NextState := eSpecialStates.INITIAL_END; // all updated
		END_IF
	eSpecialStates.INITIAL_STATE_5:
		bSerialTransition := THIS^.send();
	eSpecialStates.INITIAL_STATE_6:
		bSerialTransition := fbReceive.DataReceived;
		IF bSerialTransition THEN
			//update intensity
			command_intensity[queryCounter-1] := status_intensity[queryCounter-1];
			NextState :=  eSpecialStates.INITIAL_STATE_4;
		END_IF
	//----------------------------
	//	Working
	//----------------------------
	eSpecialStates.GENERIC_GROUP_START:
		//IDLE , check if command changed compared to status
		
		IF mode=0 THEN
			//Manual mode : scan configuration 
			FOR nCounter :=0 TO channelNum-1 DO
				IF NOT bSerialTransition THEN
					bSerialTransition := (command_mode[nCounter] <> status_mode[nCounter]);
					dataSend[BYTE_1_REQ_ACK] := TO_BYTE(DATA_REQ_MODE_HEAD+nCounter);	
					dataSend[BYTE_2_OPT] :=  TO_BYTE(command_mode[nCounter]); // 1 : rotate switch , 0 : COMM
					queryCounter := 0;
				END_IF		
			END_FOR
		END_IF
		//scan if intensity changed and in communication mode
		FOR nCounter :=0 TO channelNum-1 DO
			IF NOT bSerialTransition THEN
				bSerialTransition :=(command_intensity[nCounter] <> status_intensity[nCounter]) AND (status_mode[nCounter] = MODE_COMM);
				dataSend[BYTE_1_REQ_ACK] := TO_BYTE(DATA_REQ_INTENSITY_HEAD+nCounter); // channel index	
				dataSend[BYTE_2_OPT] :=  command_intensity[nCounter];
				queryCounter := TO_BYTE(nCounter +1); // channel no.
			END_IF			
		END_FOR
		
	16#1:
		//
		bSerialTransition := THIS^.send();
	16#2:
		//if per command is query , have to await dataReceived
		bSerialTransition := (NOT (dataSend[BYTE_1_REQ_ACK] = DATA_QUERY)) OR ((dataSend[BYTE_1_REQ_ACK] = DATA_QUERY) AND fbReceive.DataReceived);
		
		//TODO , ERR : what if data not receive and time out?
	16#3:
		CASE queryCounter OF
			0:
				// Mode changing had been selected , should be all mode matched
				bSerialTransition := TRUE;
				FOR nCounter:=0 TO SIZEOF(command_mode)-1 DO
					bSerialTransition := bSerialTransition AND (command_mode[nCounter] = status_mode[nCounter]);
				END_FOR
			ELSE
				// Intensity changing had been selected
				// queryCounter is one-based
				bSerialTransition := command_intensity[queryCounter-1] = status_intensity[queryCounter-1];
		END_CASE
		
		IF bSerialTransition THEN		
			NextState := eSpecialStates.GENERIC_GROUP_START;
		ELSIF dataSend[BYTE_1_REQ_ACK]<>DATA_QUERY THEN
			//-----------------------------------
			// Query Preparation , to update data
			//-----------------------------------
			dataSend[BYTE_1_REQ_ACK] := DATA_QUERY;		
			dataSend[BYTE_2_OPT] := queryCounter;
			NextState := 16#1;
		ELSE
			//TODO , ERR : data had been updated but inconsist to command
		END_IF
		
END_CASE

//Receiver dispatcher
fbReceive(pPrefix := ADR(dataPrefix),
	LenPrefix:=to_byte(sizeof(dataPrefix)),
	pSuffix:=ADR(dataSufix),
	lensuffix:=to_byte(sizeof(dataSufix)),
	pReceiveData:=ADR(dataReceive),
	SizeReceiveData:=SIZEOF(dataReceive),	
RXbuffer:=RxBufferPcCom);

IF fbReceive.DataReceived THEN
	// process incoming message
	IF dataReceive[BYTE_1_REQ_ACK] = 0 THEN
		// MODE , update mode status
		FOR nCounter:=0 TO channelNum-1 DO
			status_mode[nCounter] := (dataReceive[BYTE_2_OPT] AND SHL(16#01,nCounter)) <> 0;
		END_FOR
	ELSIF dataReceive[BYTE_1_REQ_ACK] <= channelNum THEN
		// Intensity , update intensity status , valid if within channel number
		status_intensity[dataReceive[BYTE_1_REQ_ACK]-1] := dataReceive[BYTE_2_OPT];
	ELSE
		// ERR : out of range
	END_IF
	
	//afterward , clean receiving buffer
//	FOR nCounter:=0 TO SIZEOF(dataReceive)-1 DO
//		dataReceive[nCounter]:=0;
//	END_FOR
	
ELSE
	// Receiving	
END_IF


//----------------
// I/O Routine
//-----------------
fbPcComCtrl(
	Mode:= SERIALLINEMODE_PC_COM_PORT, 
	pComIn:= ADR(stIn_PcCom), 
	pComOut:= ADR(stOut_PcCom), 
	SizeComIn:= SIZEOF(stIn_PcCom), 
	Error=> , 
	ErrorID=> , 
	TxBuffer:= TxBufferPcCom, 
	RxBuffer:= RxBufferPcCom );
ePcComCtrlErrorID := fbPcComCtrl.ErrorID;]]></ST>
    </Implementation>
    <Method Name="send" Id="{793840da-b12a-08ac-1bde-dd5217ee53ce}">
      <Declaration><![CDATA[METHOD send : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT timer.IN THEN
	timer.IN := TRUE;
END_IF
// Sender
IF timer.Q THEN
	fbSend(pSendData := ADR(datasend),
			Length := SIZEOF(datasend),
			TXbuffer := TxBufferPcCom);
	timer.IN := FALSE; // reset
END_IF
IF timer.Q AND NOT fbSend.Busy AND fbSend.Error = ComError_t.COMERROR_NOERROR  THEN
	send := TRUE;
ELSIF timer.Q AND NOT fbSend.Busy AND fbSend.Error <> ComError_t.COMERROR_NOERROR THEN
	timer.IN := FALSE; // restart
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="RunDimmerControl">
      <LineId Id="223" Count="1" />
      <LineId Id="655" Count="0" />
      <LineId Id="229" Count="2" />
      <LineId Id="614" Count="2" />
      <LineId Id="731" Count="0" />
      <LineId Id="749" Count="0" />
      <LineId Id="740" Count="1" />
      <LineId Id="747" Count="0" />
      <LineId Id="742" Count="1" />
      <LineId Id="750" Count="0" />
      <LineId Id="757" Count="2" />
      <LineId Id="756" Count="0" />
      <LineId Id="751" Count="1" />
      <LineId Id="755" Count="0" />
      <LineId Id="753" Count="1" />
      <LineId Id="737" Count="0" />
      <LineId Id="617" Count="0" />
      <LineId Id="629" Count="0" />
      <LineId Id="622" Count="0" />
      <LineId Id="628" Count="0" />
      <LineId Id="630" Count="1" />
      <LineId Id="623" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="632" Count="1" />
      <LineId Id="635" Count="2" />
      <LineId Id="656" Count="1" />
      <LineId Id="634" Count="0" />
      <LineId Id="638" Count="0" />
      <LineId Id="640" Count="0" />
      <LineId Id="639" Count="0" />
      <LineId Id="642" Count="1" />
      <LineId Id="645" Count="1" />
      <LineId Id="644" Count="0" />
      <LineId Id="641" Count="0" />
      <LineId Id="647" Count="3" />
      <LineId Id="653" Count="0" />
      <LineId Id="651" Count="0" />
      <LineId Id="654" Count="0" />
      <LineId Id="652" Count="0" />
      <LineId Id="233" Count="4" />
      <LineId Id="475" Count="0" />
      <LineId Id="461" Count="0" />
      <LineId Id="463" Count="0" />
      <LineId Id="473" Count="0" />
      <LineId Id="482" Count="1" />
      <LineId Id="488" Count="1" />
      <LineId Id="492" Count="0" />
      <LineId Id="484" Count="0" />
      <LineId Id="472" Count="0" />
      <LineId Id="464" Count="0" />
      <LineId Id="476" Count="0" />
      <LineId Id="465" Count="0" />
      <LineId Id="485" Count="1" />
      <LineId Id="490" Count="1" />
      <LineId Id="493" Count="0" />
      <LineId Id="487" Count="0" />
      <LineId Id="468" Count="0" />
      <LineId Id="585" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="588" Count="0" />
      <LineId Id="627" Count="0" />
      <LineId Id="267" Count="0" />
      <LineId Id="602" Count="1" />
      <LineId Id="610" Count="1" />
      <LineId Id="496" Count="0" />
      <LineId Id="501" Count="0" />
      <LineId Id="592" Count="0" />
      <LineId Id="594" Count="0" />
      <LineId Id="725" Count="0" />
      <LineId Id="607" Count="2" />
      <LineId Id="599" Count="2" />
      <LineId Id="605" Count="0" />
      <LineId Id="593" Count="0" />
      <LineId Id="502" Count="1" />
      <LineId Id="505" Count="1" />
      <LineId Id="510" Count="3" />
      <LineId Id="509" Count="0" />
      <LineId Id="508" Count="0" />
      <LineId Id="612" Count="1" />
      <LineId Id="494" Count="1" />
      <LineId Id="268" Count="9" />
      <LineId Id="441" Count="0" />
      <LineId Id="278" Count="3" />
      <LineId Id="442" Count="2" />
      <LineId Id="282" Count="1" />
      <LineId Id="439" Count="0" />
      <LineId Id="658" Count="1" />
      <LineId Id="284" Count="0" />
      <LineId Id="445" Count="1" />
      <LineId Id="448" Count="2" />
      <LineId Id="447" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="440" Count="0" />
      <LineId Id="286" Count="14" />
      <LineId Id="62" Count="0" />
    </LineIds>
    <LineIds Name="RunDimmerControl.send">
      <LineId Id="6" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="8" Count="11" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>