<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.10">
  <POU Name="RunLabelHandler" Id="{e13915db-12ab-405f-bb1f-0c49fc3dffb2}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunLabelHandler EXTENDS RunUnitSlave
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	// communicate with external device
	bPrinted  : BOOL;
	bTaken  : BOOL;
	// Vaccuum
	bVacuumGenerator  : BOOL;
	bVacuumBreaker  :BOOL;
	bVacuumSensor : POINTER TO RunSignal;
	
	temp : bool;
	//
	axis : POINTER TO RunAxis;
	//
	gripperVertical : POINTER TO RunCylinder;
	gripperRotate : POINTER TO RunCylinder;
	gripperPressorVertical : POINTER TO RunCylinder;
	gripperPressorPress : POINTER TO RunCylinder;
	shifter : POINTER TO RunCylinder;
	//
	ptCommandReady : POINTER TO ParameterSet;
	ptCommandLabelTake : POINTER TO ParameterSet;
	ptCommandLabelPlace : POINTER TO ParameterSet;
	//
	pressCounter : INT := 0;
	
END_VAR
VAR PERSISTENT
	bVacuumTimeout : TON;
	pressGoal : INT := 3;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^();

temp := true;

CASE outputState OF 
	//-------------------Initializing
	eSpecialStates.INITIAL_BEGIN:
		//all cylinder off
		transitionByte.0 := gripperVertical^.Execute(eCylinderCommands.COMMAND_A);
		transitionByte.1 := gripperRotate^.Execute(eCylinderCommands.COMMAND_A);
		transitionByte.2 := gripperPressorVertical^.Execute(eCylinderCommands.COMMAND_A);
		transitionByte.3 := gripperPressorPress^.Execute(eCylinderCommands.COMMAND_A);
		transitionByte.4 := shifter^.Execute(eCylinderCommands.COMMAND_A);
		bSerialTransition := (transitionByte = 16#1F);
	eSpecialStates.INITIAL_STATE_1:
		IF axis^.ExecuteParameter(ptCommandReady) THEN
			NextState := eSpecialStates.INITIAL_END;
		END_IF
	//-------------------Working
	eSpecialStates.SLAVE_ENTER_PROCEDURE:
		//waiting printer
		bSerialTransition := bPrinted;
	16#201:
		bSerialTransition := axis^.ExecuteParameter(ptCommandLabelTake);
	16#202:
		bSerialTransition := gripperVertical^.Execute(eCylinderCommands.COMMAND_B);	//down
		IF bSerialTransition THEN
			//generate vacuum
			bVacuumGenerator := TRUE; //on
			bVacuumBreaker := FALSE;
			//
			bVacuumTimeout.IN :=TRUE;
		END_IF
	16#203:
		bSerialTransition := bVacuumSensor^.debouncedOn;
		IF bSerialTransition THEN
			bTaken := TRUE;
			//
			bVacuumTimeout.IN :=FALSE; //reset
		ELSIF bVacuumTimeout.Q THEN
			//TODO , timeout alarm
		END_IF
	16#204:
		bSerialTransition := gripperVertical^.Execute(eCylinderCommands.COMMAND_A); //up
	16#205:
		IF axis^.ExecuteParameter(ptCommandLabelPlace) THEN
			//up
			NextState := 16#110;
		END_IF
	//-----------------Tag
	16#210:
		IF workingSignal^ THEN
			//cable had been holded
			bSerialTransition := gripperRotate^.Execute(eCylinderCommands.COMMAND_B); //rotate
		ELSE
			//wait signal	
		END_IF	
	16#211:
		bSerialTransition := gripperVertical^.Execute(eCylinderCommands.COMMAND_B); //down
		IF bSerialTransition THEN
			//break vacuum
			bVacuumGenerator := FALSE; //off
			bVacuumBreaker := TRUE; //on
		END_IF
	16#212:
		transitionByte.0 := (NOT transitionByte.0) AND_THEN gripperVertical^.Execute(eCylinderCommands.COMMAND_A); //up
		transitionByte.1 := (NOT transitionByte.1) AND_THEN gripperRotate^.Execute(eCylinderCommands.COMMAND_A); //back
		IF 	transitionByte = 16#3 THEN
			NextState := 16#120;
		END_IF
	//----------------Press
	16#220:
		bSerialTransition := shifter^.Execute(eCylinderCommands.COMMAND_B); //tool change
	16#221:
		bSerialTransition := gripperPressorVertical^.Execute(eCylinderCommands.COMMAND_B); //down
	16#222:
		bSerialTransition := gripperPressorPress^.Execute(eCylinderCommands.COMMAND_B);
	16#223:
		IF gripperPressorPress^.Execute(eCylinderCommands.COMMAND_A) THEN
			pressCounter := pressCounter+1;
			
			IF pressCounter >= pressGoal THEN
				//press back-forth
				NextState := 16#130;
			ELSE
				NextState := 16#122;
			END_IF
		END_IF
	//------------Return
	16#230:
		bSerialTransition := gripperPressorVertical^.Execute(eCylinderCommands.COMMAND_A); //up
	16#231:
		transitionByte.0 := (NOT transitionByte.0) AND_THEN shifter^.Execute(eCylinderCommands.COMMAND_A); //up
		transitionByte.1 := (NOT transitionByte.1) AND_THEN axis^.ExecuteParameter(ptCommandLabelTake); //ready
		IF transitionByte = 16#3 THEN
			pressCounter:=0;
			NextState := eSpecialStates.SLAVE_WORK_DONE;
		END_IF
END_CASE
bVacuumTimeout(IN:= , PT:= , Q=> , ET=> );
//handshake reset
IF bTaken AND NOT bPrinted THEN
	bTaken := FALSE;
END_IF]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{8e22ea07-e6ac-4cce-a3dd-c0421a83bdd3}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	argParent : POINTER TO RunUnitGeneric;
	argSlotBase : POINTER TO MaterialBlock;
	argSlotLast : POINTER TO MaterialBlock;
	
	argWorkingSignal : POINTER TO BOOL;
	
	//devices
	argVacuumSensor : POINTER TO RunSignal;
	
	argAxis : POINTER TO RunAxis;
	//
	argGripperVertical : POINTER TO RunCylinder;
	argGripperRotate : POINTER TO RunCylinder;
	argGripperPressorVertical : POINTER TO RunCylinder;
	argGripperPressorPress : POINTER TO RunCylinder;
	argShifter : POINTER TO RunCylinder;
END_VAR
VAR CONSTANT
	indexReady : INT := 1;
	indexTake :INT :=2;
	indexPlace : INT :=3;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//initialize 
Parent := argParent;
SlotBase := argSlotBase;
SlotLast := argSlotLast;
//
IF bInitRetains THEN
	NextState := eSpecialStates.INITIAL_BEGIN;
END_IF

workingSignal := argWorkingSignal; //link

//device link
//
axis := argAxis;
//
gripperVertical := argGripperVertical;
gripperRotate := argGripperRotate;
gripperPressorVertical := argGripperPressorVertical;
gripperPressorPress := argGripperPressorPress;
shifter := argShifter;

ptCommandReady := ADR(axis^.ptpCommands[indexReady]);
ptCommandLabelTake := ADR(axis^.ptpCommands[indexTake]);
ptCommandLabelPlace := ADR(axis^.ptpCommands[indexPlace]);

]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="RunLabelHandler">
      <LineId Id="9" Count="0" />
      <LineId Id="190" Count="1" />
      <LineId Id="23" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="28" Count="11" />
      <LineId Id="26" Count="1" />
      <LineId Id="40" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="41" Count="1" />
      <LineId Id="53" Count="1" />
      <LineId Id="57" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="55" Count="1" />
      <LineId Id="136" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="154" Count="1" />
      <LineId Id="137" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="72" Count="1" />
      <LineId Id="62" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="78" Count="1" />
      <LineId Id="76" Count="0" />
      <LineId Id="81" Count="1" />
      <LineId Id="85" Count="0" />
      <LineId Id="90" Count="1" />
      <LineId Id="86" Count="1" />
      <LineId Id="83" Count="1" />
      <LineId Id="92" Count="0" />
      <LineId Id="99" Count="2" />
      <LineId Id="94" Count="2" />
      <LineId Id="102" Count="1" />
      <LineId Id="105" Count="2" />
      <LineId Id="112" Count="1" />
      <LineId Id="115" Count="1" />
      <LineId Id="124" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="132" Count="1" />
      <LineId Id="125" Count="1" />
      <LineId Id="131" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="134" Count="1" />
      <LineId Id="25" Count="0" />
      <LineId Id="149" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="147" Count="1" />
    </LineIds>
    <LineIds Name="RunLabelHandler.FB_init">
      <LineId Id="25" Count="8" />
      <LineId Id="13" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="37" Count="6" />
      <LineId Id="36" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="52" Count="1" />
      <LineId Id="51" Count="0" />
      <LineId Id="44" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>