<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.10">
  <POU Name="RunLabelHandler" Id="{e13915db-12ab-405f-bb1f-0c49fc3dffb2}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunLabelHandler EXTENDS RunUnitSlave
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	//File handler
	fbOpen : FB_FileOpen;
	fbWrite : FB_FileWrite;
	fbClose : FB_FileClose;
	fileHandle : UINT;
	
	fileContent : STRING := '100,2';
	fileBytes : ARRAY[0..15] OF BYTE;
	// communicate with external device
	ioPrinter : POINTER TO  ioBundlePrinterApplicator;
	// Vaccuum
	ioVacuum : POINTER TO ioBundleLabelGripper;
	bVacuumSensor : POINTER TO RunSignal;
	//
	axis : POINTER TO RunAxis;
	//
	gripperVertical : POINTER TO RunCylinder;
	gripperRotate : POINTER TO RunCylinder;
	gripperPressorVertical : POINTER TO RunCylinder;
	gripperPressorPress : POINTER TO RunCylinder;
	shifter : POINTER TO RunCylinder;
	//
	ptCommandReady : POINTER TO ParameterSet;
	ptCommandLabelTake : POINTER TO ParameterSet;
	ptCommandLabelPlace : POINTER TO ParameterSet;
	//
	pressCounter : INT := 0;
	//
	bFirstCycle : bool := false;
END_VAR
VAR PERSISTENT
	bVacuumTimeout : TON;
	pressGoal : INT := 3;
	filePath : STRING := '';
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^();

//into initial state
IF NOT bFirstCycle AND outputState=0 THEN
	NextState := 16#300;
	bFirstCycle := TRUE;
END_IF

CASE outputState OF 
	//-------------------Initializing
	eSpecialStates.INITIAL_BEGIN:
		//all cylinder off
		transitionByte.0 := gripperVertical^.Execute(eCylinderCommands.COMMAND_A);
		transitionByte.1 := gripperRotate^.Execute(eCylinderCommands.COMMAND_A);
		transitionByte.2 := gripperPressorVertical^.Execute(eCylinderCommands.COMMAND_A);
		transitionByte.3 := gripperPressorPress^.Execute(eCylinderCommands.COMMAND_A);
		transitionByte.4 := shifter^.Execute(eCylinderCommands.COMMAND_A);
		bSerialTransition := (transitionByte = 16#1F);
	eSpecialStates.INITIAL_STATE_1:
		IF axis^.ExecuteParameter(ptCommandReady) THEN
			bFirstCycle := FALSE;
			NextState := eSpecialStates.INITIAL_END;
		END_IF
	//-------------------Working
	16#300:
		fbOpen.bExecute:=TRUE;
		bSerialTransition := TRUE;
	16#301:
		bSerialTransition := NOT fbOpen.bBusy;
		IF bSerialTransition THEN
			fbOpen.bExecute:=FALSE;
		END_IF
	16#302:
		fbWrite.bExecute := TRUE;
		bSerialTransition := TRUE;
	16#303:
		bSerialTransition := NOT fbWrite.bBusy;
		IF bSerialTransition THEN
			fbWrite.bExecute:=FALSE;
		END_IF
	16#304:
		fbClose.bExecute := TRUE;
		bSerialTransition := TRUE;
	16#305:
		IF NOT fbClose.bBusy THEN
			fbClose.bExecute := false;
			NextState:=16#400;
		END_IF
	//-----------------------------
	16#400:
		bSerialTransition := ioPrinter^.prtData;
		IF bSerialTransition THEN
			ioPrinter^.prtStart := TRUE;
		END_IF
	16#401:
		ioPrinter^.prtStart := FALSE;
		bSerialTransition := TRUE;
	16#402:
		//waiting printer
		bSerialTransition := NOT ioPrinter^.prtEnd AND NOT ioPrinter^.prtData ;
	16#403:
		bSerialTransition := axis^.ExecuteParameter(ptCommandLabelTake);
	16#404:
		bSerialTransition := gripperVertical^.Execute(eCylinderCommands.COMMAND_B);	//down
		IF bSerialTransition THEN
			//generate vacuum
			ioVacuum^.vacuumGripper := TRUE; //on
			ioVacuum^.breakGripper := FALSE;
			//
			bVacuumTimeout.IN :=TRUE;
		END_IF
	16#405:
		bSerialTransition := bVacuumSensor^.debouncedOn;
		IF bSerialTransition THEN
			bVacuumTimeout.IN :=FALSE; //reset
		ELSIF bVacuumTimeout.Q THEN
			//TODO , timeout alarm
		END_IF
	16#406:
		bSerialTransition := gripperVertical^.Execute(eCylinderCommands.COMMAND_A); //up
	16#407:
		IF axis^.ExecuteParameter(ptCommandLabelPlace) THEN
			//up
			NextState := 0; //wait trigger
		END_IF
	//-----------------Tag
	eSpecialStates.SLAVE_ENTER_PROCEDURE:
		bSerialTransition := gripperVertical^.Execute(eCylinderCommands.COMMAND_B); //down
		IF bSerialTransition THEN
			//break vacuum
			ioVacuum^.vacuumGripper := FALSE; //off
			ioVacuum^.breakGripper := TRUE;
		END_IF
	16#201:
		transitionByte.0 := gripperVertical^.Execute(eCylinderCommands.COMMAND_A); //up
		transitionByte.1 := gripperRotate^.Execute(eCylinderCommands.COMMAND_A); //back
		bSerialTransition := (transitionByte = 16#3);
	//----------------Press
	16#202:
		bSerialTransition := shifter^.Execute(eCylinderCommands.COMMAND_B); //tool change
	16#203:
		bSerialTransition := gripperPressorVertical^.Execute(eCylinderCommands.COMMAND_B); //down
	16#204:
		bSerialTransition := gripperPressorPress^.Execute(eCylinderCommands.COMMAND_B);
	16#205:
		IF gripperPressorPress^.Execute(eCylinderCommands.COMMAND_A) THEN
			pressCounter := pressCounter+1;
			
			IF pressCounter >= pressGoal THEN
				//press back-forth
				NextState := 16#230;
			ELSE
				NextState := 16#205;
			END_IF
		END_IF
	//------------Return
	16#230:
		bSerialTransition := gripperPressorVertical^.Execute(eCylinderCommands.COMMAND_A); //up
	16#231:
		bSerialTransition := shifter^.Execute(eCylinderCommands.COMMAND_A); //up
		IF bSerialTransition THEN
			workingSignal^ := FALSE; //off
			bWorkingOverride:= false;
		END_IF
	16#232:
		//ready
		IF axis^.ExecuteParameter(ptCommandLabelTake) THEN
			pressCounter:=0;
			NextState := 16#300;
		END_IF
END_CASE
bVacuumTimeout(IN:= , PT:= , Q=> , ET=> );


//file 
fbOpen(
	sNetId:= , 
	sPathName:= filePath, 
	nMode:= FOPEN_MODEWRITE, 
	ePath:= , 
	bExecute:= , 
	tTimeout:= , 
	bBusy=> , 
	bError=> , 
	nErrId=> , 
	hFile=> fileHandle);
fbWrite(
	sNetId:= , 
	hFile:= fileHandle, 
	pWriteBuff:= ADR(fileBytes), 
	cbWriteLen:= SIZEOF(fileBytes), 
	bExecute:= , 
	tTimeout:= , 
	bBusy=> , 
	bError=> , 
	nErrId=> , 
	cbWrite=> );
fbClose(
	sNetId:= , 
	hFile:= fileHandle, 
	bExecute:= , 
	tTimeout:= , 
	bBusy=> , 
	bError=> , 
	nErrId=> );]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{8e22ea07-e6ac-4cce-a3dd-c0421a83bdd3}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	argParent : POINTER TO RunUnitGeneric;
	argSlotBase : POINTER TO RunMaterial;
	argSlotLast : POINTER TO RunMaterial;
	
	argWorkingSignal : POINTER TO BOOL;
	
	//devices
	argVacuumSensor : POINTER TO RunSignal;
	
	argAxis : POINTER TO RunAxis;
	//
	argGripperVertical : POINTER TO RunCylinder;
	argGripperRotate : POINTER TO RunCylinder;
	argGripperPressorVertical : POINTER TO RunCylinder;
	argGripperPressorPress : POINTER TO RunCylinder;
	argShifter : POINTER TO RunCylinder;
	//
	argIoPrinter : POINTER TO ioBundlePrinterApplicator;
	argIoVacuum : POINTER TO ioBundleLabelGripper;
END_VAR
VAR CONSTANT
	indexReady : INT := 1;
	indexTake :INT :=2;
	indexPlace : INT :=3;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//initialize 
Parent := argParent;
SlotBase := argSlotBase;
SlotLast := argSlotLast;
//
IF bInitRetains THEN
	NextState := eSpecialStates.INITIAL_BEGIN;
END_IF

workingSignal := argWorkingSignal; //link

//device link
//
axis := argAxis;
//
gripperVertical := argGripperVertical;
gripperRotate := argGripperRotate;
gripperPressorVertical := argGripperPressorVertical;
gripperPressorPress := argGripperPressorPress;
shifter := argShifter;

ptCommandReady := ADR(axis^.ptpCommands[indexReady]);
ptCommandLabelTake := ADR(axis^.ptpCommands[indexTake]);
ptCommandLabelPlace := ADR(axis^.ptpCommands[indexPlace]);

bVacuumSensor := argVacuumSensor;

ioPrinter := argIoPrinter;
ioVacuum := argIoVacuum;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="RunLabelHandler">
      <LineId Id="9" Count="0" />
      <LineId Id="287" Count="0" />
      <LineId Id="232" Count="2" />
      <LineId Id="238" Count="0" />
      <LineId Id="235" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="28" Count="9" />
      <LineId Id="288" Count="0" />
      <LineId Id="38" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="327" Count="4" />
      <LineId Id="386" Count="2" />
      <LineId Id="332" Count="4" />
      <LineId Id="390" Count="1" />
      <LineId Id="389" Count="0" />
      <LineId Id="337" Count="4" />
      <LineId Id="392" Count="0" />
      <LineId Id="344" Count="1" />
      <LineId Id="343" Count="0" />
      <LineId Id="241" Count="1" />
      <LineId Id="244" Count="0" />
      <LineId Id="247" Count="0" />
      <LineId Id="246" Count="0" />
      <LineId Id="393" Count="2" />
      <LineId Id="27" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="41" Count="1" />
      <LineId Id="53" Count="1" />
      <LineId Id="57" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="55" Count="1" />
      <LineId Id="136" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="72" Count="1" />
      <LineId Id="62" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="81" Count="1" />
      <LineId Id="85" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="227" Count="1" />
      <LineId Id="87" Count="0" />
      <LineId Id="83" Count="1" />
      <LineId Id="92" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="94" Count="2" />
      <LineId Id="102" Count="1" />
      <LineId Id="105" Count="2" />
      <LineId Id="112" Count="1" />
      <LineId Id="115" Count="1" />
      <LineId Id="124" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="132" Count="1" />
      <LineId Id="239" Count="1" />
      <LineId Id="251" Count="1" />
      <LineId Id="396" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="125" Count="2" />
      <LineId Id="144" Count="0" />
      <LineId Id="134" Count="1" />
      <LineId Id="25" Count="0" />
      <LineId Id="149" Count="0" />
      <LineId Id="295" Count="1" />
      <LineId Id="148" Count="0" />
      <LineId Id="298" Count="9" />
      <LineId Id="297" Count="0" />
      <LineId Id="309" Count="9" />
      <LineId Id="308" Count="0" />
      <LineId Id="320" Count="6" />
      <LineId Id="319" Count="0" />
    </LineIds>
    <LineIds Name="RunLabelHandler.FB_init">
      <LineId Id="25" Count="8" />
      <LineId Id="13" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="37" Count="6" />
      <LineId Id="36" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="52" Count="1" />
      <LineId Id="85" Count="1" />
      <LineId Id="51" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="84" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>