<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.10">
  <POU Name="RunUnitCellularC" Id="{0b9fe5c8-2bef-4f04-b3ac-e69748226c8f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunUnitCellularC EXTENDS RunUnitTransporterBase
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	//devices
	reachSensor : POINTER TO RunSignal;
	interfereSensor : POINTER TO RunSignal;
	holderCylinder : POINTER TO RunCylinder;
	pusherCylinder : POINTER TO RunCylinder;
	//liner
	liner : POINTER TO RunAxis;
	//rotator
	rotator : POINTER TO RunAxis;
END_VAR
VAR CONSTANT
	indexSend : INT := 1;
	indexReceive : INT := 2;
	indexWork : INT := 3; //especially for Cellular D
END_VAR
VAR RETAIN
	//TODO memorize carrier existed?
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^();
//inherits sync/mat relative variables

//interfere auto cut axis	(high priority


CASE State OF 
	//-----------------switch function
	0:
		IF reachSensor^.debouncedOn THEN
			//occupied , sending procedure
			NextState := 16#200;
		ELSE
			//vacuumed , receiving procedure
			NextState := 16#100;
		END_IF
	//-----------------sending procedure 
	16#200:
		IF NOT syncAcknowledged THEN
			bSerialTransition := TRUE; //make sure synchronized
		END_IF
	16#201:
		IF holderCylinder^.Execute(eCylinderCommands.COMMAND_B) AND NOT transitionByte.0 THEN
			transitionByte.0 := TRUE;
		END_IF
		IF pusherCylinder^.Execute(eCylinderCommands.COMMAND_A) AND NOT transitionByte.1 THEN
			transitionByte.1 := TRUE;
		END_IF
		IF transitionByte = 16#3 AND interfereSensor^.debouncedOff THEN
			bSerialTransition := TRUE;
		END_IF
	16#202:
		IF liner^.ExecuteParameterIndex(indexSend) AND NOT transitionByte.0 THEN
			transitionByte.0 := TRUE;
		END_IF
		IF rotator^.ExecuteParameterIndex(indexSend) AND NOT transitionByte.1 THEN
			transitionByte.1 := TRUE;
		END_IF
		IF transitionByte = 16#3 THEN
			bSerialTransition := TRUE;
		END_IF
	16#203:
		IF holderCylinder^.Execute(eCylinderCommands.COMMAND_A) THEN
			//release , wait to send
			syncEngaged := TRUE;
			bSerialTransition := TRUE;
		END_IF
	16#204:
		IF syncAcknowledged AND pusherCylinder^.Execute(eCylinderCommands.COMMAND_B) THEN
			//go out
			bSerialTransition := TRUE;
		END_IF
	16#205:
		IF interfereSensor^.debouncedOff THEN
			//leaved
			syncEngaged := FALSE;
			bSerialTransition := TRUE;
		END_IF
	16#206:
		IF pusherCylinder^.Execute(eCylinderCommands.COMMAND_A) THEN
			NextState := 0; //rewind
		END_IF
	//---------------------receiving procedure
	16#100:
		IF holderCylinder^.Execute(eCylinderCommands.COMMAND_A) AND NOT transitionByte.0 THEN
			transitionByte.0 := TRUE;
		END_IF
		IF pusherCylinder^.Execute(eCylinderCommands.COMMAND_A) AND NOT transitionByte.1 THEN
			transitionByte.1 := TRUE;
		END_IF
		IF transitionByte = 16#3 AND interfereSensor^.debouncedOff THEN
			bSerialTransition := TRUE;
		END_IF
	16#101:
		IF liner^.ExecuteParameterIndex(indexReceive) AND NOT transitionByte.0 THEN
			transitionByte.0 := TRUE;
		END_IF
		IF rotator^.ExecuteParameterIndex(indexReceive) AND NOT transitionByte.1 THEN
			transitionByte.1 := TRUE;
		END_IF
		IF transitionByte = 16#3 THEN
			bSerialTransition := TRUE;
		END_IF
	16#102:
		IF Upstream<>0 AND_THEN Upstream^.syncEngaged THEN
			Upstream^.syncAcknowledged := TRUE;
			bSerialTransition := TRUE;
		END_IF
	16#103:
		IF Upstream<>0 AND_THEN NOT Upstream^.syncEngaged THEN
			bSerialTransition := TRUE;
		END_IF
	16#104:
		bSerialTransition := pusherCylinder^.Execute(eCylinderCommands.COMMAND_B); //push-in
	16#105:
		bSerialTransition := pusherCylinder^.Execute(eCylinderCommands.COMMAND_A);
	16#106:
		IF holderCylinder^.Execute(eCylinderCommands.COMMAND_B) THEN
			NextState := 0;//rewind
		END_IF
END_CASE
]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{a9a51c1b-f758-4ded-9a6c-01bf50e17b39}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	argParent : POINTER TO RunUnitGeneric;
	argSlotBase : POINTER TO MaterialBlock;
	argSlotLast : POINTER TO MaterialBlock;
	
	argUpstream : POINTER TO RunUnitIndexerMaster;
	
	argLinear : POINTER TO RunAxis;
	argRotator : POINTER TO RunAxis;
	argReachSensor : POINTER TO RunSignal;
	argInterfereSensor : POINTER TO RunSignal;
	argHolderCylinder : POINTER TO RunCylinder;
	argPusherCylinder : POINTER TO RunCylinder;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//initialize 
Parent := argParent;
SlotBase := argSlotBase;
SlotLast := argSlotLast;

Upstream := argUpstream;

IF Upstream=0 THEN
	isProxyMode:=TRUE; //no upstream , i am proxy
END_IF

//device link
liner := argLinear;
rotator := argRotator;
reachSensor := argReachSensor;
interfereSensor := argInterfereSensor;
holderCylinder := argHolderCylinder;
pusherCylinder := argPusherCylinder;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="RunUnitCellularC">
      <LineId Id="26" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="42" Count="1" />
      <LineId Id="45" Count="1" />
      <LineId Id="146" Count="0" />
      <LineId Id="47" Count="1" />
      <LineId Id="147" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="88" Count="3" />
      <LineId Id="37" Count="0" />
      <LineId Id="109" Count="7" />
      <LineId Id="51" Count="2" />
      <LineId Id="60" Count="1" />
      <LineId Id="63" Count="1" />
      <LineId Id="62" Count="0" />
      <LineId Id="65" Count="2" />
      <LineId Id="70" Count="2" />
      <LineId Id="74" Count="1" />
      <LineId Id="73" Count="0" />
      <LineId Id="76" Count="2" />
      <LineId Id="81" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="82" Count="2" />
      <LineId Id="86" Count="1" />
      <LineId Id="85" Count="0" />
      <LineId Id="95" Count="3" />
      <LineId Id="38" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="99" Count="1" />
      <LineId Id="92" Count="0" />
      <LineId Id="102" Count="1" />
      <LineId Id="101" Count="0" />
      <LineId Id="104" Count="3" />
      <LineId Id="117" Count="7" />
      <LineId Id="108" Count="0" />
      <LineId Id="125" Count="2" />
      <LineId Id="129" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="141" Count="4" />
      <LineId Id="30" Count="0" />
      <LineId Id="27" Count="0" />
    </LineIds>
    <LineIds Name="RunUnitCellularC.FB_init">
      <LineId Id="21" Count="8" />
      <LineId Id="7" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="32" Count="5" />
    </LineIds>
  </POU>
</TcPlcObject>