<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.10">
  <POU Name="RunUnitCellularC" Id="{0b9fe5c8-2bef-4f04-b3ac-e69748226c8f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RunUnitCellularC EXTENDS RunUnitTransporterBase
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	//devices
	reachSensor : POINTER TO RunSignal;
	interfereSensor : POINTER TO RunSignal;
	holderCylinder : POINTER TO RunCylinder;
	pusherCylinder : POINTER TO RunCylinder;
	//liner
	liner : POINTER TO RunAxis;
	ptLinerSend : POINTER TO ParameterSet;
	ptLinerWork : POINTER TO ParameterSet;
	ptLinerReceive : POINTER TO ParameterSet;
	//rotator (option
	rotator : POINTER TO RunAxis;
	ptRotatorMutual : POINTER TO ParameterSet;
	ptRotatorSend : POINTER TO ParameterSet;
	ptRotatorReceive : POINTER TO ParameterSet;
END_VAR
VAR PERSISTENT
	//TODO memorize carrier existed?
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^();
//inherits sync/mat relative variables

//interfere auto cut axis	(high priority


CASE outputState OF 
	eSpecialStates.INITIAL_BEGIN:
		bSerialTransition := holderCylinder^.Execute(eCylinderCommands.COMMAND_B); //hold
	eSpecialStates.INITIAL_STATE_1:
		IF (rotator=0 OR (rotator<>0 AND_THEN rotator^.ExecuteParameter(ptRotatorMutual))) THEN
			NextState := eSpecialStates.INITIAL_END;
		END_IF
	//-----------------switch function
	0:
		IF reachSensor^.debouncedOn THEN
			//occupied , sending procedure
			NextState := 16#2000;
		ELSE
			//vacuumed , receiving procedure
			NextState := 16#1000;
		END_IF
	//-----------------sending procedure 
	16#2000:
		IF holderCylinder^.Execute(eCylinderCommands.COMMAND_B) AND NOT transitionByte.0 THEN
			transitionByte.0 := TRUE;
		END_IF
		IF pusherCylinder^.Execute(eCylinderCommands.COMMAND_A) AND NOT transitionByte.1 THEN
			transitionByte.1 := TRUE;
		END_IF
		IF transitionByte = 16#3 AND interfereSensor^.debouncedOff THEN
			bSerialTransition := TRUE;
		END_IF
	16#2001:
		bSerialTransition := rotator=0 OR (rotator<>0 AND_THEN rotator^.ExecuteParameter(ptRotatorMutual)); //otherwise would interfere
	16#2002:
		bSerialTransition := liner^.ExecuteParameter(ptLinerSend);
	16#2003:
		bSerialTransition := rotator=0 OR (rotator<>0 AND_THEN rotator^.ExecuteParameter(ptRotatorSend)); //reached then rotate
	16#2004:
		IF holderCylinder^.Execute(eCylinderCommands.COMMAND_A) THEN
			//release , wait to send
			syncMatValid := SlotBase^.Valid;
			syncMatId := SlotBase^.Id;
			syncEngaged := TRUE;
			bSerialTransition := TRUE;
		END_IF
	16#2005:
		IF syncAcknowledged AND_THEN pusherCylinder^.Execute(eCylinderCommands.COMMAND_B) THEN
			//go out
			bSerialTransition := TRUE;
		END_IF
	16#2006:
		IF interfereSensor^.debouncedOff AND reachSensor^.debouncedOff THEN
			syncEngaged := FALSE;//leaved
			bSerialTransition := TRUE;
		END_IF
	16#2007:
		IF pusherCylinder^.Execute(eCylinderCommands.COMMAND_A) AND NOT syncAcknowledged THEN
			//make sure synchronized
			NextState := 16#1000; //rewind
		END_IF
	//---------------------receiving procedure
	16#1000:
		// holder off , pusher off , rotator/linear in receive position
		IF NOT transitionByte.0 AND_THEN holderCylinder^.Execute(eCylinderCommands.COMMAND_A) THEN
			transitionByte.0 := TRUE;
		END_IF
		IF  NOT transitionByte.1  AND_THEN pusherCylinder^.Execute(eCylinderCommands.COMMAND_A) THEN
			transitionByte.1 := TRUE;
		END_IF
		IF NOT transitionByte.2 AND_THEN (rotator=0 OR (rotator<>0 AND_THEN rotator^.ExecuteParameter(ptRotatorMutual))) THEN
			transitionByte.2 := TRUE;
		END_IF		
		IF transitionByte = 16#7 AND interfereSensor^.debouncedOff THEN
			bSerialTransition := TRUE;
		END_IF
	16#1001:
		bSerialTransition := liner^.ExecuteParameter(ptLinerReceive);
	16#1002:
			bSerialTransition := rotator=0 OR (rotator<>0 AND_THEN rotator^.ExecuteParameter(ptRotatorReceive));
	16#1003:
		IF Upstream<>0 AND_THEN Upstream^.syncEngaged THEN
			//receive data
			SlotBase^.Valid := Upstream^.syncMatValid;
			SlotBase^.Id := Upstream^.syncMatId;
			//reply
			Upstream^.syncAcknowledged := TRUE; //
			bSerialTransition := TRUE;
		END_IF
	16#1004:
		bSerialTransition := interfereSensor^.debouncedOff AND reachSensor^.debouncedOn;
	16#1005:
		IF Upstream<>0 AND_THEN NOT Upstream^.syncEngaged THEN
			Upstream^.syncAcknowledged := FALSE; //completely follow upstream ,
			bSerialTransition := TRUE;
		END_IF
	16#1006:
		IF holderCylinder^.Execute(eCylinderCommands.COMMAND_B) THEN
			NextState := 16#3000;
		END_IF
	//------------------Work
	16#3000:
		IF NOT bSerialTransition AND_THEN (rotator=0 OR (rotator<>0 AND_THEN rotator^.ExecuteParameter(ptRotatorMutual))) THEN
			bSerialTransition := TRUE;
		END_IF
	16#3001:
		IF NOT bSerialTransition AND_THEN liner^.ExecuteParameter(ptLinerWork) THEN
			bSerialTransition := TRUE;
			slaveWorkingSignal[1] := slaveLinkageStatus[1]; //start working
		END_IF
	16#3002:
		IF NOT slaveWorkingSignal[1] THEN
			NextState := 16#2000;
		END_IF
END_CASE
]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{a9a51c1b-f758-4ded-9a6c-01bf50e17b39}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	
	argParent : POINTER TO RunUnitGeneric;
	argSlotBase : POINTER TO RunMaterial;
	argSlotLast : POINTER TO RunMaterial;
	
	argUpstream : POINTER TO RunUnitTransporterBase;
	
	argLinear : POINTER TO RunAxis;
	argRotator : POINTER TO RunAxis;
	argReachSensor : POINTER TO RunSignal;
	argInterfereSensor : POINTER TO RunSignal;
	argHolderCylinder : POINTER TO RunCylinder;
	argPusherCylinder : POINTER TO RunCylinder;
END_VAR
VAR CONSTANT
	indexSend : INT := 1;
	indexReceive : INT := 2;
	indexMutual : INT := 3; //equals to work position to Cellular D
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//initialize 
Parent := argParent;
SlotBase := argSlotBase;
SlotLast := argSlotLast;

Upstream := argUpstream;

IF Upstream=0 THEN
	isProxyMode:=TRUE; //no upstream , i am proxy
END_IF

//device link
liner := argLinear;

reachSensor := argReachSensor;
interfereSensor := argInterfereSensor;
holderCylinder := argHolderCylinder;
pusherCylinder := argPusherCylinder;
//position link
ptLinerSend := ADR(liner^.ptpCommands[indexSend]);
ptLinerReceive := ADR(liner^.ptpCommands[indexReceive]);
ptLinerWork := ADR(liner^.ptpCommands[indexMutual]);
// rotator(option
IF argRotator <> 0 THEN
	rotator := argRotator;
	
	ptRotatorSend := ADR(rotator^.ptpCommands[indexSend]);
	ptRotatorReceive := ADR(rotator^.ptpCommands[indexReceive]);
	ptRotatorMutual := ADR(rotator^.ptpCommands[indexMutual]);
END_IF
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="RunUnitCellularC">
      <LineId Id="26" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="414" Count="2" />
      <LineId Id="418" Count="1" />
      <LineId Id="417" Count="0" />
      <LineId Id="42" Count="1" />
      <LineId Id="45" Count="1" />
      <LineId Id="146" Count="0" />
      <LineId Id="47" Count="1" />
      <LineId Id="147" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="109" Count="7" />
      <LineId Id="51" Count="0" />
      <LineId Id="236" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="186" Count="1" />
      <LineId Id="239" Count="0" />
      <LineId Id="70" Count="2" />
      <LineId Id="470" Count="1" />
      <LineId Id="74" Count="1" />
      <LineId Id="73" Count="0" />
      <LineId Id="76" Count="2" />
      <LineId Id="81" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="82" Count="1" />
      <LineId Id="86" Count="1" />
      <LineId Id="85" Count="0" />
      <LineId Id="95" Count="1" />
      <LineId Id="281" Count="0" />
      <LineId Id="97" Count="1" />
      <LineId Id="38" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="274" Count="0" />
      <LineId Id="99" Count="1" />
      <LineId Id="92" Count="0" />
      <LineId Id="102" Count="1" />
      <LineId Id="101" Count="0" />
      <LineId Id="275" Count="2" />
      <LineId Id="104" Count="2" />
      <LineId Id="444" Count="1" />
      <LineId Id="324" Count="0" />
      <LineId Id="331" Count="0" />
      <LineId Id="340" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="483" Count="1" />
      <LineId Id="481" Count="0" />
      <LineId Id="485" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="267" Count="0" />
      <LineId Id="270" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="338" Count="0" />
      <LineId Id="341" Count="1" />
      <LineId Id="282" Count="1" />
      <LineId Id="347" Count="1" />
      <LineId Id="346" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="378" Count="2" />
      <LineId Id="293" Count="0" />
      <LineId Id="374" Count="0" />
      <LineId Id="376" Count="1" />
      <LineId Id="375" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="27" Count="0" />
    </LineIds>
    <LineIds Name="RunUnitCellularC.FB_init">
      <LineId Id="21" Count="8" />
      <LineId Id="7" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="32" Count="5" />
      <LineId Id="82" Count="3" />
      <LineId Id="88" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="117" Count="1" />
      <LineId Id="115" Count="1" />
      <LineId Id="113" Count="1" />
      <LineId Id="86" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>